import React from 'react';
import { Models as ModelsApp } from "mrmkmcib-app";
import { Models } from "mrmkmcib-crm";
import { Models as ModelsScheduler } from "mrmkmcib-scheduler";
import { Enums } from '../Enums';
import * as ModelsDealEditor from "../models/ModelsDealEditor";
import * as ModelsParentDealPicker from "../models/ModelsParentDealPicker";
import * as ModelsCampaignPicker from "../models/ModelsCampaignPicker";
import Error from "../models/Error";
export interface ISelectClassifierProps {
    performSelect: {
        (value: ModelsApp.Classifier): void;
    };
    classifierList: ModelsApp.ClassifierList;
    selectedCode: string | undefined;
    testID: string;
    navigateBack?: {
        (): void;
    };
    pageName?: string;
    codeText?: boolean;
}
export declare const SelectClassifier: (props: ISelectClassifierProps) => JSX.Element;
export declare const renderLabel: (label: string, key: string, isLast?: boolean) => JSX.Element;
declare const ViewDealEditor: React.StatelessComponent<IProps>;
export interface IProps {
    navigateToDealEditor: ModelsDealEditor.NAVIGATE_TO_DEAL_EDITOR;
    navigateToMemberListScreen: ModelsDealEditor.NAVIGATE_TO_MEMBER_LIST_SCREEN;
    navigateBack: ModelsDealEditor.NAVIGATE_BACK;
    navigateBackEditor: ModelsDealEditor.NAVIGATE_BACK_EDITOR;
    navigateToProductPickerScreen: ModelsDealEditor.NAVIGATE_TO_PRODUCT_PICKER_SCREEN;
    navigateToSalesMethodPickerScreen: ModelsDealEditor.NAVIGATE_TO_SALES_METHOD_PICKER_SCREEN;
    navigateToCurrencyPickerScreen: ModelsDealEditor.NAVIGATE_TO_CURRENCY_PICKER_SCREEN;
    navigateToActivityListScreen: ModelsDealEditor.NAVIGATE_TO_ACTIVITY_LIST_SCREEN;
    performCancel: ModelsDealEditor.PERFORM_CANCEL;
    performNext: ModelsDealEditor.PERFORM_NEXT;
    performSave: ModelsDealEditor.PERFORM_SAVE;
    performInputDescription: ModelsDealEditor.PERFORM_INPUT_DESCRIPTION;
    performInputProduct: ModelsDealEditor.PERFORM_INPUT_PRODUCT;
    performInputSalesMethod: ModelsDealEditor.PERFORM_INPUT_SALES_METHOD;
    performInputCurrency: ModelsDealEditor.PERFORM_INPUT_CURRENCY;
    performInputSumString: ModelsDealEditor.PERFORM_INPUT_SUM_STRING;
    performInputEquivalentSumString: ModelsDealEditor.PERFORM_INPUT_EQUIVALENT_SUM_STRING;
    performInputEquivalentConversionRateString: ModelsDealEditor.PERFORM_INPUT_EQUIVALENT_CONVERSION_RATE_STRING;
    performInputTransferCommission: ModelsDealEditor.PERFORM_INPUT_TRANSFER_COMMISSION;
    performInputStaffCount: ModelsDealEditor.PERFORM_INPUT_STAFF_COUNT;
    performInputDealDate: ModelsDealEditor.PERFORM_INPUT_DEAL_DATE;
    performActivityListAppend: ModelsDealEditor.PERFORM_ACTIVITY_LIST_APPEND;
    callPutDealActivityAppend: ModelsDealEditor.CALL_PUT_DEAL_ACTIVITY_APPEND;
    performActivityListExclude: ModelsDealEditor.PERFORM_ACTIVITY_LIST_EXCLUDE;
    callPutDealActivityExclude: ModelsDealEditor.CALL_PUT_DEAL_ACTIVITY_EXCLUDE;
    performScopeClearAndRefresh: ModelsDealEditor.PERFORM_SCOPE_CLEAR_AND_REFRESH;
    performContainerReset: ModelsDealEditor.PERFORM_CONTAINER_RESET;
    performTapActivityDelete: ModelsDealEditor.PERFORM_TAP_ACTIVITY_DELETE;
    navigateToDealTypePickerScreen: ModelsDealEditor.NAVIGATE_TO_DEAL_TYPE_PICKER_SCREEN;
    performShowAdditionalFields: ModelsDealEditor.PERFORM_SHOW_ADDITIONAL_FIELDS;
    navigateToCampaignPickerScreen: ModelsCampaignPicker.NAVIGATE_TO_CAMPAIGN_PICKER_SCREEN;
    navigateToParentDealPickerScreen: ModelsParentDealPicker.NAVIGATE_TO_PARENT_DEAL_CUSTOMER_LIST_SCREEN;
    navigateToAgentListScreen: ModelsDealEditor.NAVIGATE_TO_AGENT_PICKER_SCREEN;
    showChancePopover: ModelsDealEditor.SHOW_CHANCE_POPOVER;
    showAttractionChannelPopover: ModelsDealEditor.SHOW_ATTRACTION_CHANNEL_POPOVER;
    performSelectChance: ModelsDealEditor.PERFORM_SELECT_CHANCE;
    showApplicationPopover: ModelsDealEditor.SHOW_APPLICATION_POPOVER;
    performSelectApplication: ModelsDealEditor.PERFORM_SELECT_APPLICATION;
    showSalesMethodPopover: ModelsDealEditor.SHOW_SALES_METHOD_POPOVER;
    performCancelSaveError: ModelsDealEditor.PERFORM_CANCEL_SAVE_ERROR;
    performSelectAttractionChannel: ModelsDealEditor.PERFORM_SELECT_ATTRACTION_CHANNEL;
    performSelectSalesMethod: ModelsDealEditor.PERFORM_SELECT_SALES_METHOD;
    currentCustomerManaged: Models.CustomerManaged;
    currentDeal: Models.Deal;
    currentEditorStep: Enums.DealEditorStep;
    isEditorMode: boolean;
    isRowBlocked: boolean;
    inputDescription: string;
    inputProduct: ModelsApp.Classifier;
    inputAttractionChannel: ModelsApp.Classifier;
    inputDealType: ModelsApp.Classifier;
    salesMethodList: ModelsApp.ClassifierList;
    inputSalesMethod: ModelsApp.Classifier;
    inputCurrency: ModelsApp.Classifier | null;
    inputSumString: string | null;
    inputApplication: ModelsApp.Classifier;
    inputEquivalentSumString: string | null;
    inputDealDate: Date | null;
    activityList: ModelsScheduler.ActivityList;
    currentActivity: ModelsScheduler.Activity;
    dealActivityAppend: boolean;
    dealActivityAppendFetching: boolean;
    dealActivityAppendError: Error | null;
    dealActivityAppendCachedDate: Date | null;
    dealActivityExclude: boolean;
    dealActivityExcludeFetching: boolean;
    dealActivityExcludeError: Error | null;
    dealActivityExcludeCachedDate: Date | null;
    classifierDictionary: ModelsApp.ClassifierDictionary;
    dealSaveInProgress: boolean;
    dealSaveError: Error | null;
    testID: string;
    dealCreated: boolean;
    dealEditorMode: Enums.DealEditorMode | null;
    isValid: boolean;
    isEquivalentRateMode: boolean;
    inputEquivalentConversionRateString: string | null;
    isProductMethodEnabled: boolean;
    inputTeam: Models.MemberList;
    tapActivityDeleteId: string | Enums.SwipeableRowEmptyId;
    isNavigationButtonDisabled: boolean;
    isOwner: boolean;
    validationError: Error | null;
    isAdditionalFieldsAvailable: boolean;
    isChancePopoverOpened: boolean;
    inputChance: string | null;
    isApplicationPopoverOpened: boolean;
    isSalesMethodPopoverOpened: boolean;
    isAttractionChannelPopoverOpened: boolean;
    inputTransferCommission: string | null;
    inputStaffCount: string | null;
    inputAgentList: Models.AgentList;
    applicationKkClassifierList: ModelsApp.ClassifierList;
}
export default ViewDealEditor;
