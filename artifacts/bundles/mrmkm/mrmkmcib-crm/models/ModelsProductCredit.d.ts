/**
 * Models for ProductCredit container.
 *
 * @author Burnaev M.U.
 * @see
 */
import { Enums } from '../Enums';
import { Models as ModelsApp } from "mrmkmcib-app";
import { Models } from "mrmkmcib-crm";
export interface IProductCreditState {
    filteredProductCovenantList: Models.ProductCovenantList;
    productCovenantList: Models.ProductCovenantList;
    productCachedDateCovenantList: Date | null;
    covenantDateFilterValue: Date | null;
    isVisiblePopoverCovenantPeriodFilter: boolean;
    isVisiblePopoverCovenantStatusFilter: boolean;
    covenantPeriodFilterValueList: ModelsApp.ClassifierList;
    covenantStatusFilterValueList: ModelsApp.ClassifierList;
    covenantAppliedPeriodFilterValueList: ModelsApp.ClassifierList;
    covenantAppliedStatusFilterValueList: ModelsApp.ClassifierList;
    isCheckCovenantStatusFilterDisrupted: boolean;
    isCheckCovenantStatusFilterDone: boolean;
    isCheckCovenantStatusFilterNoDeadLine: boolean;
    covenantListFetching: boolean;
    covenantListFetchingError: Models.Error | null;
    currentForecastDealId: string;
    currentForecastEvent: Models.ForecastEvent;
    currentTab: Enums.ProductCreditTab;
    forecastDealList: Models.ForecastDealList;
    forecastDealListError: Models.Error | null;
    forecastDealListFetching: boolean;
    forecastError: Models.Error | null;
    forecastEventList: Models.ForecastEventList;
    forecastEventListCachedDate: Date | null;
    forecastEventListError: Models.Error | null;
    forecastEventListFetching: boolean;
    forecastEventListFiltered: Models.ForecastEventList;
    forecastFetching: boolean;
    forecastList: Models.ForecastEventList;
    inputActiveFilterForecastEventType: ModelsApp.Classifier | null;
    inputActiveFilterPeriodEnd: Date | null;
    inputActiveFilterPeriodStart: Date | null;
    inputActiveFilterPeriodType: Enums.ForecastPeriodType;
    inputFilterForecastEventType: ModelsApp.Classifier | null;
    inputFilterPeriodEnd: Date | null;
    inputFilterPeriodStart: Date | null;
    inputFilterPeriodType: Enums.ForecastPeriodType;
    inputForecastEventComment: string;
    inputForecastEventCurrency: ModelsApp.Classifier;
    inputForecastEventDate: Date | null;
    inputForecastEventEmail: string;
    inputForecastEventPossibility: number;
    inputForecastEventSum: string | null;
    inputForecastEventType: ModelsApp.Classifier | null;
    inputFullRepayment: boolean;
    inputPaymentScheduleFilterOperCodeCred: boolean;
    inputPaymentScheduleFilterOperCodeProc: boolean;
    inputPaymentScheduleFilterOperCodeOther: boolean;
    inputPaymentScheduleFilterOperCodeCredApplied: boolean;
    inputPaymentScheduleFilterOperCodeProcApplied: boolean;
    inputPaymentScheduleFilterOperCodeOtherApplied: boolean;
    inputPaymentScheduleFilterOperCodeCredOld: boolean;
    inputPaymentScheduleFilterOperCodeProcOld: boolean;
    inputPaymentScheduleFilterOperCodeOtherOld: boolean;
    inputPaymentScheduleFilterPeriodEnd: Date | null;
    inputPaymentScheduleFilterPeriodStart: Date | null;
    inputPaymentScheduleFilterPeriodEndApplied: Date | null;
    inputPaymentScheduleFilterPeriodStartApplied: Date | null;
    inputPaymentScheduleFilterPeriodEndOld: Date | null;
    inputPaymentScheduleFilterPeriodStartOld: Date | null;
    inputPaymentScheduleFilterStatusExecPay: boolean;
    inputPaymentScheduleFilterStatusForPay: boolean;
    inputPaymentScheduleFilterStatusNotPay: boolean;
    inputPaymentScheduleFilterStatusExecPayApplied: boolean;
    inputPaymentScheduleFilterStatusForPayApplied: boolean;
    inputPaymentScheduleFilterStatusNotPayApplied: boolean;
    inputPaymentScheduleFilterStatusExecPayOld: boolean;
    inputPaymentScheduleFilterStatusForPayOld: boolean;
    inputPaymentScheduleFilterStatusNotPayOld: boolean;
    inputValidationForecastEventComment: string | null;
    inputValidationForecastEventCurrency: string | null;
    inputValidationForecastEventEmail: string | null;
    inputValidationForecastEventPossibility: number | null;
    inputValidationForecastEventSumm: string | null;
    inputValidationForecastEventType: string | null;
    isModalForecastEventSaveErrorVisible: boolean;
    isPopoverPaymentSchedulePeriodFilterSelectedFromDatePicker: boolean;
    isVisiblePopoverFilter: boolean;
    isVisiblePopoverForecastEvent: boolean;
    isVisiblePopoverPaymentScheduleOperationTypeFilter: boolean;
    isVisiblePopoverPaymentSchedulePeriodFilter: boolean;
    isVisiblePopoverPaymentScheduleStatusFilter: boolean;
    newForecastEventSaveError: Models.Error | null;
    newForecastEventSaveInProgress: boolean;
    forecastEventEditSaveInProgress: boolean;
    paymentScheduleList: Models.PaymentScheduleList;
    paymentScheduleListCachedDate: Date | null;
    paymentScheduleListFetching: boolean;
    paymentScheduleListFetchingFailure: Models.Error | null;
    paymentScheduleListFetchingSuccess: Models.Error | null;
    paymentScheduleListLoadMoreFetching: boolean;
    paymentScheduleListError: Models.Error | null;
    paymentScheduleListFiltered: Models.PaymentScheduleList;
    isVisiblePaymentScheduleRefreshModalAlert: boolean;
    paymentScheduleAlternativeScenariosTitle: string | null;
    paymentScheduleAlternativeScenariosMessage: string | null;
    paymentScheduleAlertViewIsVisible: boolean;
    paymentScheduleErrorModalIsVisible: boolean;
    paymentScheduleAlternativeScenariosType: Enums.paymentScheduleAlternativeScenariosType | null;
}
export declare const initialState: {
    readonly state: IProductCreditState;
};
export declare type FORECAST_EVENT_LIST_FILTER = (forecastEventList: Models.ForecastEventList) => void;
export declare type NAVIGATE_PRODUCT_CREDIT_BACK = () => void;
export declare type NAVIGATE_PRODUCT_CREDIT_DEAL_BACK = () => void;
export declare type NAVIGATE_TO_FORECAST_EVENT_CURRENCY_PICKER_SCREEN = () => void;
export declare type NAVIGATE_TO_FORECAST_EVENT_FILTER_PERIOD_CUSTOM_DATE_SCREEN = () => void;
export declare type NAVIGATE_TO_FORECAST_EVENT_FILTER_PERIOD_SCREEN = () => void;
export declare type NAVIGATE_TO_FORECAST_EVENT_FILTER_TYPE_PICKER_SCREEN = () => void;
export declare type NAVIGATE_TO_FORECAST_EVENT_POSSIBILITY_PICKER_SCREEN = () => void;
export declare type NAVIGATE_TO_FORECAST_EVENT_TYP_PICKER_SCREEN = () => void;
export declare type NAVIGATE_TO_FORECAST_SCREEN = () => void;
export declare type PERFORM_CANCEL_EDIT_FORECAST_EVENT = () => void;
export declare type PERFORM_SAVE_EDIT_FORECAST_EVENT = () => void;
export declare type NAVIGATE_TO_PAYMENT_SCHEDULE_SCREEN = () => void;
export declare type NAVIGATE_TO_PERIOD_TYPE_CUSTOM_SCREEN = () => void;
export declare type PERFORM_CHANGE_TAB = (index: number, value: Enums.ProductCreditTab) => void;
export declare type PERFORM_CONTAINER_RESET = () => void;
export declare type PERFORM_CREATE_EVENT_POPUP_RESET = () => void;
export declare type PERFORM_FILL_DEFAULT_VALUES_AND_SHOW_CREATE_EVENT_POPUP = () => void;
export declare type PERFORM_FILTER_APPLY = () => void;
export declare type PERFORM_FILTER_CUSTOM_DATE_APPLY = () => void;
export declare type PERFORM_FILTER_EVENT_TYPE_RESET = () => void;
export declare type PERFORM_FILTER_PERIOD_RESET = () => void;
export declare type PERFORM_FILTER_RESET = () => void;
export declare type PERFORM_FORECAST_EVENT_SAVE = () => void;
export declare type PERFORM_FORECAST_EVENTS_LIST_FLUSH = () => void;
export declare type PERFORM_HIDE_MODAL_FORECAST_EVENT_SAVE_ERROR = () => void;
export declare type PERFORM_HIDE_MODAL_FORECAST_EVENT_GET_LIST_ERROR = () => void;
export declare type PERFORM_INPUT_FILTER_FORECAST_EVENT_TYPE = (value: ModelsApp.Classifier) => void;
export declare type PERFORM_INPUT_FILTER_PERIOD_END = (value: Date | null) => void;
export declare type PERFORM_INPUT_FILTER_PERIOD_START = (value: Date | null) => void;
export declare type PERFORM_INPUT_FILTER_PERIOD_TYPE = (value: Enums.ForecastPeriodType) => void;
export declare type PERFORM_INPUT_FORECAST_EVENT_COMMENT = (value: string) => void;
export declare type PERFORM_INPUT_FORECAST_EVENT_CURRENCY = (value: ModelsApp.Classifier) => void;
export declare type PERFORM_INPUT_FORECAST_EVENT_DATE = (value: Date | null) => void;
export declare type PERFORM_INPUT_FORECAST_EVENT_EMAIL = (value: string) => void;
export declare type PERFORM_INPUT_FORECAST_EVENT_FILTER_PERIOD_TYPE = (value: Enums.ForecastPeriodType) => void;
export declare type PERFORM_INPUT_FORECAST_EVENT_POSSIBILITY = (value: number) => void;
export declare type PERFORM_INPUT_FORECAST_EVENT_SUM = (value: string | null) => void;
export declare type PERFORM_INPUT_FORECAST_EVENT_TYPE = (value: ModelsApp.Classifier) => void;
export declare type PERFORM_INPUT_FULL_REPAYMENT = (value: boolean) => void;
export declare type PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_DEBT_REPAYMENT = (value: boolean) => void;
export declare type PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_INTEREST_REPAYMENT = (value: boolean) => void;
export declare type PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_OTHER_REPAYMENT = (value: boolean) => void;
export declare type PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_STATUS_PAID = (value: boolean) => void;
export declare type PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_STATUS_TO_PAY = (value: boolean) => void;
export declare type PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_STATUS_UNPAID = (value: boolean) => void;
export declare type PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_PERIOD_END = (value: Date | null) => void;
export declare type PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_PERIOD_START = (value: Date | null) => void;
export declare type PERFORM_POPOVER_PAYMENT_SCHEDULE_PERIOD_FILTER_SWITCH_DATEPICKER = (value: boolean) => void;
export declare type PERFORM_POPOVER_FILTER_HIDE = () => void;
export declare type PERFORM_POPOVER_FILTER_SHOW = () => void;
export declare type PERFORM_POPOVER_FORECAST_EVENT_HIDE = () => void;
export declare type PERFORM_POPOVER_FORECAST_EVENT_SHOW = (forecastEvent: Models.ForecastEvent) => void;
export declare type PERFORM_POPOVER_PAYMENT_SCHEDULE_OPERATION_TYPE_FILTER_HIDE = () => void;
export declare type PERFORM_POPOVER_PAYMENT_SCHEDULE_OPERATION_TYPE_FILTER_SHOW = () => void;
export declare type PERFORM_POPOVER_PAYMENT_SCHEDULE_PERIOD_FILTER_HIDE = () => void;
export declare type PERFORM_POPOVER_PAYMENT_SCHEDULE_PERIOD_FILTER_SHOW = () => void;
export declare type PERFORM_POPOVER_PAYMENT_SCHEDULE_STATUS_FILTER_HIDE = () => void;
export declare type PERFORM_POPOVER_PAYMENT_SCHEDULE_STATUS_FILTER_SHOW = () => void;
export declare type PERFORM_REFRESH_FORECAST = () => void;
export declare type PERFORM_REPEAT_FORECAST_EVENT_SAVE = () => void;
export declare type PERFORM_NAVIGATE_TO_COVENANT_LIST_PAGE = () => void;
export declare type PERFORM_CHANGE_VISIBLE_POPOVER_COVENANT_PERIOD_FILTER = (value: boolean) => void;
export declare type PERFORM_CHANGE_VISIBLE_POPOVER_COVENANT_STATUS_FILTER = (value: boolean) => void;
export declare type PERFORM_CHANGE_COVENANT_DATE_FILTER_VALUE = (value: Date | null) => void;
export declare type PERFORM_CHANGE_CHECK_STATUS_CREDIT_COVENANT_PERIOD_FILTER = (value: ModelsApp.Classifier) => void;
export declare type PERFORM_CHANGE_CHECK_STATUS_CREDIT_COVENANT_STATUS_FILTER = (value: ModelsApp.Classifier) => void;
export declare type PERFORM_APPLY_COVENANT_STATUS_FILTER = () => void;
export declare type PERFORM_APPLY_COVENANT_PERIOD_FILTER = () => void;
export declare type PERFORM_CALL_GET_PRODUCT_COVENANT_LIST = (contractNumber: string) => void;
export declare type PERFORM_CALL_GET_PRODUCT_COVENANT_LIST_CACHE_RESET = () => void;
export declare type PERFORM_FORECAST_EVENT_DELETE = () => void;
export declare type PERFORM_OPEN_FORECAST_EVENT_DETAILS = (forecastEvent: Models.ForecastEvent) => void;
export declare type PERFORM_CLEAR_CURRENT_FORECAST_EVENT = () => void;
export declare type PERFORM_CUSTOMER_OPEN_EXECUTE = (customer: Models.Customer) => void;
export declare type PERFORM_FORECAST_EVENT_CREATE = () => void;
export declare type PERFORM_FORECAST_EVENT_UPDATE = (event: Models.ForecastEvent) => void;
export declare type PERFORM_PROGNOSTIC_EVENT_CREATE = () => void;
export declare type PERFORM_PROGNOSTIC_EVENT_UPDATE = (event: Models.ForecastEvent) => void;
export declare type PERFORM_PROGNOSTIC_EVENT_DETAIL = (event: Models.ForecastEvent) => void;
export declare type PERFORM_PAYMENT_SCHEDULE_LIST_FLUSH = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_FILTER_PERIOD_SAVE = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_FILTER_PERIOD_SET = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_SAVE = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_FILTER_STATUS_SAVE = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_LOAD_MORE = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_REFRESH_ALERT_SHOW = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_REFRESH_ALERT_HIDE = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_FILTER_PERIOD_RESET = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_RESET = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_FILTER_STATUS_RESET = () => void;
export declare type NAVIGATE_TO_CUSTOMER_SCREEN = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_ALERT_SHOW = (paymentScheduleAlternativeScenariosType: Enums.paymentScheduleAlternativeScenariosType, paymentScheduleAlternativeScenariosMessage: string | null, paymentScheduleAlternativeScenariosTitle: string | null) => void;
export declare type PERFORM_PAYMENT_SCHEDULE_ALERT_HIDE = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_ALERT_VIEW_HANDLE_OK = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_ALERT_VIEW_HANDLE_CANCEL = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_ERROR_SHOW = (paymentScheduleAlternativeScenariosType: Enums.paymentScheduleAlternativeScenariosType, paymentScheduleAlternativeScenariosMessage: string | null, paymentScheduleAlternativeScenariosTitle: string | null) => void;
export declare type PERFORM_PAYMENT_SCHEDULE_ERROR_HIDE = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_LIST_REFRESH = () => void;
export declare type PERFORM_PAYMENT_SCHEDULE_ERROR_VIEW_HANDLE_REPEAT = () => void;
export declare type PERFORM_CUSTOMER_OPEN = (customer: Models.Customer) => void;
