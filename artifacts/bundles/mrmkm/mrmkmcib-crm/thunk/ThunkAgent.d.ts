import * as ModelState from '../models/Models';
import { Models as ModelsApp } from 'mrmkmcib-app';
import { Models } from 'mrmkmcib-crm';
import { Enums } from '../Enums';
import Response from '../models/Response';
export declare const performSendEmail: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSchedulerOpen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputFirstName: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputLastName: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputMiddleName: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToJobPickerScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputJobPosition: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSearchJobPosition: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputWorkPhone: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputMobilePhone: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputEmail: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputBirthday: (value: Date) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputGender: (value: Enums.GenderList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToRelationTypePickerScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputRelationType: (value: ModelsApp.Classifier) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputComment: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSave: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performClearCacheCurrentAgent: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performOpenCustomerScreen: (customer: Models.AgentCustomerPosition) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performValidate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPostAgentCreate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPutAgentUpdate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performEdit: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCloseAgentScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCancel: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const perfromCloseAgentOccasionListScreen: (agent: Models.Agent) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const perfromCloseAgentNoteListScreen: (agent: Models.Agent) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performAddAgentToHistoryMobileApp: (index: number, splitPanelName: string, customer: Models.Customer) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performChangeDisplayAgentErrorModalWindow: (value: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToOccasionList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToOccasionAgentListFromPush: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToNoteList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToAgentComment: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSetAgentCommentEditStatus: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputAgentNoteList: (noteList: Models.NoteList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputAgentOccasionList: (occasionList: Models.OccasionList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCreateActivityAccessRequest: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToMemberList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSaveAgentComment: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performGetUncachedAgent: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performOpenAgentScreen: (agent: Models.Agent, currentCustomerManaged: Models.CustomerManaged, agentMode: Enums.AgentMode, agentContextMode: Enums.AgentContextMode) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const getAgentScopeActivityList: (agent: Models.Agent, customer: Models.Customer, instanceType: any) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performAgentCurrentModeRefresh: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performFlush: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callGetAgentSuccess: (response: Response<Models.Agent>) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callGetAgent: (agent: Models.Agent) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callGetUpdateAgentFailure: (error: Models.Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callGetAgentById: (agentId: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToAgentCustomerPositionListScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateBack: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const resetNavigatePanel: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performContainerReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInit: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
