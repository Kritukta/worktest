import * as ModelState from "../models/Models";
import { Models as ModelsApp } from "mrmkmcib-app";
import { Models } from "mrmkmcib-crm";
import { Enums } from '../Enums';
import Error from "../models/Error";
export declare const navigateToCustomerPickerScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCancelSearchCustomer: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const getNavigationContentSchedulerActivity: (page: Enums.NavigationActivityDetails) => "" | "AppScheduler_ActivityMainScreen" | "AppScheduler_ActivityStatus" | "AppScheduler_ActivityResult" | "AppScheduler_ActivityAgentList" | "AppScheduler_ActivityMemberList" | "AppScheduler_ActivityType" | "AppScheduler_ActivityPriority" | "AppScheduler_ActivityCustomer" | "AppScheduler_ActivityEmpoloyee";
export declare const navigateToMemberListScreenPage: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const swapMemberList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performChangeDisplayErrorModalWindow: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSearchManagedOnly: (value: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSearch: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearchReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const search_validateSearch: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const search_callGetCustomerSearchList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearchFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearch: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const filterCustomerList: (inputSearch: string, inputSearchManagedOnly: boolean, currentCustomerManaged: Models.CustomerManaged, currentCustomer: Models.Customer) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputCustomer: (customer: Models.Customer) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callGetCustomer: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputComment: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCancel: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSave: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSaveSuccess: (data: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSaveFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPostCustomerActivityExcludeCreate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performValidate: (currentUser: ModelsApp.Employee, currentCustomerManaged: Models.CustomerManaged, currentCustomer: Models.Customer) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateBack: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performContainerReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
