import * as ModelState from "../models/Models";
import { Models as ModelsApp } from "mrmkmcib-app";
import { Models } from "mrmkmcib-crm";
import Error from "../models/Error";
export declare const performCustomerEditorShow: (customer: Models.CustomerManaged) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const swapContext: (customer: Models.CustomerManaged, isEditorMode: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCancel: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performNext: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSave: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCustomerOpenAfterSaveSuccess: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSaveSuccess: (data: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSaveFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callGetCustomerModifierId: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPutCustomerUpdate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToCountryPickerScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputCountry: (value: ModelsApp.Classifier) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSubject: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputRegion: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputCity: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSettlement: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputStreet: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputHouse: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputBuilding: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputBlock: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputFlat: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToCustomerActivityIncludeScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToCustomerActivityExcludeScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const closeCustomerActivityPanel: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateCustomerEditorBack: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performContainerReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
