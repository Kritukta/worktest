#!/usr/bin/env ruby

# This script configures the application project and targets
# which are using the UFSLibrary framework.

require 'xcodeproj'
require 'dir'
require 'pp'
require 'pathname'
require 'fileutils'

# Parameters
deployment_target = '9.3'
organization_name = 'SberTech'
UFS_SPLASH_SCREEN_XIB_NAME = 'UFSSplashScreen.xib'
UFS_LOGO_IMAGE_SET_NAME = 'ufs-big-logo.imageset'
target_device = '2' # '1' - iPhone, '2' - iPad, '1,2' - Universal

# Path work
script_dir = File.dirname(__FILE__)

unless script_dir.include?('node_modules')
    puts 'Warning: Not running from node_modules subfolder. Most likely running from UFSPlatform! Aborting.'
    exit
end

ufs_dir = File.expand_path(script_dir + '/..')
root_dir = File.expand_path(ufs_dir + '/../..')
ios_dir = root_dir + '/ios'
react_native_npm_name = 'react-native'
react_native_path = File.expand_path("#{ufs_dir}/../#{react_native_npm_name}")
$ufs_npm_name = File.basename(ufs_dir)

Dir.chdir(ufs_dir)
framework_path = Dir.glob('**/*.framework')[0]
if framework_path
    framework_path = ufs_dir + '/' + framework_path
else
    Kernel.abort('Unable to find framework in ' + ufs_dir)
end
framework_file = File.basename(framework_path)
framework_name = File.basename(framework_path, '.framework')

Dir.chdir(ios_dir)
project_path = Dir.glob('*.xcodeproj')[0]
if project_path
    project_path = ios_dir + '/' + project_path
else
    Kernel.abort('Unable to find project in ' + ios_dir)
end
project_name = File.basename(project_path, '.xcodeproj')

if project_name == 'UFSPlatform'
    puts "Warning: Running on UFSPlatform! Aborting."
    exit
end

# Load project
project = Xcodeproj::Project.open(project_path)

# Disable bitcode
p "Disable bitcode"
for config in project.build_configurations
    config.build_settings['ENABLE_BITCODE'] = 'NO'
end
for target in project.targets
    for config in target.build_configurations
        config.build_settings.delete('ENABLE_BITCODE')
    end
end

# Update project build settings
rel_framework_dir = Pathname.new(ufs_dir)
    .relative_path_from(Pathname.new(ios_dir))
    .to_s
$xcode_framework_path = "$(SRCROOT)/#{rel_framework_dir}/**"

def as_array(value)
    if value == nil
        value = []
    elsif !value.kind_of?(Array)
        value = [value]
    end
    return value
end

def update_paths(config, key)
    framework_paths = as_array(config.build_settings[key])

    # Remove old paths and add new
    framework_paths.select! { |path| !path.include?($ufs_npm_name) }
    framework_paths << $xcode_framework_path
    config.build_settings[key] = framework_paths
end

# Replace old library paths
for config in project.build_configurations
    update_paths(config, 'FRAMEWORK_SEARCH_PATHS')
    update_paths(config, 'HEADER_SEARCH_PATHS')
end

# (Re)add framework to project
frameworks = project.frameworks_group
frameworks.files
    .select { |framework| framework.name == framework_file }
    .each { |framework| framework.remove_from_project }
framework = frameworks.new_reference(framework_path)

def remove_nil_files(phase)
    files = phase.files_references
    for file in files.kind_of?(Array) ? files : [files]
        if file == nil
            phase.remove_file_reference(file)
        end
    end
end

def remove_files_containing(phase, str)
    phase.files_references
        .select { |file| file.path.include?(str) }
        .each { |file| phase.remove_file_reference(file) }
end

# Modify all targets
for target in project.targets
    # Modify build phases
    link_phase = target.frameworks_build_phase

    # Unlink React Native libraries and old frameworks
    remove_nil_files(link_phase)
    remove_files_containing(link_phase, 'libRCTText')
    remove_files_containing(link_phase, 'libRCTLinking')
    remove_files_containing(link_phase, 'libRCTActionSheet')
    remove_files_containing(link_phase, 'libRCTGeolocation')
    remove_files_containing(link_phase, 'libRCTNetwork')
    remove_files_containing(link_phase, 'libRCTSettings')
    remove_files_containing(link_phase, 'libRCTVibration')
    remove_files_containing(link_phase, 'libRCTWebSocket')
    remove_files_containing(link_phase, 'libReact')
    remove_files_containing(link_phase, $ufs_npm_name)

    # Relink framework
    link_phase.add_file_reference(framework)

    # Replace old library paths
    for config in target.build_configurations
        update_paths(config, 'FRAMEWORK_SEARCH_PATHS')
        update_paths(config, 'HEADER_SEARCH_PATHS')
    end
end

# Modify main target
main_target = project.targets.first

# (Re)embed framework
embed_frameworks_build_phase = main_target.build_phases
    .select { |phase| phase.instance_of?(Xcodeproj::Project::Object::PBXCopyFilesBuildPhase) && phase.symbol_dst_subfolder_spec == :frameworks }[0]

if !embed_frameworks_build_phase
    embed_frameworks_build_phase = project.new(Xcodeproj::Project::Object::PBXCopyFilesBuildPhase)
    embed_frameworks_build_phase.name = 'Embedded Binaries'
    embed_frameworks_build_phase.symbol_dst_subfolder_spec = :frameworks
    main_target.build_phases << embed_frameworks_build_phase
end
remove_nil_files(embed_frameworks_build_phase)
remove_files_containing(embed_frameworks_build_phase, $ufs_npm_name)
framework_build_file = embed_frameworks_build_phase.add_file_reference(framework, avoid_duplicates: true)
framework_build_file.settings = { 'ATTRIBUTES' => ['CodeSignOnCopy'] }

# (Re)add run script phase to the start
main_target.shell_script_build_phases
    .select { |script_phase| script_phase.shell_script.include?($ufs_npm_name) }
    .each { |script_phase| script_phase.remove_from_project }
script_phase = main_target.new_shell_script_build_phase('[UFS] Run Script')
script_phase.shell_script = File.read(script_dir + '/xcodeScript.sh')
main_target.build_phases.pop()
main_target.build_phases.insert(0, script_phase)

# Modify AppDelegate if needed
app_delegate_file = "AppDelegate.m"
ufs_template_path = "#{script_dir}/#{app_delegate_file}"
implementation_path = Dir.glob("**/#{app_delegate_file}")[0]
if implementation_path != nil && File.read(implementation_path).include?('Facebook')
    # AppDelegate is using React Native's template,
    # replace with UFS template
    FileUtils.copy(ufs_template_path, implementation_path)
end

def removeTargetFolder(target, ios_dir)
    p '- removing target folder'
    path = ios_dir + '/' + target.to_s
    remove_path(path)
end

def remove_path(path)
    unless File.exist?(path)
        return
    end
    if File.directory?(path)
        Dir.foreach(path) do |file|
            if ((file.to_s != ".") and (file.to_s != ".."))
                remove_path("#{path}/#{file}")
            end
        end
        Dir.delete(path)
    else
        File.delete(path)
    end
end

def removeMissingFilesFromProject(project)
    p '- removing missing files'
    project.files.each do |object|
        if (object.is_a?(Xcodeproj::Project::Object::PBXFileReference))
            if (!object.real_path.exist?)
                object.remove_from_project
            end
        end
    end
end

def removeTargetGroup(target, project)
    p '- removing target group'
    project.groups.each do |group|
        if target.name == group.path
            group.clear()
            group.remove_from_project()
        end
    end
end

# Search targets expect ios
p 'Searching extra targets'
targetsForRemoving = Array.new
project.targets.each do |target|
    unless target.platform_name.to_s == "ios"
        targetsForRemoving.push(target)
    end
end

# Removing targets
p 'Removing extra targets:'
targetsForRemoving.each do |target|
    p '- ' + target.name
    removeTargetFolder(target, ios_dir)
    removeTargetGroup(target, project)
    target.remove_from_project()
end

# Changing deployment target in all build configurations
p 'Changing deployment target'
project.build_configurations.each do |config|
    config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = deployment_target
end

# Changing build architectures to 64 bit
p 'Changing build architectures'
for config in project.build_configurations
    config.build_settings['ARCHS'] = '$(ARCHS_STANDARD_64_BIT)'
end

# Change device orientation
p 'Changing device orientation'
infoPlistPath = ios_dir + '/' + project.targets.first.to_s + '/Info.plist'
infoPlist = Xcodeproj::Plist.read_from_path(infoPlistPath)
infoPlist['UISupportedInterfaceOrientations~ipad'] = ['UIInterfaceOrientationLandscapeLeft', 'UIInterfaceOrientationLandscapeRight']
infoPlist.delete('UISupportedInterfaceOrientations')
configName = 'UFSProjectConfig'
if infoPlist.has_key?(configName) == false
    infoPlist[configName] = {
        "entryModule" => {
            "authenticationURL" => "<authentication service URL>",
            "changePasswordURL" => "<change password service URL>",
            "getApplicationsURL" => "<get applications service URL>",
            "channelName" => "MOBILE",
            "platformVersion" => "7_0"
        },
        "devMode" => {
            "devModeEnabled" => false,
            "devBundleNameList" => [],
            "devWidgetBundleNameList" => []
        },
        "bundles" => {
            "example-jsbundle-name" => {
                "applicationOrder" => 1,
                "default" => true,
                "icon" => "sales",
                "path" => "<relative path to jsbundle's index.ios file>",
                "position" => "top"
            },
            "example-widget-name" => {
                "origin" => {
                    "x" => 0,
                    "y" => 0
                },
                "path" => "<relative path to jsbundle's index.ios file>",
                "size" => {
                    "height" => 132,
                    "width" => 232
                },
                "type" => "widget"
            }
        }
    }
end
Xcodeproj::Plist.write_to_path(infoPlist, infoPlistPath)

# Change device family for all targets
p 'Changing device family'
project.targets.each do |target|
    target.build_configurations.each do |config|
        config.build_settings['TARGETED_DEVICE_FAMILY'] = target_device
    end
end

# Change organization
p 'Changing organization'
project.root_object.attributes['ORGANIZATIONNAME'] = organization_name

# Removing Android files
p 'Removing Android files'
remove_path(root_dir + '/android')
remove_path(root_dir + '/index.android.js')
remove_path(root_dir + '/__tests__/index.android.js')

# Copy UFS splash screen to the project
# Params:
# - templates_path - Library template directory path
# - resource_dir - Project resource directory path
# - project - Project instance
# - group_name - Name of the group to which we will add SplashScreen.xib file
def copy_library_splash_screen(templates_path, resource_dir, project, group_name)
  splash_screen_template_path = templates_path + UFS_SPLASH_SCREEN_XIB_NAME
  spash_screen_copy_path = resource_dir + UFS_SPLASH_SCREEN_XIB_NAME
  unless File.exist?(spash_screen_copy_path)
    p 'Adding splash screen'
    FileUtils.copy(splash_screen_template_path, spash_screen_copy_path)
    splashScreenFile = project.main_group[group_name].new_file(spash_screen_copy_path)
    add_resource_file_to_target(splashScreenFile, group_name, project)
  end

  asset_name = 'Images.xcassets'
  image_set_path = templates_path + UFS_LOGO_IMAGE_SET_NAME
  system("cp -r #{image_set_path} #{resource_dir + asset_name}")
end

# Adds resource file to the specified target
# Params:
# - file - PBXFileReference of the file
# - targetName - name of target
# - project - Project instance
def add_resource_file_to_target(file, targetName, project)
    project.native_targets.each do |target|
        if target.name == targetName
            target.add_resources([file])
        end
    end
end

# Configure project launch screen
# Params:
# - plist_path - Info plist local path
# - launch_screen_xib_name - Launch screen XIB name
def configure_default_launch_screen(plist_path, launch_screen_xib_name)
  infoPlist = Xcodeproj::Plist.read_from_path(plist_path)
  infoPlist.delete('Launch screen interface file base name') # TODO: remove it in the next update iteration
  infoPlist['UILaunchStoryboardName'] = launch_screen_xib_name.split('.').first
  Xcodeproj::Plist.write_to_path(infoPlist, plist_path)
end

# Configure status bar
# Params:
# - plist_path - Info plist local path
# - style - UIStatusBarStyle value
def configure_status_bar(plist_path, style)
  infoPlist = Xcodeproj::Plist.read_from_path(plist_path)
  infoPlist.delete('Status bar style') # TODO: remove it in the next update iteration
  infoPlist['UIStatusBarStyle'] = style
  Xcodeproj::Plist.write_to_path(infoPlist, plist_path)
end

# Copy splash screen from UFSLibrary and set it as default
resource_dir = ios_dir + '/' + project.targets.first.to_s + '/'
copy_library_splash_screen(script_dir + '/', resource_dir, project, project_name)
configure_default_launch_screen(infoPlistPath, UFS_SPLASH_SCREEN_XIB_NAME)
configure_status_bar(infoPlistPath, 'UIStatusBarStyleLightContent')

# Commit
project.save()
