import { IPagePayload } from './../Common/UFSInterfaces';
import { Action } from 'redux-actions';
export interface IPopPayload {
    panelId: string;
}
export interface IPushPayload extends IPopPayload {
    id: number;
}
export interface IPopContentPayload extends IPopPayload {
}
export interface IPopAccessoryPayload extends IPopPayload {
}
export interface IPushContentPayload extends IPushPayload {
}
export interface IPushAccessoryPayload extends IPushPayload {
}
export interface IPopPayloadToPage extends IPopPayload {
    pageKey: string;
}
/**
 * Осуществляет переход на следующую страницу `ContentPanel`.
 *
 * Параметр `nextPageId` - это номер следующей страницы,
 * `panelId` - это идентификатор `SplitPanel`,
 * `pagePayload` - объект типа `IPagePayload`.
 */
export declare const pushContent: (t1: number, t2: string, t3: IPagePayload) => Action<IPushContentPayload>;
/**
 * Осуществляет переход на следующую страницу `AccessoryPanel`.
 *
 * Параметр `nextPageId` - это номер следующей страницы(индекс `Page` в списке `children` у `AccessoryPanel`),
 * `panelId` - это идентификатор `SplitPanel`, в которой находится `AccessoryPanel`,
 * `pagePayload` - объект типа `IPagePayload` (опциональный параметр).
 */
export declare const pushAccessory: (t1: number, t2: string, t3: IPagePayload) => Action<IPushAccessoryPayload>;
/**
 * Осуществляет переход на предыдущую страницу `ContentPanel`.
 *
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `ContentPanel`.
 */
export declare const popContent: (t1: string) => Action<IPopContentPayload>;
/**
 * Осуществляет переход на предыдущую страницу `AccessoryPanel`.
 *
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `AccessoryPanel`.
 */
export declare const popAccessory: (t1: string) => Action<IPopAccessoryPayload>;
/**
 * Осуществляет переход на первую страницу `ContenPanel`.
 *
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `ContentPanel`.
 */
export declare const popContentToTop: (t1: string) => Action<IPopContentPayload>;
/**
 * Осуществляет переход на первую страницу `AccessoryPanel`.
 *
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `AccessoryPanel`.
 */
export declare const popAccessoryToTop: (t1: string) => Action<IPopAccessoryPayload>;
/**
 * Осуществляет переход на конкретную страницу `ContentPanel` по ключу.
 *
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `ContentPanel`,
 * `pageKey` - ключ конкретной страницы в стеке страниц.
 */
export declare const popContentToPage: (t1: string, t2: string) => Action<IPopPayloadToPage>;
/**
 * Осуществляет переход на конкретную страницу `AccessoryPanel` по ключу.
 *
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `AccessoryPanel`,
 * `pageKey` - ключ конкретной страницы в стеке страниц.
 */
export declare const popAccessoryToPage: (t1: string, t2: string) => Action<IPopPayloadToPage>;
