/// <reference types="react" />
import { ReactNode } from 'react';
export interface CommonInputProps {
    /**
     * Текст подписи, отображаемой над полем ввода.
     */
    label?: string;
    /**
     * Делает недоступным поле ввода для редактирования.
     */
    disabled?: boolean;
}
export interface CommonOutputProps {
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `HintIcon`
     *
     * При размещении `HintIcon` по умолчанию применяется его автопозиционирование внутри компонента.
     * Для управления привязкой автопозиционирования необходимо использовать свойство `autoPositionIndex` компонента `HintIcon`. Доступные значения:
     * - `0` - привязка к Label (значение по умолчанию)
     * - `1` - привязка к тексту
     *
     */
    children?: ReactNode;
}
export interface TextInputProps {
    /**
     * Значение, отображаемое в поле ввода.
     *
     * Может быть использовано как для задания первоначального значения, так и для последующего контроля над содержимым.
     *
     * Если значение не задано или идентично пустой строке, то в поле ввода будет показан `placeholder`.
     */
    value?: string;
    /**
     * Текст-заглушка, отображается в поле ввода если свойство `value` не задано или идентично пустой строке.
     */
    placeholder?: string;
    /**
     * Вызывается при изменении значения в поле ввода.
     */
    onChange?: (value: string) => void;
}
export interface ErrorInputProps {
    /**
     * Изменяет внешний вид для привлечения внимания пользователя
     * (`title` и подчеркивание окрашиваются в желтый цвет).
     *
     * Параметр `hasError` имеет больший приоритет.
     */
    hasWarning?: boolean;
    /**
     * Сообщение, которое увидит пользователь, когда компонент находится в состоянии предупреждения.
     *
     * Состояние предупреждение - это состояние, в котором параметр `hasWarning` имеет значение `true`
     * и параметр `hasError` имеет значение `false`.
     */
    warningText?: string;
    /**
     * Изменяет внешний вид для привличения внимания пользователя
     * (`title` и подчеркивание окрашиваются в красный цвет).
     *
     * Параметр имеет приоритет над `hasWarning`.
     */
    hasError?: boolean;
    /**
     * Сообщение, которое увидит пользователь, когда компонент находится в состоянии ошибки.
     *
     * Состояние ошибки - это состояние, в котором параметр `hasError` имеет значение `true`.
     */
    errorText?: string;
}
export interface FocusInputProps {
    /**
     * Вызывается когда поле становится активным.
     */
    onFocus?: () => void;
    /**
     * Вызывается когда поле перестает быть активным.
     */
    onBlur?: () => void;
}
export interface KeyboardInputProps {
    /**
     * Тип кнопки `return` из словаря ReturnType, влияет на заголовок кнопки. Доступные значения и соответствующие заголовки:
     * - `Default` - return (значение по умолчанию);
     * - `Go` - Go;
     * - `Google` - Google;
     * - `Join` - Join;
     * - `Next` - Next;
     * - `Route` - Route;
     * - `Search` - Search;
     * - `Send` - Send;
     * - `Yahoo` - Yahoo;
     * - `Done` - Done;
     * - `EmergencyCall` - Emergency Call;
     * - `Continue` - Continue;
     */
    returnKeyType?: number;
    /**
     * Определяет будет ли клавиатура автоматически скрываться при нажатии
     * кнопки `return`.
     *
     * Если определен коллбек `onReturnKeyPressed`, то клавиатура автоматически скрываться не будет даже если свойство имеет значение `true`.
     */
    autoDismissKeyboard?: boolean;
    /**
     * Вызывается при нажатии на кнопку `return`.
     *
     * Если коллбек задан, то поведение `autoDismissKeyboard` будет переопределено.
     * Для последующего скрытия клавиатуры можно воспользоваться методом `dismissKeyboard`.
     */
    onReturnKeyPressed?: () => void;
}
export interface AutoFocusInputProps {
    /**
     * Определяет будет ли поле ввода при начальном отображении находится в фокусе.
     *
     * Значение параметра не оказывает продолжительного действия, в процессе работы компонент может потерять фокус.
     *
     * Использование свойства `autoFocus` допустимо только для одного элемента на странице.
     */
    autoFocus?: boolean;
}
export interface LengthInputProps {
    /**
     * Максимальное количество отображаемых символов в поле ввода, должно быть больше 0.
     */
    maxLength?: number;
}
