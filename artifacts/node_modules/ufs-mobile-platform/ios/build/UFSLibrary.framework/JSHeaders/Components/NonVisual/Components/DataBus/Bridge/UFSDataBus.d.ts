export declare const UFSDataBusMessageType: any;
/**
 * + `fromAppId` - уникальный идентификатор приложения, из которого было отправлено сообщение;
 * + `fromBundleName` - название бандла приложения, из которого было отправлено сообщение;
 * + `toAppId` - уникальный идентификатор приложения-адресата. Свойство может быть не определено, если сообщение было отправлено в режиме broadcast;
 * + `toBundleName` - название бандла приложения-адресата. Свойство может быть не определено, если сообщение было отправлено в режиме broadcast;
 * + `time` - дата отправки сообщения;
 * + `payload` - произвольная прикладная информация, которая была передана отправителем.
 */
export interface UFSDataBusMessage {
    fromAppId: string;
    fromBundleName: string;
    toAppId?: string;
    toBundleName?: string;
    time: Date;
    payload: any;
}
/**
 * + `appId` - уникальный идентификатор, который был присвоен приложению после успешной регистрации в `DataBus`;
 * + `bundleName` - название бандла, под которым приложение было зарегистрировано в `DataBus`.
 */
export interface DataBusRegisterResult {
    appId: string;
    bundleName: string;
}
/**
 * Компонент предоставляет набор методов, которые можно использовать для общения между javascript-приложениями, находящимися в разных бандлах.
 * @category Nonvisual
 */
export default class UFSDataBus {
    /**
     * Метод регистрирует компонент в `DataBus`.
     * Отправка и получение компонентом сообщений возможны только после вызова данного метода.
     *
     * **Входные параметры:**
     * - `callback` - функция, которая будет вызвана при получении компонентом сообщения.
     * В качестве параметра передаётся массив сообщений.
     * При получении online-сообщений массив содержит только один элемент.
     * При получении offline-сообщений массив содержит всю накопившуюся очередь.
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve(result: DataBusRegisterResult)` - в случае успеха возвращаются `bundleName` и `appId` зарегистированного компонента
     *   - `rejected(error: UFSError)` - не удалось зарегистрировать компонент. На текущий момент регистрация компонента не может завершиться неудачно.
     * @static
     */
    static register(callback: (messages: [UFSDataBusMessage]) => void): Promise<DataBusRegisterResult>;
    /**
     * Метод отправляет сообщение заданным javascript-приложениям.
     * Чтобы отправить сообщение незарегистрированному приложению, необходимо передать значение `OFFLINE` в параметр `messageType`.
     * При отправке сообщений незарегистрированному приложению,
     * сообщения помещаются в очередь по `bundleName`. Очередь хранится в оперативной памяти (при перезагрузке iOS-приложения она будет очищена).
     *
     * Когда будет вызван метод `register` для приложения с таким `bundleName`,
     * все сообщения, помещённые в очередь для данного бандла будут ему отправлены.
     *
     * Для отправки массового сообщения всем зарегистрированным компонентам параметры `toBundleName` и `toAppId` следует опустить (передать в них `undefined`).
     *
     * #### Обратите внимание
     * + Очередь накопленных offline-сообщений будет отправлена первому приложению с целевым `bundleName`,
     * которое будет зарегистрировано в `DataBus`, а затем очередь будет очищена.
     * Таким образом, если в DataBus зарегистрируется ещё одно приложение с аналогичным bundleName, ему ничего не будет отправлено.
     * + Broadcast-сообщения доставляются только тем приложениям, которые на момент отправки находятся онлайн.
     *
     * <br>
     * **Входные параметры:**
     * - `payload` - произвольная прикладная информация;
     * - `toBundleName` - название бандла адресата;
     * - `toAppId` - уникальный `appId` адресата. Для успешной отправки с использованием этого параметра должен быть заполнен вместе с именем бандла;
     * - `messageType` - тип сообщения из справочника `DataBusMessageType`. Доступные значения:
     *   - `ONLINE` - отправка сообщений зарегистрированным приложениям;
     *   - `OFFLINE` - отправка сообщений незарегистрированным приложениям.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - успешная отправка сообщения
     *   - `rejected(error: UFSError)` - сообщение не удалось отправить. Возможные коды ошибок:
     *     - `UFSDataBusServiceErrorCodeBundleNameIsNotSpecified`
     *     - `UFSDataBusServiceErrorCodePayloadExceedsLimit`
     *     - `UFSDataBusServiceErrorCodeComponentNotRegistered`
     *     - `UFSDataBusServiceErrorCodeBroadcastMessageUnavailable`
     *     - `UFSDataBusServiceErrorCodeHasNoMessageReciever`
     * @static
     */
    static sendMessage(payload: any, toBundleName?: string, toAppId?: string, messageType?: number): Promise<void>;
    /**
     * @private
     * @static
     */
    private static subscribeOnRecieveMessage(callback);
}
