import { NativeModules, NativeEventEmitter } from 'react-native';
import { makeUFSErrorFromReactError } from '../../../../JSCore';
const ECMService = NativeModules.UFSECMServiceBridge;
const ECMServiceEventEmitter = new NativeEventEmitter(ECMService);
const ECMServiceEvents = ECMService.ECMServiceEvents;
/**
 * Возможные шаги процесса загрузки файла из ECM.
 * + `FileTransfer` - файл перекладывается из сети Alpha в Sigma.
 * + `FileDownload` - файл загружается непосредственно на целевое устройство.
 */
export var ECMStep;
(function (ECMStep) {
    ECMStep[ECMStep["FileTransfer"] = 0] = "FileTransfer";
    ECMStep[ECMStep["FileDownload"] = 1] = "FileDownload";
})(ECMStep || (ECMStep = {}));
/**
 * Компонент упрощает выполнение типовой интеграции с ECM за счёт предоставления упрощённого API.
 *
 * Компонент работает по сконфигурированным параметрам.
 *
 * Выстраивание правильной инфраструктуры для взаимодействия мобильного устройства с ECM через Sigma/DP/Alpha/КСШ не входит в задачу данного компонента.
 *
 * Компонент работает с абстрактным заданным back-end.
 *
 * С деталями интеграции с ECM можно ознакоситься в [документе "Сервис файлового обмена в ЕСМ"](https://sbtatlas.sigma.sbrf.ru/wiki/pages/viewpage.action?pageId=84730204#id-ПлатформаЕФС-Мобильнаяплатформа).
 * @category Nonvisual
 */
export default class UFSECMService {
    /**
     * Метод не реализован. На текущий момент он ничего не делает и всегда возвращает `success`.
     * @private
     * @static
     */
    static send(fileId, info) {
        return new Promise((resolve, reject) => {
            ECMService.send(fileId, info)
                .then(() => {
                resolve();
            })
                .catch((error) => {
                reject(makeUFSErrorFromReactError(error));
            });
        });
    }
    /**
     * Метод позволяет скачивать файлы с ECM-сервиса на устройство.
     *
     * **Входные параметры:**
     * - `info` - объект с информацией о запрашиваемом файле;
     * - `progress` - колбек вызывается с некоторой периодичностью во время процесса загрузки файла. В качестве параметра передаётся прогресс загрузки.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - Если `shouldReturnObject == false`:
     *     - `resolve(fileID: string)` - операция завершена успешно: файл загружен на устройство и ему присвоен `fileID`, возвращённый в блок `resolve`.
     *     - `rejected(error: UFSError)` - операция завершилась неудачно.
     *   - Если `shouldReturnObject == true`:
     *     - `resolve(fileInfo: FileInfo)` - операция завершена успешно: файл загружен на устройство и ему присвоен `fileID`, возвращается объект типа `FileInfo`.
     *     - `rejected(error: UFSError)` - операция завершилась неудачно.
     * Если имя файла доступно на момент возникновения ошибки, то в объекте ошибки будет присутствовать поле `fileName` с именем файла ECM. Возможные коды ошибок:
     *       - `UFSECMServiceErrorCodeUndefinedDownloadURL`
     *       - `UFSECMServiceErrorCodeUndefinedStatusURL`
     *       - `UFSECMServiceErrorCodeUndefinedFileURL`
     *       - Вложенный `NSError`
     * @static
     */
    static get(info, progress) {
        let subscription = UFSECMService.subscribeOnReceiveProgressMessage(progress);
        return new Promise((resolve, reject) => {
            ECMService.get(info)
                .then((fileInfo) => {
                this.unsubscribe(subscription);
                resolve(fileInfo);
            })
                .catch((error) => {
                this.unsubscribe(subscription);
                reject(makeUFSErrorFromReactError(error));
            });
        });
    }
    /**
     * Метод позволяет задать базовые настройки для работы с ECM-сервисом.
     * Время жизни заданных настроек ограничено временем жизни приложения,
     * т.е при каждом новом запуске приложения данные настройки необходимо задавать заново.
     *
     * **Входные параметры:**
     * - `config` - объект конфигурации.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - операция завершена успешно, компонент по работе с ECM сконфигурирован.
     *   - `rejected(error: UFSError)` - операция завершилась неудачно. На текущий момент операция не может завершиться неудачно.
     * @static
     */
    static configure(config) {
        return new Promise((resolve, reject) => {
            ECMService.configure(config)
                .then(() => {
                resolve();
            })
                .catch((error) => {
                reject(makeUFSErrorFromReactError(error));
            });
        });
    }
    static unsubscribe(subscription) {
        subscription.remove();
    }
    static subscribeOnReceiveProgressMessage(progress) {
        let mappedCallback = (nativeResponse) => {
            if (progress) {
                let step;
                if (nativeResponse.step === "DOWNLOAD") {
                    step = ECMStep.FileDownload;
                }
                else {
                    step = ECMStep.FileTransfer;
                }
                let mappedResponse = Object.assign({}, nativeResponse, { step });
                progress(mappedResponse);
            }
        };
        return ECMServiceEventEmitter.addListener(ECMServiceEvents.didReceiveProgressMessage, mappedCallback, undefined);
    }
}
//# sourceMappingURL=UFSECMService.js.map