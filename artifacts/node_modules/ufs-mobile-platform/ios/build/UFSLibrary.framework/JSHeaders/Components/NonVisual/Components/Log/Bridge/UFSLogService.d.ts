import { UFSError } from '../../../../JSCore';
export declare const UFSLogLevel: any;
export declare type LogSendErrorCallback = (error: UFSError) => void;
export declare type LogSendSuccessCallback = () => void;
export declare type LogSendProgressCallback = (bytesSended: number, totalBytes: number, fileSended: number, totalFiles: number) => void;
/**
 *  + `externalUZSUDIR` - Имя внешней УЗ СУДИР. **Обязательный** ключ перед началом использования функции `log`.
 *  + `logStoreURL` - URL ресурса для закачки файлов лога в Sigma. По умолчанию не задан.
 *  + `logFileTTL` - время жизни файлов лога на мобильном устройстве в часах. По умолчанию 1 неделя.
 *  + `logFileMaxSize` - максимальный размер файла с логами в байтах. По умолчанию 1 Мб.
 *  + `logUploadTimeout` - таймаут операции выгрузки логов в миллисекундах. По умолчанию 120000 мс.
 */
export interface LogConfig {
    externalUZSUDIR: string;
    logStoreURL: string;
    logFileTTL?: number;
    logFileMaxSize?: number;
    logUploadTimeout?: number;
}
/**
 * Компонент предоставляет набор методов по управлению файлами с логами.
 *
 * Компонент является синглтоном для всех js-бандлов.
 *
 * Общий жизненный цикл по работе с сервисом логирования выглядит следующим образом:
 * 1. Запуск ММВ
 * 2. Отправка запроса в СУП для получения параметров из background-бандла с помощью MRM.onLoad
 * 3. Конфигурирования сервиса из background-бандла с помощью параметров, полученных из СУП - Log.configure
 * 4. Логирование событий с помощью функции log
 * 5. Отправка логов в Sigma - Log.send
 * 6. Удаление логов по истечению времени - Log.clean
 * @category Nonvisual
 */
export default class UFSLogService {
    /**
     * Метод задает базовые настройки для работы с сервисом логирования.
     * Время жизни заданных настроек ограничено временем жизни приложения, т.е при каждом новом запуске приложения данные настройки необходимо задавать заново.
     *
     * **Входные параметры:**
     * - `config` - объект конфигурации
     *
     * **Возвращаемые значения:**
     * отсутствуют.
     * @static
     */
    static configure(config: LogConfig): void;
    /**
     * Метод отправляет все существующие файлы с логами.
     *
     * **Входные параметры:**
     * - `onError` - коллбек, который вызывается в случае возникновении ошибки. Возможные коды ошибок:
     *   - `UFSLogServiceErrorCodeEmptyStoreUrl` - при незаданном `storeURL`;
     *   - Вложенный `NSError`.
     * - `onSuccess` - коллбек, который вызывается после успешного отправления файлов с логами
     * - `onProgress` - на данный момент этот коллбек не реализован и никогда не вызывается
     *
     * **Возвращаемые значения:**
     * отсутствуют
     * @static
     */
    static send(onError: LogSendErrorCallback, onSuccess: LogSendSuccessCallback, onProgress: LogSendProgressCallback): any;
    /**
     * Метод удаляет файлы с логами, созданными в указанном интервале времени.
     *
     * **Входные параметры:**
     * - `endDate` - дата, определяющая конец интервала времени включительно. Задается в формате `yyyy-mm-dd`.
     *   - **Пример:** сегодня 22 марта 2018 года. Если задать `endDate` равным `2018-03-20`, то логи не будут удалены и будет выброшена ошибка. Если задать `endDate` равным `2018-03-19`, то будут удалены все логи до 19 марта включительно.
     * - `beginDate` - дата, определяющая начало интервала времени включительно. Задается в формате `yyyy-mm-dd`.
     * В случае отсутствия параметра будут удалены все файлы логов, созданные до даты `endDate`.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - операция завершена успешно, файлы с логами, созданные в указанном интервале, удалены
     *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
     *     - `UFSLogServiceErrorCodeEarlyRemovingLogFiles` - при попытке удалить логи, у которых `endDate` меньше 3-х дней до текущей даты;
     *     - `UFSLogServiceErrorCodeBeginLargerThatEndDate` - в случаях, когда `beginDate` старше `endDate`;
     *     - `UFSLogServiceErrorCodeEndDateAbsence` - при незаданном `endDate`;
     *     - `UFSLogServiceErrorCodeBeginEndDateAbsence` - при незаданных `beginDate` и `endDate`;
     *     - Вложенный `NSError`.
     * @static
     */
    static clean(endDate: String, beginDate?: String): Promise<void>;
}
/**
 * Метод записывает события в файл лога.
 * ##### Обратите внимание
 * При отсутствии заданного параметра имени внешней УЗ СУДИР запись в файл логов не просходит.
 *
 * **Входные параметры:**
 * - `message` - целевое сообщение для записи в файл лога
 * - `logLevel` - уровень логирования из словаря LogLevel. Доступные значения:
 *   - `emerg`
 *   - `alert`
 *   - `crit`
 *   - `err`
 *   - `warning`
 *   - `notice`
 *   - `info`
 *   - `debug` - значение по умолчанию.
 *
 * **Возвращаемые значения:**
 * отсутствуют
 * @category Nonvisual/Log
 */
export declare function log(message: string, logLevel?: number): void;
