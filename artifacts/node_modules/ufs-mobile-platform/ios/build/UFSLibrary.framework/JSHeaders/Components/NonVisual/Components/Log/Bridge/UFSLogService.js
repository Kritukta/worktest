import { NativeModules } from 'react-native';
import { makeUFSErrorFromReactError } from '../../../../JSCore';
const LogService = NativeModules.UFSLogServiceBridge;
export const UFSLogLevel = LogService.LogLevels;
/**
 * Компонент предоставляет набор методов по управлению файлами с логами.
 *
 * Компонент является синглтоном для всех js-бандлов.
 *
 * Общий жизненный цикл по работе с сервисом логирования выглядит следующим образом:
 * 1. Запуск ММВ
 * 2. Отправка запроса в СУП для получения параметров из background-бандла с помощью MRM.onLoad
 * 3. Конфигурирования сервиса из background-бандла с помощью параметров, полученных из СУП - Log.configure
 * 4. Логирование событий с помощью функции log
 * 5. Отправка логов в Sigma - Log.send
 * 6. Удаление логов по истечению времени - Log.clean
 * @category Nonvisual
 */
export default class UFSLogService {
    /**
     * Метод задает базовые настройки для работы с сервисом логирования.
     * Время жизни заданных настроек ограничено временем жизни приложения, т.е при каждом новом запуске приложения данные настройки необходимо задавать заново.
     *
     * **Входные параметры:**
     * - `config` - объект конфигурации
     *
     * **Возвращаемые значения:**
     * отсутствуют.
     * @static
     */
    static configure(config) {
        LogService.configure(config);
    }
    /**
     * Метод отправляет все существующие файлы с логами.
     *
     * **Входные параметры:**
     * - `onError` - коллбек, который вызывается в случае возникновении ошибки. Возможные коды ошибок:
     *   - `UFSLogServiceErrorCodeEmptyStoreUrl` - при незаданном `storeURL`;
     *   - Вложенный `NSError`.
     * - `onSuccess` - коллбек, который вызывается после успешного отправления файлов с логами
     * - `onProgress` - на данный момент этот коллбек не реализован и никогда не вызывается
     *
     * **Возвращаемые значения:**
     * отсутствуют
     * @static
     */
    static send(onError, onSuccess, onProgress) {
        return LogService.send((bytesSended, totalBytes, fileSended, totalFiles) => {
            // TODO: Sherstobitov I.G. 30.01.17 UFSMP-569 - Unable to transfer 3 callbacks
            // Issue Reactnative
            // Emulation call onSuccess
            if (onProgress) {
                onProgress(bytesSended, totalBytes, fileSended, totalFiles);
            }
            if ((bytesSended === totalBytes) && (fileSended === totalFiles) && onSuccess) {
                onSuccess();
            }
        }, (error) => {
            if (onError) {
                onError(makeUFSErrorFromReactError(error));
            }
        });
    }
    /**
     * Метод удаляет файлы с логами, созданными в указанном интервале времени.
     *
     * **Входные параметры:**
     * - `endDate` - дата, определяющая конец интервала времени включительно. Задается в формате `yyyy-mm-dd`.
     *   - **Пример:** сегодня 22 марта 2018 года. Если задать `endDate` равным `2018-03-20`, то логи не будут удалены и будет выброшена ошибка. Если задать `endDate` равным `2018-03-19`, то будут удалены все логи до 19 марта включительно.
     * - `beginDate` - дата, определяющая начало интервала времени включительно. Задается в формате `yyyy-mm-dd`.
     * В случае отсутствия параметра будут удалены все файлы логов, созданные до даты `endDate`.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - операция завершена успешно, файлы с логами, созданные в указанном интервале, удалены
     *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
     *     - `UFSLogServiceErrorCodeEarlyRemovingLogFiles` - при попытке удалить логи, у которых `endDate` меньше 3-х дней до текущей даты;
     *     - `UFSLogServiceErrorCodeBeginLargerThatEndDate` - в случаях, когда `beginDate` старше `endDate`;
     *     - `UFSLogServiceErrorCodeEndDateAbsence` - при незаданном `endDate`;
     *     - `UFSLogServiceErrorCodeBeginEndDateAbsence` - при незаданных `beginDate` и `endDate`;
     *     - Вложенный `NSError`.
     * @static
     */
    static clean(endDate, beginDate) {
        return new Promise((resolve, reject) => {
            LogService.cleanFromDate(beginDate || null, endDate)
                .then(() => {
                resolve();
            })
                .catch((error) => {
                reject(makeUFSErrorFromReactError(error));
            });
        });
    }
}
/**
 * Метод записывает события в файл лога.
 * ##### Обратите внимание
 * При отсутствии заданного параметра имени внешней УЗ СУДИР запись в файл логов не просходит.
 *
 * **Входные параметры:**
 * - `message` - целевое сообщение для записи в файл лога
 * - `logLevel` - уровень логирования из словаря LogLevel. Доступные значения:
 *   - `emerg`
 *   - `alert`
 *   - `crit`
 *   - `err`
 *   - `warning`
 *   - `notice`
 *   - `info`
 *   - `debug` - значение по умолчанию.
 *
 * **Возвращаемые значения:**
 * отсутствуют
 * @category Nonvisual/Log
 */
export function log(message, logLevel) {
    LogService.log(message, logLevel || UFSLogLevel.debug);
}
//# sourceMappingURL=UFSLogService.js.map