import { UFSError } from '../../../../JSCore/';
/**
 * Компонент предоставляет набор методов для работы с Мобильным Модулем Входа (ММВ) и Контейнером МРМ.
 *
 * #### Обратите внимание
 * Хотя технически это и не запрещено, крайне не рекомендуется использовать `MRM.onLoad`,
 * `MRM.onEntrance` и `MRM.onFinish` вне фонового бандла.
 * Использование этих методов в бандлах внутри корневого приложения или компонента `AppLoader` не приведёт к падению приложения,
 * но вызовет неопределённое поведение.
 * @category Nonvisual
 */
export default class UFSMRM {
    /**
     * Метод позволяет получить контроль над переключением корневых приложений (т.е. бандлов) МРМ с помощью подписывания/отписывания на событие `onSwitch`.
     * По умолчанию переключение корневых приложений происходит автоматически, но если существует подписка на событие `onSwitch`,
     * то вместо перехода будет вызываться `callback` с названием бандла на который мы переходим.
     * Событие срабатывает только при нажатии на кнопку в боковом меню, `callback` приходит в тот бандл, с которого мы уходим.
     *
     * См. пример:
     * ```
     * export default class Sample extends Component<{}, {}> {
     *     componentDidMount() {
     *         MRM.onSwitch((bundleName) => {
     *             if (this.canBeSwitched()) {
     *                 MRM.switchRootApp(bundleName)
     *                     .catch((error) => {
     *                         alert(error);
     *                     });
     *             }
     *         });
     *     }
     * }
     * ```
     *
     * **Входные параметры:**
     * - `callback` - функция, которая будет вызвана, когда пользователь попытается переключить вкладку МРМ.
     * В качестве параметра передаётся название бандла, на который должен был быть совершён переход.
     * В случае перехода на СЭ (Стартовый экран МРМ) будет передана строка `mrm_starting_screen`.
     * Параметр является опциональным: если коллбек не передан, то происходит отписка от события `onSwitch` и дальнейшие переходы будут совершаться автоматически.
     * Повторная подписка c параметром поменяет коллбек для того же бандла.
     *
     * **Возвращаемые значения:**
     * отсутствуют
     * @static
     */
    static onSwitch(callback?: (bundleName: string) => void): void;
    /**
     * Метод позволяет подписаться на событие начала работы МРМ.
     * Возможен только один активный подписчик: при повторном вызове метода предыдущий подписчик будет автоматически отписан от события.
     *
     * Метод должен вызываться из корневого уровня в ts/js файле (необязательно в файле,
     * где происходит регистрация бандла: вызывать также можно и из импортируемых файлов).
     * При вызове метода изнутри `React.Component` при первом запуске подписка на событие `onEntrance` будет работать некорректно,
     * т.к событие `onEntrance` произойдёт раньше, чем будет создан `React.Component`.
     * См. пример:
     * ```
     * import React, { Component } from 'react';
     * import {
     *     AppRegistry,
     *     MRM
     * } from 'ufs-mobile-platform';
     * // You can call onEntrance inside BackgroundBundle aswell.
     * import BackgroundBundle from './BackgroundBundle';
     *
     * export default class App extends Component<{}, {}> {
     *     componentDidMount() {
     *         // It's not an example for a production code (and it works only in dev mode).
     *         // It's here only for our convenience.
     *         MRM.switchRootApp('component-list');
     *
     *         // Do not call onEntrance here because it doesnt work for initial launch.
     *         // MRM.onEntrance(() => {
     *         //     console.log('onEntrance');
     *         // });
     *     }
     *     render() {
     *         return (
     *             <BackgroundBundle />
     *         );
     *     }
     * }
     *
     * // Here is okay to call onEntrance. It works fine.
     * MRM.onEntrance(() => {
     *     console.log('onEntrance');
     * });
     *
     * MRM.onLoad(() => {
     *     console.log('onLoad');
     * })
     *
     * MRM.onFinish(() => {
     *     console.log('onFinish');
     * });
     *
     * AppRegistry.registerComponent('background-bundle-demo', () => App);
     * ```
     *
     * **Входные параметры:**
     * - `callback` - вызывается сразу после начала работы МРМ (при появлении формы аутентификации),
     * т.е при первом входе и при каждом вызове метода `startAuth` при выключенном `devMode`.
     * Параметр является опциональным: если callback не передан, то происходит отписка от этого события.
     *
     * **Возвращаемые значения:**
     * отсутствуют
     * @static
     */
    static onEntrance(callback?: () => void): void;
    /**
     * Метод позволяет подписаться на событие завершения загрузки данных ММВ.
     * Возможен только один активный подписчик: при повторном вызове метода предыдущий подписчик будет автоматически отписан от события.
     * Если существует подписчик на это событие, то ММВ после загрузки своих данных не завершит работу.
     * Чтобы завершить его работу нужно воспользоваться методом `finishLoading`.
     *
     * **Входные параметры:**
     * - `callback` - вызывается сразу после успешного завершения процесса загрузки данных ММВ.
     * Параметр является опциональным: если коллбек не передан, то происходит отписка от этого события.
     *
     * **Возвращаемые значения:**
     * отсутствуют
     * @static
     */
    static onLoad(callback?: () => void): void;
    /**
     * Метод позволяет подписаться на событие завершения работы ММВ.
     * Возможен только один активный подписчик: при повторном вызове метода предыдущий подписчик будет автоматически отписан от события.
     *
     * **Входные параметры:**
     * - `callback` - вызывается сразу после завершения работы ММВ.
     * Параметр является опциональным: если коллбек не передан, то происходит отписка от этого события.
     *
     * **Возвращаемые значения:**
     * отсутствуют
     * @static
     */
    static onFinish(callback?: () => void): void;
    /**
     * Метод завершает работу ММВ. Завершение работы ММВ происходит только если он находится в доступном для завершения состоянии:
     * 1. существует подписчик на событие `onLoad`;
     * 2. произошло событие `onLoad`.
     *
     * Во всех остальных случаях метод возвращает ошибку.
     *
     * **Входные параметры:**
     * - `error` - Ошибка прикладного кода, инициировавшего вызов метода.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` -  операция завершения работы ММВ завершилась успешно
     *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
     *     - `UFSMRMServiceErrorCodesFailedToFinishEntryModuleLoading`
     * @static
     */
    static finishLoading(error?: UFSError): Promise<void>;
    /**
     * Метод позволяет переключать бандлы корневых приложений.
     * Переключение происходит всегда и мгновенно, вне зависимости от существования подписки на событие `onSwitch`.
     * В случае несуществующего названия бандла вернется ошибка с кодом `UFSStartComponentErrorCodeUnknownBundleName`.
     *
     * **Входные параметры:**
     * - `bundleName` - название бандла, на который необходимо осуществить переход;
     * - `payload` - произвольные начальные значения, которые будут переданы в загружаемый бандл.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - операция переключения бандла завершилась успешно
     *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
     *     - `UFSStartComponentErrorCodeUnknownBundleName`
     * @static
     */
    static switchRootApp(bundleName: string, payload?: Object): Promise<void>;
    /**
     * Метод позволяет загрузить бандл приложения и отобразить его контент во весь экран поверх контейнера МРМ (боковой тулбар при этом не будет виден).
     * Исполняемые в данный момент бандлы не прекращают работу.
     * Возвращает ошибку при попытке вызвать метод `showModalApp` с уже открытом модальным бандлом.
     *
     * **Входные параметры:**
     * - `bundleName` - название бандла, на который необходимо осуществить переход;
     * - `payload` - параметр является опциональным, позволяет передать в загружаемый бандл необходимые начальные значения.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - операция загрузки бандла завершилась успешно
     *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
     *     - `UFSStartComponentErrorCodeFullScreenBundleDublicate`
     * @static
     */
    static showModalApp(bundleName: string, payload?: Object): Promise<void>;
    /**
     * Прекращает работу текущего модального бандла.
     * Возвращает ошибку при попытке вызова без работающего в это время модального бандла.
     *
     * **Входные параметры:**
     * отсутствуют
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - операция прекращения работы бандла завершилась успешно
     *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
     *     - `UFSStartComponentErrorCodeFullScreenBundleAbsent`
     * @static
     */
    static dismissModalApp(): Promise<void>;
    /**
     * Метод открывает компонент ММВ и начинает сценарий аутентификации.
     * Если в `config.plist` включен режим отладки (`debugEnabled == YES`), будет возвращена ошибка.
     * При попытке вызвать метод при уже открытом ММВ будет возвращена ошибка.
     *
     * **Входные параметры:**
     * - `reloadBundle` - опциональный параметр. По умолчанию имеет значение `true`.
     * Передача значения `false` в качестве параметра отключает перезагрузку бандлов при повторной аутентификации. Однако, если при повторной аутентификации введён логин отличный от логина последнего рабочего сеанса, то бандлы перезагрузятся независимо от значения параметра `reloadBundle`.
     * Отсутствие параметра или передача `true` в качестве параметра приведет к перезагрузке бандлов при повторной аутентификации.
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - экран аутентификации успешно открылся
     *   - `rejected(error: UFSError)` - экран аутентификации не был открыт. Возможные коды ошибок:
     *     - `UFSStartComponentErrorCodeCannotOpenEntryModuleWhenDebugIsEnabled`
     *     - `UFSStartComponentErrorCodeEntryModuleIsAlreadyOpened`
     * @static
     */
    static startAuth(reloadBundle?: boolean): Promise<void>;
    /**
     * Метод открывает компонент ММВ и начинает сценарий смены пароля.
     * Если в `config.plist` включен режим отладки (`debugEnabled == YES`), будет возвращена ошибка.
     * При попытке вызвать метод при уже открытом ММВ будет возвращена ошибка.
     *
     * **Входные параметры:**
     * отсутствуют
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` -  экран смены пароля успешно открылся
     *   - `rejected(error: UFSError)` - экран смены пароля не был открыт. Возможные коды ошибок:
     *     - `UFSStartComponentErrorCodeCannotOpenEntryModuleWhenDebugIsEnabled`
     *     - `UFSStartComponentErrorCodeEntryModuleIsAlreadyOpened`
     * @static
     */
    static startChangePassword(): Promise<void>;
    /**
    * Метод делает запрос для получения сохранённых прав пользователя, которые относятся к списку загруженных приложений.
    *
    * **Входные параметры:**
    * отсутствуют
    *
    * **Возвращаемые значения:**
    * - Promise - JS-объект типа Promise с состояниями:
    *   - `resolve(result: string[])` - успешно получен список прав пользователя для набора приложений.
    *   - `rejected(error: UFSError)` - считывание списка прав завершилось ошибкой.
    * @static
    */
    static getPermissions(): Promise<string[]>;
}
