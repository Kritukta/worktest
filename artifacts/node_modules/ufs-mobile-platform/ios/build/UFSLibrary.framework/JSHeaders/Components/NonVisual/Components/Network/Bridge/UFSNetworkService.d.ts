/**
 * + `protocol` - протокол передачи;
 * + `domain` - домен;
 * + `port` - порт;
 * + `baseUrl` - базовая часть URL-адреса.
 */
export interface UrlInfo {
    protocol?: string;
    domain?: string;
    port?: string;
    baseUrl?: string;
}
/**
 * Интерфейс HTTP-заголовков.
 */
export interface NetworkHeaders {
    [key: string]: string;
}
/**
 * + `timeout` - Время сетевого таймаута в секундах. Значение по умолчанию равно `60`;
 * + `headers` - Заголовки HTTP-запроса;
 * + `retryCount` - число последовательных повторных запросов для ответов со следующими кодами: `408`, `409`, `500`, `502`, `504`. Значение по умолчанию равно `0`.
 * При исчерпании количества попыток последовательных повторных запросов на прикладной js-уровень будет возвращена ошибка с кодом `503`;
 * + `retryInterval` - временной интервал (в секундах) между началом предыдушего и началом следующего запроса. Значение по умолчанию равно `1`.
 */
export interface NetworkConfig {
    timeout?: number;
    headers?: NetworkHeaders;
    retryCount?: number;
    retryInterval?: number;
}
/**
 * Компонент предоставляет доступ к информации о сетевых настройках.
 *
 * Также компонент предоставляет методы для сетевого взаимодействия, которые конфигурируются объектом, реализующим `NetworkConfig`.
 * Эти методы экспортируются отдельно и описаны в соответствующих разделах.
 * @category Nonvisual/Network
 */
export default class UFSNetworkService {
    /**
     * Метод предоставляет доступ к информации о сетевых настройках.
     * ##### Обратите внимание
     * Для доступа к параметрам они должны быть предварительно прописаны в настройках приложения - в файле `Info.plist`.
     * Значения настроек располагаются по следующему пути: `UFSProjectConfig.baseURL`.
     *
     * #### Предусмотренные поля для UFSProjectConfig.baseURL
     *
     * `Protocol` (тип `String`) - протокол соединения;
     *
     * `Domain` (тип `String`) - домен ресурса;
     *
     * `Port` (тип `String`) - порт соединения.
     *
     * ![Пример 1](http://sbt-orefs-063.sigma.sbrf.ru/ufsmp/static/documentation/network_settings.png "Пример 1")
     *
     * #### Доступ к параметрам из приложения "Настройки"
     * Операционная система `iOS` позволяет просматривать отдельные настройки приложений из приложения "Настройки".
     * Для этого необходимо в `Settings.bundle` (создается из шаблонов `Xcode`) в файл `Root.plist`
     * добавить секции описания полей, соответствующие полям в секции `UFSProjectConfig.baseURL` файла `Info.plist` вашего приложения.
     * Значениями поля `Identifier` для свойств `protocol`, `domain`, `port` являются `baseURLProtocol`, `baseURLDomain`, `baseURLPort` соответственно.
     *
     * Подробнее про `Settings.bundle` можно прочитать
     * [тут](https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/UserDefaults/Preferences/Preferences.html).
     *
     * ![Пример 2](http://sbt-orefs-063.sigma.sbrf.ru/ufsmp/static/documentation/settings_props.png "Пример 2")
     *
     * **Входные параметры:**
     * - `callback` - функция, которая вызывается по результатам работы метода.
     * В качестве параметра в эту функцию передаётся объект типа `UrlInfo`, который содержит в себе информацию о сетевых настройках.
     *
     * **Возвращаемые значения:**
     * отсутствуют
     * @static
     */
    static urlInfo(callback: (urlInfo?: UrlInfo) => void): any;
}
/**
 * Метод позволяет загружать файлы на устройство.
 * По умолчанию все файлы скачиваются во
 * [временную директорию](https://developer.apple.com/reference/foundation/nssearchpathdirectory/nscachesdirectory)
 * контейнера приложения, которая отведена операционной системой.
 *
 * ##### Обратите внимание
 * `NSCachesDirectory` может быть очищена операционной системой.
 * Данная директория не предназначена для постоянного хранения файлов на жёстком диске.
 *
 * **Входные параметры:**
 * - `url` - ссылка на файл;
 * - `config` - конфигурация сетевого запроса.
 *
 * **Возвращаемые значения:**
 * - Promise - JS-объект типа Promise с состояниями:
 *   - `resolve(fileId: string)` - операция завершена успешно, файл загружен на устройство и ему присовен fileID, возвращенный в блок resolve.
 *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
 *     - Вложенный `NSError`
 * @category Nonvisual/Network
 */
export declare function download(url: string, config?: NetworkConfig): Promise<string>;
/**
 * Метод позволяет загружать файлы на удалённый сервер.
 *
 * **Входные параметры:**
 * - `url` - ссылка на файл;
 * - `fileID` - идентификатор файла;
 * - `config` - конфигурация сетевого запроса.
 *
 * **Возвращаемые значения:**
 * - Promise - JS-объект типа Promise с состояниями:
 *   - `resolve()` - операция завершена успешно, файл загружен на удалённый сервер.
 *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
 *     - Вложенный `NSError`
 * @category Nonvisual/Network
 */
export declare function upload(url: string, fileID: string, config?: NetworkConfig): Promise<void>;
/**
 * Метод отправляет GET-запрос на удалённый сервер.
 *
 * **Входные параметры:**
 * - `url` - адрес сервера;
 * - `config` - конфигурация сетевого запроса.
 *
 * **Возвращаемые значения:**
 * - Promise - JS-объект типа Promise с состояниями:
 *   - `resolve(data: Object)` - операция завершена успешно. В блок `resolve` передаются данные, полученные от сервера.
 *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
 *     - Вложенный `NSError`
 * @category Nonvisual/Network
 */
export declare function get(url: string, config?: NetworkConfig): Promise<Object>;
/**
 * Метод отправляет POST-запрос на удалённый сервер.
 * Объект, содержащий тело POST-запроса, перед отправкой, сериализуется в JSON-структуру.
 *
 * **Входные параметры:**
 * - `url` - адрес сервера;
 * - `data` - тело запроса;
 * - `config` - конфигурация сетевого запроса.
 *
 * **Возвращаемые значения:**
 * - Promise - JS-объект типа Promise с состояниями:
 *   - `resolve(data: Object)` - операция завершена успешно. В блок `resolve` передаются данные, полученные от сервера.
 *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
 *     - `UFSNetworkServiceErrorCodeInvalidJSON`
 *     - Вложенный `NSError`
 * @category Nonvisual/Network
 */
export declare function post(url: string, data?: Object, config?: NetworkConfig): Promise<Object>;
/**
 * Метод отправляет PUT-запрос на удалённый сервер.
 * Объект, содержащий тело PUT-запроса, перед отправкой, сериализуется в JSON-структуру.
 *
 * **Входные параметры:**
 * - `url` - адрес сервера;
 * - `data` - тело запроса;
 * - `config` - конфигурация сетевого запроса.
 *
 * **Возвращаемые значения:**
 * - Promise - JS-объект типа Promise с состояниями:
 *   - `resolve(data: Object)` - операция завершена успешно. В блок `resolve` передаются данные, полученные от сервера.
 *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
 *     - `UFSNetworkServiceErrorCodeInvalidJSON`
 *     - Вложенный `NSError`
 * @category Nonvisual/Network
 */
export declare function put(url: string, data?: Object, config?: NetworkConfig): Promise<Object>;
/**
 * Отличие `syncGet` от `get` состоит в том, что запросы от метода `syncGet` направляются в единую очередь запросов.
 * Единая очередь гарантирует их строгое и последовательное выполнение, то есть запрос,
 * "В", поступивший после запроса "А", начнёт своё исполнение после получения ответа на запрос "А".
 * При возникновении ошибки в запросе "А" вызывается блок для обработки ошибок, и очередь переходит к обработке запроса "В".
 *
 * **Входные параметры:**
 * - `url` - адрес сервера;
 * - `config` - конфигурация сетевого запроса.
 *
 * **Возвращаемые значения:**
 * - Promise - JS-объект типа Promise с состояниями:
 *   - `resolve(data: Object)` - операция завершена успешно. В блок `resolve` передаются данные, полученные от сервера.
 *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
 *     - Вложенный `NSError`
 * @category Nonvisual/Network
 */
export declare function syncGet(url: string, config?: NetworkConfig): Promise<Object>;
/**
 * Отличие `syncPost` от `post` состоит в том, что запросы от метода `syncPost` направляются в единую очередь запросов.
 * Единая очередь гарантирует их строгое и последовательное выполнение, то есть запрос,
 * "В", поступивший после запроса "А", начнёт своё исполнение после получения ответа на запрос "А".
 * При возникновении ошибки в запросе "А" вызывается блок для обработки ошибок, и очередь переходит к обработке запроса "В".
 *
 * **Входные параметры:**
 * - `url` - адрес сервера;
 * - `data` - тело запроса;
 * - `config` - конфигурация сетевого запроса.
 *
 * **Возвращаемые значения:**
 * - Promise - JS-объект типа Promise с состояниями:
 *   - `resolve(data: Object)` - операция завершена успешно. В блок `resolve` передаются данные, полученные от сервера.
 *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
 *     - `UFSNetworkServiceErrorCodeInvalidJSON`
 *     - Вложенный `NSError`
 * @category Nonvisual/Network
 */
export declare function syncPost(url: string, data?: Object, config?: NetworkConfig): Promise<Object>;
/**
 * Отличие `syncPut` от `put` от состоит в том, что запросы от метода `syncPut` направляются в единую очередь запросов.
 * Единая очередь гарантирует их строгое и последовательное выполнение, то есть запрос,
 * "В", поступивший после запроса "А", начнёт своё исполнение после получения ответа на запрос "А".
 * При возникновении ошибки в запросе "А" вызывается блок для обработки ошибок, и очередь переходит к обработке запроса "В".
 *
 * **Входные параметры:**
 * - `url` - адрес сервера;
 * - `data` - тело запроса;
 * - `config` - конфигурация сетевого запроса.
 *
 * **Возвращаемые значения:**
 * - Promise - JS-объект типа Promise с состояниями:
 *   - `resolve(data: Object)` - операция завершена успешно. В блок `resolve` передаются данные, полученные от сервера.
 *   - `rejected(error: UFSError)` - операция завершилась неудачно. Возможные коды ошибок:
 *     - `UFSNetworkServiceErrorCodeInvalidJSON`
 *     - Вложенный `NSError`
 * @category Nonvisual/Network
 */
export declare function syncPut(url: string, data?: Object, config?: NetworkConfig): Promise<Object>;
