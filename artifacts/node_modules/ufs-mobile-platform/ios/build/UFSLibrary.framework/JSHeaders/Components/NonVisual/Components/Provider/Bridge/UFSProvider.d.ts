/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { Reducer } from 'redux-actions';
export interface Props {
    /**
     * Необходимые прикладному приложению редьюсеры, скомбинированные при помощи функции `combineReducers` из библиотеки react redux.
     */
    reducer?: Reducer<any, any>;
    /**
     * Дополнительный middleware.
     */
    middleware?: any[];
    /**
     * В качестве дочерних принимаются любые компоненты.
     */
    children?: ReactNode;
    /**
     * Если свойству присвоена функция, то компонент не будет отрисовывать свои дочерние компоненты до тех пор,
     * пока функция не будет вызвана.
     *
     * При вызове в функцию в качестве параметра передаётся объект-состояние от предыдущего запуска приложения с аналогичным `bundleName`.
     *
     * Состояние автоматически сохраняется при удалении приложения из иерархии представлений.
     *
     * Для одного `bundleName` может быть сохранён только один объект-состояние.
     *
     * Состояние хранится в оперативной памяти устройства и уничтожается при перезапуске iOS-приложения.
     */
    onLoadPreviousState?: (state?: any) => void;
    /**
     * Начальное состояние. При получении объекта-состояния из функции `onLoadPreviousState` следует передать его в данное свойство.
     *
     * Перед присвоением объекта данному свойству в нём допускаются правки, которые не меняют его структуры.
     *
     * Для загрузки чистого приложения этому свойству следует присвоить `undefined`.
     *
     * Значение свойства используется при создании корневого редьюсера:
     * оно без изменения передаётся вторым параметром в функцию `createStore(reducer, [initialState], [enhancer])` библиотеки `Redux`.
     */
    initialState?: any;
}
export interface State {
    loadedPreviousState: boolean;
}
/**
 * Компонент используется для подключения redux store ко всем находящимся внутри него компонентам,
 * также компонент предоставляет доступ прикладного кода к набору библиотечных reducer.
 * `UFSProvider` является надстройкой над компонентом `Provider` из библиотеки `Redux`.
 * @category Visual
 */
export default class UFSProviderManager extends Component<Props, State> {
    static store: any;
    state: {
        loadedPreviousState: boolean;
    };
    componentDidMount(): void;
    /**
     * @private
     * @static
     */
    private static saveState();
    /**
     * @private
     * @static
     */
    private static subscribeOnEvents();
    /**
     * @private
     */
    private canRenderChildren;
    renderReducer(): JSX.Element;
    render(): JSX.Element;
}
