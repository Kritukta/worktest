import React, { Component } from 'react';
import { NativeModules, NativeEventEmitter } from 'react-native';
import { Provider } from 'react-redux';
import { configureStore } from '../../Store/configureStore';
const UFSProvider = NativeModules.UFSProviderBridge;
const UFSProviderEmitter = new NativeEventEmitter(UFSProvider);
const UFSProviderEvents = UFSProvider.UFSProviderEvents;
/**
 * Компонент используется для подключения redux store ко всем находящимся внутри него компонентам,
 * также компонент предоставляет доступ прикладного кода к набору библиотечных reducer.
 * `UFSProvider` является надстройкой над компонентом `Provider` из библиотеки `Redux`.
 * @category Visual
 */
export default class UFSProviderManager extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            loadedPreviousState: false
        };
        /**
         * @private
         */
        this.canRenderChildren = () => {
            return this.props.onLoadPreviousState === undefined || (this.props.onLoadPreviousState !== undefined && !!this.state.loadedPreviousState);
        };
    }
    componentDidMount() {
        UFSProviderManager.subscribeOnEvents();
        if (this.props.onLoadPreviousState !== undefined) {
            UFSProvider.getSavedState()
                .then((state) => {
                this.props.onLoadPreviousState(state);
                this.setState({ loadedPreviousState: true });
            })
                .catch((error) => {
                this.props.onLoadPreviousState();
                this.setState({ loadedPreviousState: true });
            });
        }
    }
    /**
     * @private
     * @static
     */
    static saveState() {
        const store = UFSProviderManager.store;
        if (store !== undefined && store !== null) {
            const state = store.getState();
            UFSProvider.saveState(state);
        }
    }
    /**
     * @private
     * @static
     */
    static subscribeOnEvents() {
        let onEvent = () => {
            UFSProviderManager.saveState();
        };
        UFSProviderEmitter.addListener(UFSProviderEvents.prepareForFinish, onEvent, undefined);
    }
    renderReducer() {
        const store = configureStore(this.props.reducer, this.props.middleware || [], this.props.initialState);
        UFSProviderManager.store = store;
        return (React.createElement(Provider, {store: store}, this.props.children));
    }
    render() {
        if (this.canRenderChildren()) {
            return this.renderReducer();
        }
        else {
            return null;
        }
    }
}
//# sourceMappingURL=UFSProvider.js.map