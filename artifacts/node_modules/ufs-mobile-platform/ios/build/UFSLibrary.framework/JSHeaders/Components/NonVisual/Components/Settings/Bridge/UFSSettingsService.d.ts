/**
 *  + `url` - **Обязательный** ключ перед началом использования сервиса
 *  + `applicationId` - Опциональный ключ, по умолчанию в запросе отправляется значение совпадающее с названием bundle приложения (поле Bundle name в файле Info.plist)
 *  + `applicationVersion` - Опциональный ключ, если параметр не задан, по умолчанию в запросе отправляется значение совпадающее с версией bundle приложения (поле Bundle versions string, short в файле Info.plist)
 *  + `branchMode` - Включает режим работы "всплывания" для ВСП. По-умолчанию `false`. При значении равном `false` будет добавлен заголовок `ufs-channel` со значением `mobile`. При значении равном `true` поведение отличается при получении параметров по массиву строк и по объекту. В случае массива строк заголовок `ufs-channel` добавлен не будет, в случае объекта будет добавлен заголовок `ufs-channel` со значением `branch`.
 */
export interface SettingsConfig {
    url: string;
    applicationId?: string;
    applicationVersion?: string;
    branchMode?: boolean;
}
/**
 * Интерфейс, которому соответствует возвращаемое значение
 */
export interface SettingsParameters {
    [key: string]: Object;
}
/**
 * > #### Обратите внимание
 * > Сервис предназначен для оптимизации и удобств работ прикладного разработчика и проекта в целом с сервисом СУП (Система Управления Параметрами).
 * > ПO СУП является [Дорогова Елена Владимировна](https://sbtatlas.sigma.sbrf.ru/wiki/display/~SBT-Dorogova-EV).
 * > Просьба вопросы по устройству СУП, предложения по доработке, возможностям вносить и изменять параметры адресовать ПO СУП.
 * > СУП расположен в сегменте Alpha. Сервис по работе с СУП в мобильной библиотеке никак не связан с инфраструктурой в Сигме,
 * > которая бы отвечала за пробрасывание запросов из внешней сети в Alpha. За инфраструктурным решением стоит обратиться к вашему проектному архитектору.
 * > Текущий сервис разработан согласно
 * > [спецификации на СУП 2.0](https://sbtatlas.sigma.sbrf.ru/wiki/download/attachments/127065530/sup2.pdf?version=1&modificationDate=1508404473076&api=v2)
 *
 * Общий жизненный цикл по работе с сервисом СУП выглядит следующим образом:
 * 1. Конфигурирование сервиса на стороне мобильного клиента методом configure (необходимо задать url, по котором будет расположен REST JSON API, возвращающий данные из СУП).
 * 2. Получение требуемых параметров bulk-запросом по ключам (метод `retrieve`) и кеширование их в локальной базе.
 * 3. Быстрый доступ к значениям через метод `get`.
 * @category Nonvisual
 */
export default class UFSSettingsService {
    /**
     * Метод позволяет задать базовые настройки для работы с сервисом СУП.
     * Время жизни заданных настроек ограничено временем жизни приложения, т.е при каждом новом запуске приложения данные настройки необходимо задавать заново.
     *
     *
     * **Входные параметры:**
     * - `config` - объект конфигурации
     *
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve()` - сервис по работе с СУП успешно сконфигурирован
     *   - `rejected(error: UFSError)` - операция конфигурирования завершилась неудачно
     * @static
     */
    static configure(config: SettingsConfig): Promise<void>;
    /**
     * Метод запрашивает заданные параметры из СУП и сохраняет их в локальной базе для возможности быстрого доступа (а также оффлайн доступа) через метод get.
     * В случае успешного получения ответа, метод сохраняет полученные параметры в локальной базе данных и возвращает параметры в resolve.
     * Каждый следующий успешный вызов перетирает текущие значение в базе мобильного клиента.
     * Если по запрашиваемому ключу возвращается null, то данный параметр удаляется из локальной базы на мобильном клиенте.
     *
     *
     * **Входные параметры:**
     * - `config` - В зависимости от типа параметра происходит различное поведение:
     *   - String[]: список параметров, которые будут запрошены из сервиса СУП, JSON для запроса будет подготовлен автоматически.
     *   - Object: готовый JSON для запроса СУП, соответствующий спецификации
     *
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve(params: SettingsParameters)` - операция получения настроек с сервера и сохранения в локальной базе успешно завершена, полученные параметры содержатся в объекте `params`
     *   - `rejected(error: UFSError)` - операция завершилась неудачно
     * @static
     */
    static retrieve(config: Object | string[]): Promise<SettingsParameters>;
    /**
     * Метод возвращает значения для  указанных параметров для текущей версии приложения.
     * Значения достаются из локальной базы данных.
     * В случае отсутствия значений для текущий версии - возвращается пустой объект.
     *
     *
     * **Входные параметры:**
     * - `config` - Список параметров, значения которых необходимо получить
     *
     *
     * **Возвращаемые значения:**
     * - Promise - JS-объект типа Promise с состояниями:
     *   - `resolve(params: SettingsParameters)` - операция получения настроек из локальной базы данных успешно завершена, полученные параметры содержатся в объекте `params`
     *   - `rejected(error: UFSError)` - операция завершилась неудачно
     * @static
     */
    static get(config: string[]): Promise<SettingsParameters>;
}
