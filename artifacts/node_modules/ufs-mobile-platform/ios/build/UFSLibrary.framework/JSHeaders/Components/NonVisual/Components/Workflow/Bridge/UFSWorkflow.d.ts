import { WorkflowStatus } from '../../../../JSCore/Common/UFSInterfaces';
/**
 * Компонент служит для управления навигацией внутри процесса, состоящего из этапов.
 * Компонент имеет свой раздел в redux store приложения.
 * В одном приложении существует только один раздел в redux store.
 * Для визуального отображения состояния `Workflow` используется компонент `WFBreadcrumbs` (Автоматические хлебные крошки),
 * который автоматически отображает текущее состояние `Workflow`.
 *
 * Для отображения также используется визуальный компонент `Breadcrumbs` (Хлебные крошки).
 *
 * См. также описание `Workflow` на странице документации Ядра Платформы ЕФС
 * [документации Ядра Платформы ЕФС](http://sbt-orefs-063.sigma.sbrf.ru/java/ufs-platform-doc/6.7.0/4_platformModules/5_workflow/workflow.html)
 *
 * ##### Обратите внимание
 * + Для корректной работы в прикладном приложении должен использоваться библиотечный `UFSProvider`.
 * + В одном приложении существует только один раздел в redux store.
 *
 * ##### Workflow state
 * Одна из секций redux store state посвящена Workflow. В ней находится вся актуальная информация по текущему процессу:
 *
 * | Свойство          | Тип             | Описание  |
 * | ----------------- | --------------- | --------- |
 * | workflowError     | `WorkflowError` | Ошибка в формате `WorkflowError` (подробная ошибка от сервера workflow); |
 * | url               | `string`        | URL текущего процесса; |
 * | status            | `WorkflowStatus.SUCCESS` `WorkflowStatus.EXTERNAL_ENTER` `WorkflowStatus.EXTERNAL_RETURN` `WorkflowStatus.END` | Текущий статус состояния процесса; |
 * | stateName         | `string`        | Имя текущего шага; |
 * | processId         | `string`        | Идентификатор процесса; |
 * | isLoading         | `boolean`       | Выставляется в `true` каждый раз, когда модуль обращается на сервер за обновлённым состоянием; |
 * | history           | `Object[]`      | Информация о пройденных шагах процесса; |
 * | hintSwitchEnabled | `boolean`       | Флаг, на основании которого определяется доступность компонента "переключатель подсказок" для пользователя; |
 * | hintsVisible      | `boolean`       | Флаг, на основании которого определяется видимость подсказок для пользователя; |
 * | hints             | `Object`        | Объект содержит информацию о пользовательских подсказках для текущего шага процесса. Данные приходят с сервера; |
 * | flowName          | `string`        | Имя текущего flow; |
 * | error             | `UFSError`      | Ошибка в формате `UFSError`; |
 * | data              | `Object`        | Данные формы, возвращённые сервером. |
 * @category Nonvisual
 */
export default class UFSWorkflow {
    /**
     * Техническая функция. Не должна экспортироваться. Экспортирование оставлено для обратной совместимости.
     * @private
     * @static
     */
    static setStore(applicationStore: any): void;
    static getStore(): any;
    /**
     * Перед первым использованием любого из методов компонента следует задать базовый URL. См. пример:
     * ```
     * Workflow.setBaseUrl('http://sbt-orefs-063.sigma.sbrf.ru');
     * ```
     *
     * **Входные параметры:**
     * - `baseUrl` - базовый URL.
     * @static
     */
    static setBaseUrl(baseUrl: string): void;
    /**
     * Инициализирует workflow-процесс с указанными настройками.
     *
     * Чтобы инициализировать новый workflow-процесс во время работы пользователя с приложением,
     * необходимо предварительно завершить предыдущий.
     * Завершение процесса должно быть частью общей логики и вызываться через стандартные методы работы с `Workflow`.
     * Завершение произойдёт, когда сервер вернёт статус `WorkflowStatus.END`.
     * Этот статус будет записан в `Workflow.State`.
     * После завершения процесса можно вызывать `initFlow`.
     * При этом `proccessId` останется прежним, а другие параметры отчистятся.
     *
     * **Входные параметры:**
     * - `options` - настройки процесса, состоящие из двух обязательных значений:
     *   - `url` - начальный url для запросов;
     *   - `flowName` - название flow;
     * - `data` - начальные POST-данные.
     * @static
     */
    static initFlow(options: {
        url: string;
        flowName: string;
        processId?: string;
        status?: WorkflowStatus;
    }, data?: any): void;
    /**
     * Отправляет событие для текущего состояния.
     * Функция не должна вызываться из прикладного кода,
     * используется только самим компонентом `Workflow`.
     * @static
     * @private
     */
    static sendStateEvent(eventName: string, data?: any): void;
    /**
     * Отправляет команду восстановления предыдущего шага истории.
     *
     * **Входные параметры:**
     * - `stateId` - идентификатор шага истории. Доступен по ключу `id` у каждого элемента `state.workflow.history`.
     * @static
     */
    static rollbackState(stateId: string): void;
    /**
     * Отправляет команду выхода из flow.
     *
     * **Входные параметры:**
     * отсутствуют
     * @static
     */
    static exitFlow(): void;
    /**
     * Отправляет команду прерывания процесса.
     *
     * **Входные параметры:**
     * отсутствуют
     * @static
     */
    static abortProcess(): void;
    /**
     * Сообщает обновленные данные для текущего состояния перед их отправкой с помощью `sendStateEvent`.
     *
     * **Входные параметры:**
     * - `data` - обновлённые данные.
     * @static
     */
    static updateStateData(data: any): void;
    /**
     * Отправляет событие для текущего состояния с данными установленными ранее с помощью функции `updateStateData`.
     *
     * **Входные параметры:**
     * - `eventName` - имя события.
     * @private
     * @static
     */
    static submitStateEvent(eventName: string): void;
    /**
     * Меняет доступность компонента `HintSwitch`.
     *
     * **Входные параметры:**
     * - `enabling` - флаг, определяющий доступность для нажатия компонента `HintSwitch`.
     * @static
     */
    static updateHintSwitchEnabling(enabling: boolean): void;
    /**
     * Меняет видимость подсказок для пользователя.
     *
     * **Входные параметры:**
     * - `visible` - флаг, определяющий видимость подсказок для пользователя.
     * @static
     */
    static updateHintsVisibility(visible: boolean): void;
    private static sendStatusToContainer(workflowData);
    private static sendProcessIdToContainer(workflowData);
}
