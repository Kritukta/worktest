/// <reference types="react" />
import React, { Component, ReactNode } from 'react';
export interface Props extends React.Props<UFSAccordionManager> {
    /**
     * Текст заголовка.
     */
    header: string;
    /**
     * Задает видимое состояние контента.
     *
     * При значении `true` - будет отображен контент.
     * При значении `false` - контент будет скрыт и выгружен из памяти.
     */
    opened: boolean;
    /**
     * Вызывается при нажатии на заголовок.
     */
    onClick?: () => void;
    /**
     * Делает недоступным для нажатий заголовок и контент.
     */
    disabled?: boolean;
    /**
     * Дочерние компоненты могут быть любых типов.
     *
     * Поддерживается автоматическое позиционирование `HintIcon`.
     * Для автоматического позиционирования необходимо у `HintIcon` задать значение `true` свойству `autoPosition`.
     */
    children?: ReactNode;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
}
/**
 * Используется как контейнер для показа и скрытия содержимого.
 *
 * <br/>
 *
 * Он состоит из произвольного набора данных, заключенных внутрь компонента, и строки-кнопки, которая этот набор данных показывает и скрывает.
 *
 * ##### Ограничения
 * Вложенные аккордеоны не поддерживаются - нельзя разместить аккордеон внутри контента другого аккордеона.
 * @category Visual
 */
export default class UFSAccordionManager extends Component<Props, {}> {
    private renderChildrenIfNeeded;
    private filterOutHintIconsWithoutAutoPosition;
    render(): JSX.Element;
}
