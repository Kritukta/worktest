/// <reference types="react-native" />
/// <reference types="react" />
import { Component } from 'react';
import { ViewStyle } from 'react-native';
export interface Props {
    /**
     * Имя jsbundle из раздела UFSProjectConfig/bundles файла Info.plist проекта.
     */
    bundleName: string;
    /**
     * Идентификатор jsbundle, предварительно скачанного и сохраненного в локальной базе данных.
     */
    fileId?: string;
    /**
     * Внешний URL с jsbundle.
     */
    url?: string;
    /**
     * Объект, каждое поле которого будет передано в props корневого компонента приложения.
     */
    initialProps?: Object;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
}
export interface PublicProps extends Props {
    /**
     * Вызывается при успешной загрузке приложения.
     */
    onAppLoad?: (identifier: string) => void;
    /**
     * Вызывается при возникновении ошибки во время загрузки бандла.
     */
    onError?: (error: Error) => void;
}
export interface PrivateProps extends Props {
    onAppLoad?: (event: OnAppLoadEvent) => void;
    onAppLoaderError?: (error: OnAppLoaderError) => void;
}
export interface OnAppLoaderError {
    nativeEvent: {
        error: string;
    };
}
export interface OnAppLoadEvent {
    nativeEvent: {
        appId: string;
    };
}
/**
 * Предназначен для загрузки внешнего приложения, которое компилируется в отдельный jsbundle.
 * Для определния какой именно бандл подгружать необходимо определить одно из трех свойств компонента - `bundleName`, `fileID` или `url`.
 * Имя jsbundle и имя приложения, которое регистрируется с помощью функции AppRegistry, должны совпадать.
 * @category Visual
 */
export default class UFSAppLoaderManager extends Component<PublicProps, {}> {
    onAppLoad: (event: OnAppLoadEvent) => void;
    onError: (event: OnAppLoaderError) => void;
    render(): JSX.Element;
}
