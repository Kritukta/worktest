/// <reference types="react-native" />
/// <reference types="react" />
import React, { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export declare const UFSButtonType: any;
export interface Props extends React.Props<UFSButtonManager> {
    /**
    * Функция вызывается при клике на кнопку.
    */
    onExecute?: () => void;
    /**
     * Тип кнопки из словаря ButtonType. Доступные значения:
     * - `DEFAULT` - стандартная зеленая кнопка (значение по умолчанию);
     * - `ORANGE` - кнопка выполнения операции;
     * - `CTA` - call-to-action;
     * - `ABORT` - кнопка завершения сеанса;
     * - `TEXT` - синий текст, прозрачный фон;
     * - `TEXT_RED` - красный текст, прозрачный фон;
     * - `ICON` - кнопка-иконка без текста. Явно задавать тип `ICON` не рекомендуется,
     * он будет присвоен автоматически в случае, когда внутри находится компонент `<Icon>`.
     */
    type?: number;
    /**
     * Атрибут доступности кнопки.
     */
    disabled?: boolean;
    /**
     * @private
     * Формируется автоматически на основе дочерних компонентов типа Text.
     */
    title?: string;
    /**
     * @private
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `Text`
     * - `Icon`
     */
    children?: ReactNode;
}
/**
 * @category Visual
 * ##### Многострочность
 * Допускаются **только однострочные и двухстрочные** заголовки кнопок. Для создания новой строки необходимо
 * использовать специальный символ `\n` внутри текста.
 *
 * ##### Кнопка-иконка
 * Если внутри компонента `Button` расположить компонент `Icon`, то иконка станет кликабельной.
 * Размер компонента будет совпадать с размером вложенной иконки, но не меньше 44x44 точки. Состояния
 * компонента `Icon` `highlighted` и `disabled` обновляются автоматически на основании соответствующих состояний
 * компонента `Button`.
 */
export default class UFSButtonManager extends Component<Props, {}> {
    private findButtonText;
    private buttonTitle;
    private findIcon;
    render(): React.ReactElement<UFSButtonManager>;
}
