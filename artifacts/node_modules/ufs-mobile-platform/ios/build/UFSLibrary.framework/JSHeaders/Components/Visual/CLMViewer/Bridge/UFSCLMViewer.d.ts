/// <reference types="react-native" />
/// <reference types="react" />
import * as React from 'react';
import { ViewStyle } from 'react-native';
import { UFSError, ErrorUserInfo } from '../../../JSCore/Common/UFSError';
export interface CLMViewerError {
    nativeEvent: {
        error: ErrorUserInfo;
    };
}
export interface CLMViewerPayload {
    nativeEvent: {
        payload: Object;
    };
}
export interface Props {
    /**
     * Идентификатор файла, сохранённого в локальной базе данных.
     */
    fileId?: string;
    /**
     * Имя файла, входящего в состав приложения. Данное свойство имеет
     * более низкий приоритет по сравнению с `fileId`.
     */
    name?: string;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Стили React.
     *  * Размер компонента по умолчанию 640 х 640.
     */
    style?: ViewStyle;
}
export interface PublicProps extends Props {
    /**
     * Вызывается при успешном отображении файла.
     */
    onOpen?: () => void;
    /**
     * Вызывается когда скрипт внутри CLM сообщает о завершении работы и передает некоторые данные.
     * Конкретный формат этих данных зависит от CLM и передаётся в метод как есть.
     */
    onFinish?: (payload: Object) => void;
    /**
     * Вызывается при неудачном чтении или отображении CLM. Возможные ошибки:
     * - `UFSFileServiceErrorCodeNotExist` - в локальной базе нет записи с таким fileId
     * - `UFSFileServiceErrorCodeDeletedFile` - файл был удален системой
     * - `UFSFileCoreErrorCodeCLMNoIndex` - в случае если внутри не оказалось index.html
     * - `UFSFileCoreErrorCodeCLMUnzipFailed` - произошла ошибка при распаковке
     * - `UFSFileCoreErrorCodeCLMWrongFormat` - переданному в компонент fileId соотвествует не zip-архив, а файл с каким-то другим форматом
     * - Вложенный `NSError`
     */
    onError?: (error: UFSError) => void;
}
export interface PrivateProps extends Props {
    onError: (event: CLMViewerError) => void;
    onFinish: (event: CLMViewerPayload) => void;
}
/**
 * Используется для отображения CLM-архивов, сохранённых в локальной базе данных.
 * @category Visual
 */
export default class UFSCLMViewerManager extends React.Component<PublicProps, {}> {
    onError: (event: CLMViewerError) => void;
    onFinish: (event: CLMViewerPayload) => void;
    render(): JSX.Element;
}
