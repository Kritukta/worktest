var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import * as React from 'react';
import { requireNativeComponent } from 'react-native';
import { makeUFSErrorFromUserInfo } from '../../../JSCore/Common/UFSError';
/**
 * Используется для отображения CLM-архивов, сохранённых в локальной базе данных.
 * @category Visual
 */
export default class UFSCLMViewerManager extends React.Component {
    constructor() {
        super(...arguments);
        this.onError = (event) => {
            this.props.onError(makeUFSErrorFromUserInfo(event.nativeEvent.error));
        };
        this.onFinish = (event) => {
            this.props.onFinish(event.nativeEvent.payload);
        };
    }
    render() {
        var props = this.props;
        if (props.fileId && props.name) {
            Object.assign(props, { name: undefined });
        }
        return (React.createElement(UFSCLMViewer, __assign({}, props, {onError: this.props.onError ? this.onError : null, onFinish: this.props.onFinish ? this.onFinish : null})));
    }
}
const UFSCLMViewer = requireNativeComponent('UFSCLMViewerView');
//# sourceMappingURL=UFSCLMViewer.js.map