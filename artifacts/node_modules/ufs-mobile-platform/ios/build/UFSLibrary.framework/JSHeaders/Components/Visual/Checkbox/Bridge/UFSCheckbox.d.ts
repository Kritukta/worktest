/// <reference types="react-native" />
/// <reference types="react" />
import { Component } from 'react';
import { ViewStyle } from 'react-native';
export interface CheckboxEvent {
    nativeEvent: {
        checked?: boolean;
    };
}
export interface Props {
    /**
    * Метка, связанная с элементом, информирующая о смысловой нагрузке элемента.
    */
    label?: string;
    /**
    * Состояние элемента checked(true)/unchecked(false).
    */
    checked?: boolean;
    /**
    * Состояние элемента disabled(true)/enabled(false). Блокирует возможность изменения состояния "checked".
    */
    disabled?: boolean;
    /**
     * Атрибут, позволяющий отключить подчеркивание у элемента.
     */
    underlined?: boolean;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
    */
    testID?: string;
}
export interface PublicProps extends Props {
    /**
    * Событие, возникающее когда значение атрибута "checked" изменилось.
    */
    onChange?: (checked: boolean) => void;
}
export interface PrivateProps extends Props {
    onChange?: (event: CheckboxEvent) => void;
}
/**
 * Компонент используется для предоставления пользователю возможности изменения состояния двух или большего количества опций,
 * каждая из которых может быть включена (отмечена галочкой) либо выключена (галочка снята).
 * @category Visual
 */
export default class UFSCheckboxManager extends Component<PublicProps, {}> {
    onChange: (event: CheckboxEvent) => void;
    render(): JSX.Element;
}
