var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import React, { Component } from 'react';
import ReactNative, { UIManager, requireNativeComponent } from 'react-native';
import UFSComboBoxContent from '../../ComboBoxContent/Bridge/UFSComboBoxContent';
import { renderHintIcons } from '../../../HintIcon/HintIcon/Bridge/UFSHintIcon';
import { HintIcon } from '../../../HintIcon/';
/**
 * Компонент представляется текстовым полем для ввода,
 * при вводе текста в которое пользователю отображается список с возможными вариантами для выбора.
 * <br/><br/>
 * Предназначен для предоставления пользователю отфильтрованного списка,
 * сформированного на основе значения, введенного в текстовое поле.
 * Позволяет пользователю выбрать значение из списка, а также ввести его самостоятельно.
 * ##### Размещение
 * При размещении в платформенных контейнерах(`SplitPanel`, `Popover`) будет
 * работать функция автоматического скролла при появлении и скрытии клавиатуры.
 *
 * <br/>
 *
 * __Known issues:__ `ComboBox` не работает внутри `Popover`, либо других всплывающих форм,
 * приводящих к показу нативного модального окна или поповера.
 *
 * ##### Методы
 * 1. dismissKeyboard()
 *
 * <br/>
 *
 * Принудительно скрывает клавиатуру.
 * @category Visual/Input
 */
export default class UFSComboBoxManager extends Component {
    constructor() {
        super(...arguments);
        this.onChange = (event) => {
            if (!this.props.onChange) {
                return;
            }
            this.props.onChange(event.nativeEvent.value);
        };
        /**
         * Принудительно скрывает клавиатуру.
         */
        this.dismissKeyboard = () => {
            UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.UFSComboBoxView.Commands.dismissKeyboard, []);
        };
    }
    childenWithoutHintIcons() {
        const childrenArray = React.Children.toArray(this.props.children);
        return childrenArray.filter(child => child.type !== HintIcon);
    }
    render() {
        const hintIcons = renderHintIcons(this.props.children, 'ComboBox', 1);
        const children = (hintIcons && hintIcons.length > 0) ? this.childenWithoutHintIcons() : this.props.children;
        return (React.createElement(UFSComboBox, __assign({}, this.props, {onChange: this.onChange}), 
            hintIcons, 
            React.createElement(UFSComboBoxContent, null, children)));
    }
}
const UFSComboBox = requireNativeComponent('UFSComboBoxView');
//# sourceMappingURL=UFSComboBox.js.map