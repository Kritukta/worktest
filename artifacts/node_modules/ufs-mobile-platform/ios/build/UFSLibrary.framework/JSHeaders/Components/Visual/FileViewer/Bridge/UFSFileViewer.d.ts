/// <reference types="react-native" />
/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
import { UFSError, ErrorUserInfo } from '../../../JSCore/Common/UFSError';
export interface FileViewerError {
    nativeEvent: {
        error: ErrorUserInfo;
    };
}
export interface Props {
    /**
     * Идентификатор файла, сохраненного в локальной базе данных.
     */
    fileId?: string;
    /**
     * Вызывается при успешном отображении файла.
     */
    onOpen?: () => void;
    /**
     * Управляет масштабированием компонента.
     * По умолчанию `false`.
     */
    zoomEnabled?: boolean;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Стили React.
     * Размер компонента по умолчанию 320 х 200.
     */
    style?: ViewStyle;
    /**
     * Дочерние компоненты могут быть любых типов.
     */
    children?: ReactNode;
}
export interface PublicProps extends Props {
    /**
     * Вызывается при неудачном чтении или отображении файла.
     */
    onError?: (error: UFSError) => void;
}
export interface PrivateProps extends Props {
    onError?: (event: FileViewerError) => void;
}
/**
 * Используется для отображения файлов, сохраненных в локальной базе данных.
 *
 * ##### Особенности
 * Для отображения локальных файлов используется нативный компонент `WKWebView`.
 * Из этого следует, что функционал отображения, качество рендера и возможности по взаимодействию
 * полностью повторяют поведение `WKWebView` и не могут быть переопределены.
 *
 * ##### Поддерживаемые форматы
 * - .txt;
 * - .rtf;
 * - .doc;
 * - .docx;
 * - .pdf;
 * - .xls;
 * - .xlsx;
 * - .ppt;
 * - .pptx;
 * - .jpeg;
 * - .jpg;
 * - .png;
 * - .bmp;
 * - .mp4;
 * @category Visual
 */
export default class UFSFileViewerManager extends Component<PublicProps, {}> {
    onError: (event: FileViewerError) => void;
    render(): JSX.Element;
}
