var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import React, { Component } from 'react';
import { requireNativeComponent } from 'react-native';
import { makeUFSErrorFromUserInfo } from '../../../JSCore/Common/UFSError';
/**
 * Используется для отображения файлов, сохраненных в локальной базе данных.
 *
 * ##### Особенности
 * Для отображения локальных файлов используется нативный компонент `WKWebView`.
 * Из этого следует, что функционал отображения, качество рендера и возможности по взаимодействию
 * полностью повторяют поведение `WKWebView` и не могут быть переопределены.
 *
 * ##### Поддерживаемые форматы
 * - .txt;
 * - .rtf;
 * - .doc;
 * - .docx;
 * - .pdf;
 * - .xls;
 * - .xlsx;
 * - .ppt;
 * - .pptx;
 * - .jpeg;
 * - .jpg;
 * - .png;
 * - .bmp;
 * - .mp4;
 * @category Visual
 */
export default class UFSFileViewerManager extends Component {
    constructor() {
        super(...arguments);
        this.onError = (event) => {
            this.props.onError(makeUFSErrorFromUserInfo(event.nativeEvent.error));
        };
    }
    render() {
        return (React.createElement(UFSFileViewer, __assign({}, this.props, {onError: this.props.onError ? this.onError : null})));
    }
}
const UFSFileViewer = requireNativeComponent('UFSFileViewerView');
//# sourceMappingURL=UFSFileViewer.js.map