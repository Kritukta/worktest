/// <reference types="react" />
import React, { Component, ReactNode } from 'react';
export interface OwnProps {
    /**
     * Код подсказки из workflow.
     */
    code?: string;
    /**
     * Текст подсказки, который будет отображён во всплывающем окне.
     */
    text?: string;
    /**
     * Определяет должно ли применяться автоматическое позиционирование в компонентах-контейнерах (`Section`, `Accordion`).
     * При использовании в остальных компонентах, поддерживающих автоматическое позиционирование `HintIcon`, параметр игнорируется.
     *
     * Список компонентов, поддерживающих автопозиционирование:
     * 1. `Section`
     * 2. `Accordion`
     * 3. Семейство Input:
     *    - `TextInput`
     *    - `NumberInput`
     *    - `DateInput`
     *    - `MaskedInput`
     *    - `Textarea`
     *    - `Combobox`
     * 4. Семейство Output
     *    - `DateLabel`
     *    - `DatePeriod`
     *    - `Label`
     *    - `MaskedText`
     *    - `SumText`
     *    - `Time`
     * 5. `Text`
     * 6. `TableHead`
     * 7. `Checkbox`
     */
    autoPosition?: boolean;
    /**
     * Используется для определения автоматической позиции внутри компонента в случаях,
     * когда компонент поддерживает несколько позиций (например, семейство Output).
     */
    autoPositionIndex?: number;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * @private
     */
    children?: ReactNode;
}
export interface Props extends OwnProps {
}
/**
 * Используется для контекстного объяснения терминов и формулировок.
 *
 * #### Ограничение
 * При одновременно заданных свойствах `code` и `text` будет использоваться свойство `code`.
 * @category Visual
 */
export declare class UFSHintIconManager extends Component<Props, {}> {
    render(): JSX.Element;
}
declare const HintIcon: React.ComponentClass<any>;
export default HintIcon;
export declare const renderHintIcons: (children: ReactNode, componentName: string, maximumIcons?: number, allowHintIconsWithoutAutoPosition?: boolean) => React.ReactElement<any>[];
