/// <reference types="react-native" />
/// <reference types="react" />
import React, { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export interface HintSwitchEvent {
    nativeEvent: {
        value: boolean;
    };
}
export interface Props {
    /**
     * @private
     * Флаг отображает состояние компонента
     */
    checked?: boolean;
    /**
     * @private
     * Флаг влияет на доступность компонента для нажатия пользователем.
     */
    disabled?: boolean;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * @private
     */
    children?: ReactNode;
}
export interface PublicProps extends Props {
    /**
     * Функция вызывается, когда пользователь изменяет значение параметра `checked`
     * @private
     */
    onChange?: (checked: boolean) => void;
}
export interface PrivateProps extends Props {
    /**
     * Функция вызывается, когда пользователь изменяет значение параметра `checked`
     * @private
     */
    onChange?: (event: HintSwitchEvent) => void;
}
/**
 * Используется только для включения/выключения отображения подсказок.
 *
 * Также для переключения отображения подсказок можно использовать метод `Workflow.updateHintsVisibility(visible: boolean)`.
 *
 * `HintSwitch` может быть заблокирован для редактирования с помощью метода `Workflow.updateHintSwitchEnabling(enabling: boolean)`;
 * @category Visual
 */
export declare class UFSHintSwitchManager extends Component<PublicProps, {}> {
    onChange: (event: HintSwitchEvent) => void;
    render(): JSX.Element;
}
declare var _default: React.ComponentClass<any>;
export default _default;
