/// <reference types="react-native" />
/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
import { UFSError, ErrorUserInfo } from '../../../JSCore/Common/UFSError';
export declare enum ImageResizeMode {
    COVER = 1,
    CONTAIN = 2,
    CENTER = 3,
    STRETCH = 4,
}
export interface CommonProps {
    /**
     * Имя файла изображения, расположенного в структуре xcode-проекта.
     */
    name?: string;
    /**
     * Идентификатор файла, сохраненного в локальной базе данных.
     */
    fileId?: string;
    /**
     * Адрес изображения в сети.
     */
    url?: string;
    /**
     * Устанавливает логику автоматического отображения загрузчика.
     *
     * При значении `true` будет автоматически показан загрузчик при отсутствии изображения.
     * При появлении изображения загрузчик будет автоматически скрыт.
     *
     * При значении `false` загрузчик показан не будет.
     *
     * По умолчанию `true`.
     */
    isLoading?: boolean;
    /**
     * Свойство определяет как будет масштабироваться изображение когда размер изображения и размер компонента отличаются.
     *
     * Доступные значения:
     * - `COVER` - масштабирует изображение, сохраняя соотношение сторон.
     * Итоговое изображение заполняет все пространство, поэтому часть изображение может обрезаться, т.к сохраняется соотношение сторон;
     * - `CONTAIN` - масштабирует изображение, сохраняя соотношение сторон.
     * Итоговое изображение не обрезается, поэтому возможно не все пространство будет заполнено(одна сторона изображения может быть не заполнена);
     * - `STRETCH` - масштабирует изображение, не сохраняя соотношение сторон
     * Итоговое изображение заполняет все пространство и не обрезается;
     * - `CENTER` - не масштабирует изображение. Итоговое изображение может обрезаться, если размер изображения больше размера компонента;
     *
     * По умолчанию `STRETCH`.
     */
    resizeMode?: ImageResizeMode;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * @private
     */
    children?: ReactNode;
}
export interface Props extends CommonProps {
    /**
     * Вызывается при ошибках загрузки изображения.
     */
    onError?: (error: UFSError) => void;
}
export interface OnImageSizeCalculatedEvent {
    nativeEvent: {
        width: number;
        height: number;
    };
}
export interface PrivateProps extends CommonProps {
    onError?: (event: OnImageErrorEvent) => void;
    onCalculatedSize?: (event: OnImageSizeCalculatedEvent) => void;
    imageWidth: number;
    imageHeight: number;
}
export interface OnImageErrorEvent {
    nativeEvent: {
        error: ErrorUserInfo;
    };
}
export interface State {
    imageWidth: number;
    imageHeight: number;
}
/**
 * Используется для отображения изображений.
 * <br/>
 *
 * Поддерживаемые форматы: PNG, JPG, BMP.
 *
 * ##### Источник изображения
 * При задании нескольких свойств для загрузки изображения (`name`, `fileId` и `url`), будет использовано свойство с наибольшим приоритетом загрузки:
 *
 * <br/>
 *
 * `name` > `fileId` > `url`
 *
 * ##### Особенности
 * При использовании удаленного скачивания изображения, с использованием свойства `url`,
 * кэширования не производится и при повторном размещении компонента, будет произведена повторная загрузка.
 *
 * <br/>
 *
 * При значительном изменении размера (увеличение более чем на 20%, уменьшение более чем на 50%) также происходит повторное скачивание.
 *
 * <br/><br/>
 *
 * Поддерживается автоматическое определение размера изображения.
 * Оно бывает двух типов: полное, когда размер компонента вообще не задан, либо частичное частичное, когда
 * задана одна из сторон - в этом случае размер второй стороны будет вычислен из соотношения сторон.
 *
 * ##### Оптимизации
 * При рендеринге изображения применяются следующие оптимизации:
 * - загрузка данных изображения в фоновом потоке
 * - декодирование данных изображения в фоновом потоке
 * - масштабирование изображения под указанную область в фоновом потоке.
 *
 * <br/>
 *
 * Данная оптимизация позволяет эффективно работать с изображениями высокого разрешения:
 * допустим у нас есть изображение с разрешением 6000x6000 и мы загружаем его в область 100x100.
 * В этом случае в память будут загружены только необходимые пиксели без потери качества
 * (на iPad 2 будет загружено изображение с разрешением 200x200).
 * @category Visual
 */
export default class UFSImageManager extends Component<Props, State> {
    static defaultProps: {
        isLoading: boolean;
        resizeMode: ImageResizeMode;
    };
    state: {
        imageWidth: number;
        imageHeight: number;
    };
    private onError;
    private onImageSizeCalculated;
    render(): JSX.Element;
}
