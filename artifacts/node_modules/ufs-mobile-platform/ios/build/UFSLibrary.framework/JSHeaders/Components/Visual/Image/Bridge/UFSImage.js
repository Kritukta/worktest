var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import React, { Component } from 'react';
import { requireNativeComponent } from 'react-native';
import { makeUFSErrorFromUserInfo } from '../../../JSCore/Common/UFSError';
export var ImageResizeMode;
(function (ImageResizeMode) {
    ImageResizeMode[ImageResizeMode["COVER"] = 1] = "COVER";
    ImageResizeMode[ImageResizeMode["CONTAIN"] = 2] = "CONTAIN";
    ImageResizeMode[ImageResizeMode["CENTER"] = 3] = "CENTER";
    ImageResizeMode[ImageResizeMode["STRETCH"] = 4] = "STRETCH";
})(ImageResizeMode || (ImageResizeMode = {}));
/**
 * Используется для отображения изображений.
 * <br/>
 *
 * Поддерживаемые форматы: PNG, JPG, BMP.
 *
 * ##### Источник изображения
 * При задании нескольких свойств для загрузки изображения (`name`, `fileId` и `url`), будет использовано свойство с наибольшим приоритетом загрузки:
 *
 * <br/>
 *
 * `name` > `fileId` > `url`
 *
 * ##### Особенности
 * При использовании удаленного скачивания изображения, с использованием свойства `url`,
 * кэширования не производится и при повторном размещении компонента, будет произведена повторная загрузка.
 *
 * <br/>
 *
 * При значительном изменении размера (увеличение более чем на 20%, уменьшение более чем на 50%) также происходит повторное скачивание.
 *
 * <br/><br/>
 *
 * Поддерживается автоматическое определение размера изображения.
 * Оно бывает двух типов: полное, когда размер компонента вообще не задан, либо частичное частичное, когда
 * задана одна из сторон - в этом случае размер второй стороны будет вычислен из соотношения сторон.
 *
 * ##### Оптимизации
 * При рендеринге изображения применяются следующие оптимизации:
 * - загрузка данных изображения в фоновом потоке
 * - декодирование данных изображения в фоновом потоке
 * - масштабирование изображения под указанную область в фоновом потоке.
 *
 * <br/>
 *
 * Данная оптимизация позволяет эффективно работать с изображениями высокого разрешения:
 * допустим у нас есть изображение с разрешением 6000x6000 и мы загружаем его в область 100x100.
 * В этом случае в память будут загружены только необходимые пиксели без потери качества
 * (на iPad 2 будет загружено изображение с разрешением 200x200).
 * @category Visual
 */
export default class UFSImageManager extends Component {
    constructor() {
        super(...arguments);
        this.state = {
            imageWidth: 0,
            imageHeight: 0
        };
        this.onError = (event) => {
            this.props.onError(makeUFSErrorFromUserInfo(event.nativeEvent.error));
        };
        this.onImageSizeCalculated = (event) => {
            let width = event.nativeEvent.width;
            let height = event.nativeEvent.height;
            this.setState({
                imageWidth: width,
                imageHeight: height
            });
        };
    }
    render() {
        return (React.createElement(UFSImage, __assign({}, this.props, {onError: this.props.onError ? this.onError : null, onCalculatedSize: this.onImageSizeCalculated, imageHeight: this.state.imageHeight, imageWidth: this.state.imageWidth})));
    }
    ;
}
UFSImageManager.defaultProps = {
    isLoading: true,
    resizeMode: ImageResizeMode.STRETCH
};
const UFSImage = requireNativeComponent('UFSImageView');
//# sourceMappingURL=UFSImage.js.map