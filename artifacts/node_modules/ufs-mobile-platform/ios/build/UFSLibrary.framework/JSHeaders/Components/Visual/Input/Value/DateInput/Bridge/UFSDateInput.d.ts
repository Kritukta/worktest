/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { CommonInputProps, ErrorInputProps } from '../../../../../JSCore';
export declare const UFSDateInputType: any;
export interface Props extends CommonInputProps, ErrorInputProps {
    /**
     * Текст-заглушка, отображается в поле вывода если свойство `value` не задано.
     */
    placeholder?: string;
    /**
     * @private
     * Максимальное количество отображаемых символов в поле ввода, должно быть больше 0.
     */
    maxLength?: number;
    /**
     * Указанный текст будет выведен в виде подписи слева от поля ввода.
     */
    title?: string;
    /**
     * &#x1F534; **Deprecated**.
     *
     * Параметр, который показывает или скрывает разделитель в нижней части компонента.
     */
    underlined?: boolean;
    /**
    * Атрибут определяет вид разделителя. Допустимые значения содержатся в справочнике `UnderlineType`:
    * - `FULL` - разделитель будет во всю ширину компонента без отступов;
    * - `MARGINS` (значение по умолчанию) - отступ слева будет совпадать с отступом контента;
    * - `NONE` - разделитель отсутствует.
    */
    underlineType?: number;
    /**
     * Параметр указывает формат отображениям выбранного значения (например, `dd.MM.yyyy`).
     */
    format?: string;
    /**
     * Параметр устанавливает локаль календаря, может принимать значения: `ru` и `en`.
     */
    locale?: string;
    /**
     * Параметр используется для изменения типа информации отображаемого компонентом.
     * Принимает одно из значений справочника `DateInputTypes`:
     * - `DAY_PICKER`;
     * - `MONTH_PICKER`;
     * - `TIME_INPUT`;
     * - `MONTH_ONLY_PICKER`;
     * - `DAY_MONTH_PICKER`;
     * - `DAY_TIME_PICKER`.
     */
    dateType?: number;
    /**
     * Параметр указывает минимальное допустимое значение даты, которое возможно выбрать.
     */
    min?: Date;
    /**
     * Параметр указывает максимальное допустимое значение даты, которое возможно выбрать.
     */
    max?: Date;
    /**
     * @private
     * Вызывается каждый раз, когда поле становится активным.
     */
    onFocus?: () => void;
    /**
     * @private
     * Вызывается каждый раз, когда поле выходит из активного состояния.
     */
    onBlur?: () => void;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `HintIcon`(к компоненту будет применено автоматическое позиционирование)
     */
    children?: ReactNode;
}
export interface PublicProps extends Props {
    /**
     * Значение, отображаемое в поле.
     *
     * Может быть использовано как для задания первоначального значения, так и для последующего контроля над содержимым.
     *
     * Если значение не задано, то в поле будет показан `placeholder`.
     */
    value?: Date;
    /**
     * Событие, которое вызывается каждый раз при изменении значения компонента.
     */
    onChange?: (value: Date) => void;
    /**
     * Событие, которое вызывается каждый раз, когда поповер отображается или скрывается
     * в интерфейсе.
     */
    onVisibilityChange?: (calendarActive: boolean) => void;
}
export interface PrivateProps extends Props {
    value?: string;
    onChange?: (event: DateInputNativeEvents) => void;
    onVisibilityChange?: (event: DateInputNativeEvents) => void;
}
export interface DateInputNativeEvents {
    nativeEvent: {
        calendarActive: boolean;
        value: string;
    };
}
/**
 * Компонент DateInput позволяет выбирать дату и/или время, используя набор
 * вращающихся списков, их количество и контент зависит от типа, указанного
 * в качестве параметра `dateType`. Интерактивным элементом является иконка,
 * клик по которой приведет к появлению поповера с пикером для выбора даты.
 *
 * <br/><br/>
 *
 * __Known issues:__ `DateInput` не работает внутри `Popover`, либо других всплывающих форм,
 * приводящих к показу нативного модального окна или поповера.
 * @category Visual/Input
 */
export default class UFSDateInputManager extends Component<PublicProps, {}> {
    componentWillUpdate(nextProps: PublicProps, nextState: Object): void;
    onChange: (event: DateInputNativeEvents) => void;
    onVisibilityChange: (event: DateInputNativeEvents) => void;
    render(): JSX.Element;
}
