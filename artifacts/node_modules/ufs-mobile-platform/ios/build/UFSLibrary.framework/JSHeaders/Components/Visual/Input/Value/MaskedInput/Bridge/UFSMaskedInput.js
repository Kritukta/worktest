var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import React, { Component } from 'react';
import ReactNative, { LayoutAnimation, UIManager, requireNativeComponent } from 'react-native';
import { renderHintIcons } from '../../../../HintIcon/HintIcon/Bridge/UFSHintIcon';
import { renderInputLeftContainer } from '../../Container/InputLeftContainer/Bridge/UFSInputLeftContainer';
import { renderInputRightContainer } from '../../Container/InputRightContainer/Bridge/UFSInputRightContainer';
/**
 * Компонент предназначен для ввода текстовых или числовых данных и их отображения по заданной маске.
 *
 * <br/>
 * Введенные пользователем данные хранятся в неформатированном виде.
 * ##### Размещение
 * При размещении в платформенных контейнерах(`SplitPanel`, `Popover`) будет
 * работать функция автоматического скролла при появлении и скрытии клавиатуры.
 *
 * ##### Методы
 * 1. dismissKeyboard()
 *
 * <br/>
 *
 * Принудительно скрывает клавиатуру.
 * @category Visual/Input
 */
export default class UFSMaskedInputManager extends Component {
    constructor() {
        super(...arguments);
        this.onChange = (event) => {
            if (!this.props.onChange) {
                return;
            }
            this.props.onChange(event.nativeEvent.value);
        };
        /**
         * Принудительно скрывает клавиатуру.
         */
        this.dismissKeyboard = () => {
            UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.UFSMaskedInputView.Commands.dismissKeyboard, []);
        };
    }
    componentWillUpdate(nextProps, nextState) {
        if (nextProps.hasError !== this.props.hasError || nextProps.hasWarning !== this.props.hasWarning) {
            LayoutAnimation.easeInEaseOut();
        }
    }
    render() {
        return (React.createElement(UFSMaskedInput, __assign({}, this.props, {onChange: this.onChange}), 
            renderInputLeftContainer(this.props.children), 
            renderInputRightContainer(this.props.children), 
            renderHintIcons(this.props.children, 'MaskedInput', 1)));
    }
}
const UFSKeyboardType = UIManager.UFSMaskedInputView.Constants;
const UFSMaskedInput = requireNativeComponent('UFSMaskedInputView');
export { UFSKeyboardType as UFSKeyboardType };
//# sourceMappingURL=UFSMaskedInput.js.map