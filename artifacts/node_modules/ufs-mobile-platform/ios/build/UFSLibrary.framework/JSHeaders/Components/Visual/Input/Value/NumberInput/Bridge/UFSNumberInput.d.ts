/// <reference types="react-native" />
/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
import { CommonInputProps, ErrorInputProps, FocusInputProps, KeyboardInputProps, AutoFocusInputProps, LengthInputProps } from '../../../../../JSCore';
export interface NumberInputEvent {
    nativeEvent: {
        value?: string;
    };
}
export interface Props extends CommonInputProps, ErrorInputProps, FocusInputProps, KeyboardInputProps, AutoFocusInputProps, LengthInputProps {
    /**
     * Текст единицы измерения, отображается справа от поля ввода.
     * Пример значения: «Рубль РФ»
     */
    currency?: string;
    /**
     * Количество знаков после запятой.
     *
     * Общее число значимых цифр не может превышать 15. В случае превышения, данное свойство будет уменьшено.
     *
     * По умолчанию 2.
     */
    fractionalDigitsCount?: number;
    /**
     * Текст названия, отображаемого слева от поля ввода.
     */
    title?: string;
    /**
     * &#x1F534; **Deprecated**.
     *
     * Определяет надо ли показывать разделитель в нижней части компонента.
     *
     * По умолчанию `true`.
     */
    underlined?: boolean;
    /**
     * Атрибут определяет вид разделителя. Допустимые значения содержатся в справочнике `UnderlineType`:
     * - `FULL` - разделитель будет во всю ширину компонента без отступов;
     * - `MARGINS` (значение по умолчанию) - отступ слева будет совпадать с отступом контента;
     * - `NONE` - разделитель отсутствует.
     */
    underlineType?: number;
    /**
    * Атрибут позволяет добавлять кнопку очистки поля. В случае `true`, кнопка отображается, когда поле
    * активное и в нем есть хотя бы один символ.
    */
    clearButtonVisibility?: boolean;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `HintIcon`(к компоненту будет применено автоматическое позиционирование)
     * - `InputRightContainer`
     */
    children?: ReactNode;
}
export interface PublicProps extends Props {
    /**
     * Значение, отображаемое в поле ввода.
     *
     * Может быть использовано как для задания первоначального значения, так и для последующего контроля над содержимым.
     */
    value?: number;
    /**
     * Вызывается при изменении значения в поле ввода. Может получить на вход `null` если в поле ничего не набрано
     */
    onChange?: (value: number | null) => void;
}
export interface PrivateProps extends Props {
    value?: string;
    onChange?: (event: NumberInputEvent) => void;
}
/**
 * Компонент предназначен для ввода числовой информации или сумм.
 *
 * <br/><br/>
 *
 * Точка также преобразуется в запятую. Тысячные разряды автоматически разделяются пробелом.
 * При потере фокуса значение автоматически дополняется нулями после запятой.
 * По умолчанию количество знаков равно двум.
 *
 * <br/>
 * Чтобы отключить автодополнение нулями и разрешить вводить только целые числа,
 * необходимо задать свойство `fractionalDigitsCount` со значением 0.
 * ##### Размещение
 * При размещении в платформенных контейнерах(`SplitPanel`, `Popover`) будет
 * работать функция автоматического скролла при появлении и скрытии клавиатуры.
 *
 * ##### Методы
 * 1. dismissKeyboard()
 *
 * <br/>
 *
 * Принудительно скрывает клавиатуру.
 * @category Visual/Input
 */
export default class UFSNumberInputManager extends Component<PublicProps, {}> {
    static defaultProps: {
        value: number;
        fractionalDigitsCount: number;
        maxLength: number;
        currency: string;
    };
    value: number;
    stringValue: string;
    componentWillUpdate(nextProps: PublicProps, nextState: Object): void;
    onChange: (event: NumberInputEvent) => void;
    /**
     * Принудительно скрывает клавиатуру.
     */
    dismissKeyboard: () => void;
    render(): JSX.Element;
}
