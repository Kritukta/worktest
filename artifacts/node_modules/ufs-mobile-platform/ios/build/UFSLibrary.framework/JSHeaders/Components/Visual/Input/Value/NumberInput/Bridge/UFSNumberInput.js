var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import React, { Component } from 'react';
import ReactNative, { LayoutAnimation, UIManager, requireNativeComponent } from 'react-native';
import { renderHintIcons } from '../../../../HintIcon/HintIcon/Bridge/UFSHintIcon';
import { renderInputRightContainer } from '../../Container/InputRightContainer/Bridge/UFSInputRightContainer';
/**
 * Компонент предназначен для ввода числовой информации или сумм.
 *
 * <br/><br/>
 *
 * Точка также преобразуется в запятую. Тысячные разряды автоматически разделяются пробелом.
 * При потере фокуса значение автоматически дополняется нулями после запятой.
 * По умолчанию количество знаков равно двум.
 *
 * <br/>
 * Чтобы отключить автодополнение нулями и разрешить вводить только целые числа,
 * необходимо задать свойство `fractionalDigitsCount` со значением 0.
 * ##### Размещение
 * При размещении в платформенных контейнерах(`SplitPanel`, `Popover`) будет
 * работать функция автоматического скролла при появлении и скрытии клавиатуры.
 *
 * ##### Методы
 * 1. dismissKeyboard()
 *
 * <br/>
 *
 * Принудительно скрывает клавиатуру.
 * @category Visual/Input
 */
export default class UFSNumberInputManager extends Component {
    constructor() {
        super(...arguments);
        this.value = null;
        this.stringValue = "";
        this.onChange = (event) => {
            this.stringValue = event.nativeEvent.value;
            var stringValue = this.stringValue.replace(',', '.');
            stringValue = stringValue.replace(' ', '');
            if (stringValue.length > 1) {
                if (stringValue[stringValue.length - 1] == '.') {
                    stringValue = stringValue.replace('.', '.0');
                }
            }
            var number = parseFloat(stringValue);
            if (stringValue === '' || isNaN(number)) {
                number = null;
            }
            this.value = number;
            this.props.onChange(number);
        };
        /**
         * Принудительно скрывает клавиатуру.
         */
        this.dismissKeyboard = () => {
            UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.UFSNumberInputView.Commands.dismissKeyboard, []);
        };
    }
    componentWillUpdate(nextProps, nextState) {
        if (nextProps.hasError !== this.props.hasError || nextProps.hasWarning !== this.props.hasWarning) {
            LayoutAnimation.easeInEaseOut();
        }
    }
    render() {
        const props = Object.assign({}, this.props);
        delete props.value;
        if (this.value != this.props.value) {
            this.stringValue = this.props.value.toString().replace('.', ',');
        }
        if (this.props.value < 0) {
            this.stringValue = '';
        }
        var { maxLength, fractionalDigitsCount } = props;
        if (maxLength > 16) {
            fractionalDigitsCount -= maxLength - 16;
            maxLength = 16;
        }
        fractionalDigitsCount = Math.max(fractionalDigitsCount, 0);
        while (maxLength - fractionalDigitsCount - 1 < 1) {
            if (fractionalDigitsCount > 0) {
                fractionalDigitsCount--;
            }
            else {
                maxLength++;
            }
        }
        props.maxLength = maxLength;
        props.fractionalDigitsCount = fractionalDigitsCount;
        return (React.createElement(UFSNumberInput, __assign({}, props, {value: this.stringValue, onChange: this.props.onChange ? this.onChange : undefined}), 
            renderInputRightContainer(this.props.children), 
            renderHintIcons(this.props.children, 'NumberInput', 1)));
    }
}
UFSNumberInputManager.defaultProps = {
    value: null,
    fractionalDigitsCount: 2,
    maxLength: 16,
    currency: ""
};
const UFSNumberInput = requireNativeComponent('UFSNumberInputView');
//# sourceMappingURL=UFSNumberInput.js.map