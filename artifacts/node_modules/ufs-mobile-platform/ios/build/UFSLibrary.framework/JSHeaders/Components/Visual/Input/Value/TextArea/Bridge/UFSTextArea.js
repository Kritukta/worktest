var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import React, { Component } from 'react';
import ReactNative, { UIManager, LayoutAnimation, requireNativeComponent } from 'react-native';
import { renderHintIcons } from '../../../../HintIcon/HintIcon/Bridge/UFSHintIcon';
/**
 * Компонент предназначен для многострочного ввода текстовой или числовой информации.
 * ##### Размещение
 * При размещении в платформенных контейнерах(`SplitPanel`, `Popover`) будет
 * работать функция автоматического скролла при появлении и скрытии клавиатуры.
 *
 * ##### Методы
 * 1. dismissKeyboard()
 *
 * <br/>
 *
 * Принудительно скрывает клавиатуру.
 * @category Visual/Input
 */
export default class UFSTextAreaManager extends Component {
    constructor() {
        super(...arguments);
        this.forceUpdateValue = (value) => {
            this.instance.setNativeProps({ value });
        };
        this.onChange = (event) => {
            this.oldValue = this.props.value;
            this.props.onChange && this.props.onChange(event.nativeEvent.value);
            this.forceUpdate();
        };
        /**
         * Принудительно скрывает клавиатуру.
         */
        this.dismissKeyboard = () => {
            UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.UFSTextAreaView.Commands.dismissKeyboard, []);
        };
        this.onComponentRef = (component) => {
            this.instance = component;
        };
    }
    componentDidUpdate() {
        let value = this.props.value;
        if (this.oldValue == value) {
            this.forceUpdateValue(value);
        }
    }
    componentWillUpdate(nextProps, nextState) {
        LayoutAnimation.easeInEaseOut();
    }
    render() {
        return (React.createElement(UFSTextArea, __assign({ref: this.onComponentRef}, this.props, {onChange: this.onChange}), renderHintIcons(this.props.children, 'TextInput', 1)));
    }
}
const UFSTextArea = requireNativeComponent('UFSTextAreaView');
//# sourceMappingURL=UFSTextArea.js.map