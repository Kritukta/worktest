/// <reference types="react-native" />
/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
import { CommonInputProps, TextInputProps, ErrorInputProps, FocusInputProps, KeyboardInputProps, AutoFocusInputProps, LengthInputProps } from '../../../../../JSCore';
export interface TextInputEvent {
    nativeEvent: {
        value: string;
    };
}
export interface Props extends CommonInputProps, ErrorInputProps, FocusInputProps, KeyboardInputProps, AutoFocusInputProps, LengthInputProps {
    /**
     * Тип клавиатуры из словаря KeyboardType. Доступные значения:
     * - `ASCII` - клавиатура, содержащая ASCII символы (значение по умолчанию);
     * - `Email` - клавиатура с символами, оптимизированными для ввода email;
     * - `Phone` - телефонная панель(содержит символы 0-9, *, #);
     * - `Default` - стандартная клавиатура;
     * - `Password` - клавиатура, содержащая ASCII символы без возможности смены языка. **Deprecated**.
     */
    keyboardType?: number;
    /**
     * Текст названия, отображаемого слева от поля ввода.
     */
    title?: string;
    /**
     * &#x1F534; **Deprecated**.
     *
     * Определяет надо ли показывать разделитель в нижней части компонента.
     *
     * По умолчанию `true`.
     */
    underlined?: boolean;
    /**
     * Атрибут определяет вид разделителя. Допустимые значения содержатся в справочнике `UnderlineType`:
     * - `FULL` - разделитель будет во всю ширину компонента без отступов;
     * - `MARGINS` (значение по умолчанию) - отступ слева будет совпадать с отступом контента;
     * - `NONE` - разделитель отсутствует.
     */
    underlineType?: number;
    /**
    * Атрибут позволяет добавлять кнопку очистки поля. В случае `true`, кнопка отображается, когда поле
    * активное и в нем есть хотя бы один символ.
    */
    clearButtonVisibility?: boolean;
    /**
     * Переводит компонент в защищённый режим ввода (вводимые символы отображаются как *).
     *
     * По умолчанию `false`.
     */
    secure?: boolean;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `HintIcon`(к компоненту будет применено автоматическое позиционирование)
     * - `InputLeftContainer`
     * - `InputRightContainer`
     */
    children?: ReactNode;
}
export interface PublicProps extends Props, TextInputProps {
}
export interface PrivateProps extends Props {
    onChange?: (event: TextInputEvent) => void;
}
/**
 * Компонент предназначен для ввода текстовых или числовых данных.
 * ##### Размещение
 * При размещении в платформенных контейнерах(`SplitPanel`, `Popover`) будет
 * работать функция автоматического скролла при появлении и скрытии клавиатуры.
 *
 * ##### Методы
 * 1. dismissKeyboard()
 *
 * <br/>
 *
 * Принудительно скрывает клавиатуру.
 * @category Visual/Input
 */
export default class UFSTextInputManager extends Component<PublicProps, {}> {
    instance: any;
    oldValue: string;
    componentWillUpdate(nextProps: PublicProps, nextState: Object): void;
    componentDidUpdate(): void;
    forceUpdateValue: (value: string) => void;
    onChange: (event: TextInputEvent) => void;
    /**
     * Принудительно скрывает клавиатуру.
     */
    dismissKeyboard: () => void;
    onComponentRef: (component: any) => void;
    render(): JSX.Element;
}
export declare const UFSKeyboardType: any;
export declare const UFSReturnKeyType: any;
