/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { Coordinate } from '../../../../JSCore';
import { UFSError, ErrorUserInfo } from '../../../../JSCore/Common/UFSError';
export interface MarkerEvent {
    nativeEvent: {
        error: ErrorUserInfo;
    };
}
export interface Props {
    /**
     * Координата или адрес метки.
     * При использовании адреса результат геокодирования будет закеширован на время жизни приложения.
     */
    location: Coordinate | string;
    /**
     * Текст балуна, отображаемый в выбранном состоянии.
     */
    title?: string;
    /**
     * Определяет выбранное состояние метки.
     * При значении `true` у метки будет показан балун с текстом, указанным в свойстве `title`.
     */
    selected?: boolean;
    /**
     * Идентификатор метки.
     * Может использоваться для привязки точки маршрута к маркеру.
     */
    id?: string;
    /**
     * Вызывается при нажатии на метку.
     */
    onClick?: () => void;
    /**
     * Вызывается при нажатии на иконку закрытия балуна метки.
     */
    onClose?: () => void;
    /**
     * @private
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * @private
     * Дочерние компоненты не поддерживаются.
     */
    children?: ReactNode;
}
export interface PublicProps extends Props {
    /**
     * Вызывается при ошибках геокодирования адреса. Возможные ошибки:
     * - не найдено ни одной координаты для заданного адреса;
     * - найдено множество (> 1) координат для заданного адреса;
     * - ошибка геокодирования адреса;
     */
    onError?: (error: UFSError) => void;
}
export interface PrivateProps extends Props {
    onError?: (event: MarkerEvent) => void;
}
/**
 * Используется для обозначения метки на карте.
 *
 * <br/>
 *
 * Метка может находиться в двух состояниях: выбранном или не выбранном.
 * Если метка находится в выбранном состоянии, то у нее отображается балун с переданным контентом.
 *
 * <br/><br/>
 *
 * __Known issues:__ Поддерживается только одна метка на карте в выбранном состоянии.
 * Корректное поведение отображения балуна с контентом не гарантируется при нарушении данного условия.
 * @category Visual/Map
 */
export default class UFSMarkerManager extends Component<PublicProps, {}> {
    onError: (event: MarkerEvent) => void;
    render(): JSX.Element;
}
