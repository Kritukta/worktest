/// <reference types="react" />
import React, { Component, ReactNode } from 'react';
import { CommonOutputProps } from '../../../../JSCore';
export interface Props extends React.Props<UFSLabelManager>, CommonOutputProps {
    /**
     * Заголовок элемента.
     * Свойство может содержать символы переноса строки.
     * Свойство является обязательным.
     */
    text?: string;
    /**
     * В случае значения `true` элемент занимает всю ширину родительского компонента.
     * В случае `false` - ширина компонента будет минимально необходимой для отображения заголовка и текста.
     * Значение по умолчанию - `false`.
     */
    block?: boolean;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `Text`
     * - `HintIcon`
     *
     * При размещении `HintIcon` по умолчанию применяется его автопозиционирование внутри компонента.
     * Для упревления привязкой автопозиционирования необходимо использовать свойство autoPositionIndex компонента `HintIcon`. Досутпные значения:
     * - `0` - привязка к Label (значение по умолчанию)
     * - `1` - привязка к тексту
     *
     */
    children?: ReactNode;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
}
export interface PrivateProps extends Props {
    header?: string;
    label?: string;
    oneline: boolean;
    hasLabelHintIcon: boolean;
    hasTitleHintIcon: boolean;
}
/**
 * Компонент используется для коротких текстовых пояснений и подсказок, состоит из заголовка и текста.
 *
 * <br/>
 *
 * ##### Использование
 * Заголовок определяется свойством `text`, текст определяется дочерним элементом `Text`.
 * Заголовок и текст могут содержать символы переноса строки.
 * Свойство `block` отображает компонент во всю ширину родителя.
 * Заголовок отображается серым цветом, под ним располагается текст.
 *
 * <br/>
 *
 * ##### Особенности
 * Компонент отображает только дочерние компоненты `Text`, другие дочерние элементы игнорируются.
 * Несколько дочерних компонентов `Text` объединяются с пробелом в качестве разделителя.
 * Свойства и стили компонентов Text игнорируются.
 * @category Visual/Output
 */
export default class UFSLabelManager extends Component<Props, {}> {
    findText: (children: JSX.Element[]) => string;
    text: (entity: React.ReactElement<any>) => string | React.ReactElement<any>;
    render(): JSX.Element;
}
