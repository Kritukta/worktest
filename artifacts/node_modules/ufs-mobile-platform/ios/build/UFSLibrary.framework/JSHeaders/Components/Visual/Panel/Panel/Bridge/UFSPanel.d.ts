/// <reference types="react" />
/// <reference types="react-native" />
import React, { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export declare const UFSPanelType: any;
export interface Props extends React.Props<UFSPanelManager> {
    /**
     * Тип иконки из словаря PanelType. Доступные значения:
     * - `ERROR_BOX` - панель отображения ошибок;
     * - `WARNING_BOX` - панель отображения предупреждений.
     */
    type: number;
    /**
     * Заголовок, информирующий о характере возникшей проблемы.
     */
    header?: string;
    /**
     * Атрибут, устанавливающий признак наличия иконки в хедере.
     */
    hasIcon?: boolean;
    /**
     * В качестве значения принимает JSX-тег типа `Button` для отображения кнопки в заголовке панели.
     */
    headerMedia?: JSX.Element;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * В качестве дочерних компонентов принимаются:
     * - `PanelHeaderMedia`. Поведение при использовании `PanelHeaderMedia` аналогично свойству `headerMedia`.
     * - Прочие JSX-теги, которые будут отображаться внутри панели.
     */
    children?: ReactNode;
}
/**
 * Компонент предназначен для информирования пользователя о возникшей проблеме и способах ее решения.
 * Имеет два типа отображения.
 *
 * Первый предназначен для вывода ошибок, препятствующих дальнейшему прохождения процесса.
 *
 * Второй – для вывода предупреждений (ошибок, носящих некритический характер).
 * @category Visual
 */
export default class UFSPanelManager extends Component<Props, {}> {
    private panelHeaderMedia;
    private children;
    componentWillMount(): void;
    componentWillReceiveProps(nextProps: Props): void;
    private handlePropsUpdate;
    private headerMedia;
    private renderHeaderMedia;
    render(): JSX.Element;
}
/**
 * Тип компонента для добавления в качестве дочернего.
 * @category Visual/Panel
 */
export declare class UFSPanelHeaderMedia extends Component<{}, {}> {
    render(): JSX.Element;
}
