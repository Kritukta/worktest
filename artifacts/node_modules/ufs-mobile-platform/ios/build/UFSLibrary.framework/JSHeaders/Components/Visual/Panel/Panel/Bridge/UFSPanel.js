import React, { Component } from 'react';
import { UIManager, View, requireNativeComponent } from 'react-native';
import UFSPanelHeader from '../../PanelHeader/Bridge/UFSPanelHeader';
export const UFSPanelType = UIManager.UFSPanelView.Constants;
const UFSButtonType = UIManager.UFSButtonView.Constants;
/**
 * Компонент предназначен для информирования пользователя о возникшей проблеме и способах ее решения.
 * Имеет два типа отображения.
 *
 * Первый предназначен для вывода ошибок, препятствующих дальнейшему прохождения процесса.
 *
 * Второй – для вывода предупреждений (ошибок, носящих некритический характер).
 * @category Visual
 */
export default class UFSPanelManager extends Component {
    constructor() {
        super(...arguments);
        this.handlePropsUpdate = (props) => {
            this.panelHeaderMedia = null;
            this.children = React.Children.map(props.children, (child) => {
                if (child) {
                    if (child.type === UFSPanelHeaderMedia) {
                        this.panelHeaderMedia = child;
                    }
                    else {
                        return child;
                    }
                }
            });
        };
        this.headerMedia = () => {
            if (this.panelHeaderMedia) {
                return this.panelHeaderMedia.props.children;
            }
            else {
                return this.props.headerMedia;
            }
        };
        this.renderHeaderMedia = () => {
            const headerMedia = this.headerMedia();
            if (React.isValidElement(headerMedia)) {
                return React.cloneElement(headerMedia, {
                    type: UFSButtonType.NARROW
                });
            }
            else {
                return headerMedia;
            }
        };
    }
    componentWillMount() {
        this.handlePropsUpdate(this.props);
    }
    componentWillReceiveProps(nextProps) {
        this.handlePropsUpdate(nextProps);
    }
    render() {
        return (React.createElement(UFSPanel, {type: this.props.type, style: this.props.style, testID: this.props.testID}, 
            React.createElement(UFSPanelHeader, {header: this.props.header, hasIcon: this.props.hasIcon}, this.renderHeaderMedia()), 
            React.createElement(View, null, this.children)));
    }
}
/**
 * Тип компонента для добавления в качестве дочернего.
 * @category Visual/Panel
 */
export class UFSPanelHeaderMedia extends Component {
    render() {
        return null;
    }
}
const UFSPanel = requireNativeComponent('UFSPanelView');
//# sourceMappingURL=UFSPanel.js.map