/// <reference types="react" />
/// <reference types="react-native" />
import React, { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export declare const UFSPopoverType: any;
export declare const UFSPopoverPosition: any;
export interface Props extends React.Props<UFSPopoverManager> {
    /**
     * Определяет видимое состояние поповера: показан или нет.
     * Рендеринг дочерних компонентов происходит при смене флага с `false` на `true`.
     * Дочерние компоненты выгружаются из памяти при смене флага с `true` на `false`.
     *
     * Изначально должно быть задано как `false` - поповер не может быть показан при первом рендере.
     * Нельзя единовременно изменять это значение у нескольких поповеров, в данном случае возникает неопределенное поведение.
     */
    opened?: boolean;
    /**
     * Вызывается при нажатиях вне поповера.
     */
    onOutsideTap?: () => void;
    /**
     * Тип поповера из словаря PopoverType. Доступные значения:
     * - `NARROW` - поповер с шириной в 320 pt (значение по умолчанию);
     * - `WIDE` - поповер с шириной в 375 pt;
     */
    type?: number;
    /**
     * Ref-ссылка на компонент, из которого будет показываться поповер.
     */
    target: React.Ref<any>;
    /**
     * Массив предпочитаемых позиций поповера из справочника PopoverPosition. Доступные значения для отображения:
     * - `TOP` - сверху относительно компонента, переданного в target;
     * - `RIGHT` - справа относительно компонента, переданного в target;
     * - `LEFT` - слева относительно компонента, переданного в target;
     * - `BOTTOM` - снизу относительно компонента, переданного в target;
     *
     * По умолчанию позиция выбирается автоматически (это равносительно передачи массива, содержащего все позиции).
     * Если указать в массиве несколько позиций, то будет выбрана любая из указанных.
     * Если не будет возможности расположить поповер так, как указано в этом свойстве,
     * то автоматически будет выбрана другая доступная позиция.
     */
    position?: number[];
    /**
     * Стили React.
     *
     * Поддерживается только свойство `height`.
     * По умолчанию высота вычисляется на основе контента поповера, но при использовании `SplitPanel` внутри поповера данное свойство является обязательным.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Поддерживаются произвольные дочерние компоненты, но при использовании `SplitPanel` в качестве дочернего компонента накладываются дополнительные ограничения:
     * - высота поповера должен быть указан явно с помощью свойства `style`;
     * - внутри `SplitPanel` разрешено размещать только компонент `ContentPanel`;
     */
    children?: ReactNode;
}
export interface PrivateProps extends Props {
    popoverHeight?: number;
    popoverPosition?: number[];
}
/**
 * Используется для вывода произвольного содержимого во всплывающем окне.
 * Например, когда на экране необходимо показать дополнительную информацию: фильтры, добавление задач, просмотр информации.
 *
 * <br/>
 *
 * Компонент поддерживает `SplitPanel` без секции `AccessoryPanel` внутри себя для осуществления навигации по контенту.
 *
 * ##### Особенности
 * При использовании в `SplitPanel` из-за особенностей панели навигации следует учитывать,
 * что поповер в `SplitPanel`, которые были "закрыты" очередными `SplitPanel` не удаляются из памяти.
 * Привязка флага видимости поповеров на нескольких `SplitPanel` к одному полю стора может привести к неопределенному поведению.
 * @category Visual
 */
export default class UFSPopoverManager extends Component<Props, {}> {
    private target;
    componentWillReceiveProps(nextProps: Props): void;
    renderPopoverContentIfNeeded: () => JSX.Element;
    render(): JSX.Element;
}
