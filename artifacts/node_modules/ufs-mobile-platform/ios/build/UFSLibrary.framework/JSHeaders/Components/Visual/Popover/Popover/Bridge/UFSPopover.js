import React, { Component } from 'react';
import ReactNative, { UIManager, requireNativeComponent } from 'react-native';
import UFSPopoverContent from '../../PopoverContent/Bridge/UFSPopoverContent';
export const UFSPopoverType = UIManager.UFSPopoverView.Constants.Type;
export const UFSPopoverPosition = UIManager.UFSPopoverView.Constants.Position;
/**
 * Используется для вывода произвольного содержимого во всплывающем окне.
 * Например, когда на экране необходимо показать дополнительную информацию: фильтры, добавление задач, просмотр информации.
 *
 * <br/>
 *
 * Компонент поддерживает `SplitPanel` без секции `AccessoryPanel` внутри себя для осуществления навигации по контенту.
 *
 * ##### Особенности
 * При использовании в `SplitPanel` из-за особенностей панели навигации следует учитывать,
 * что поповер в `SplitPanel`, которые были "закрыты" очередными `SplitPanel` не удаляются из памяти.
 * Привязка флага видимости поповеров на нескольких `SplitPanel` к одному полю стора может привести к неопределенному поведению.
 * @category Visual
 */
export default class UFSPopoverManager extends Component {
    constructor() {
        super(...arguments);
        this.renderPopoverContentIfNeeded = () => {
            if (!this.props.opened) {
                return null;
            }
            return (React.createElement(UFSPopoverContent, null, this.props.children));
        };
    }
    componentWillReceiveProps(nextProps) {
        if (nextProps.target) {
            try {
                this.target = ReactNative.findNodeHandle(nextProps.target);
            }
            catch (error) {
                this.target = error.message;
            }
        }
    }
    render() {
        const popoverHeight = this.props.style ? this.props.style.height : undefined;
        return (React.createElement(UFSPopover, {target: this.target, opened: this.props.opened, onOutsideTap: this.props.onOutsideTap, type: this.props.type, popoverHeight: popoverHeight, popoverPosition: this.props.position, testID: this.props.testID}, this.renderPopoverContentIfNeeded()));
    }
}
const UFSPopover = requireNativeComponent('UFSPopoverView');
//# sourceMappingURL=UFSPopover.js.map