/// <reference types="react-native" />
/// <reference types="react" />
import React, { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export interface Props {
    /**
     * Текстовый ключ, присвоенный элементу.
     */
    value?: string;
    /**
     * Подпись. Следует всегда явно указывать значение этому свойству.
     */
    label?: string;
    /**
     * Флаг состояния недоступности для пользовательского ввода для компонента.
     */
    disabled?: boolean;
    /**
     * @private
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Функция, которая выполняется при изменении значения группы и соответствия нового значения группы значению кнопки.
     */
    onChange?: () => void;
    /**
     * Атрибут, позволяющий отключить подчеркивание у элемента.
     */
    underlined?: boolean;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * @private
     */
    children?: ReactNode;
}
export interface PrivateProps extends Props {
    /**
     * The function is executed by selecting component.
     * @private
     */
    onRadioButtonChange?: (event: React.ReactElement<any>) => void;
}
/**
 * Компонент используется только внутри RadioGroup
 * @category Visual/RadioGroup
 */
export default class UFSRadioButtonManager extends Component<Props, {}> {
    static defaultProps: {
        label: string;
    };
    onChange: (event: React.ReactElement<any>) => void;
    render(): JSX.Element;
}
