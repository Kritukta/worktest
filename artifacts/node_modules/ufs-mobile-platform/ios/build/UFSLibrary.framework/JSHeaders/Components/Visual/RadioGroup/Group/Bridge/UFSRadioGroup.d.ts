/// <reference types="react-native" />
/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export interface RadioGroupEvent {
    nativeEvent: {
        index: number;
        value: string;
    };
}
export interface Props {
    /**
     * Ключ выбранного элемента. Это свойство используется для программного изменения выбранного элемента.
     */
    value?: string;
    /**
     * Подпись. Следует всегда явно указывать значение этому свойству.
     */
    label?: string;
    /**
     * Флаг состояния недоступности для пользовательского ввода для компонента.
     */
    disabled?: boolean;
    /**
     * @private
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * В качестве дочерних компонентов принимается только `RadioButton`.
     */
    children?: ReactNode;
}
export interface PublicProps extends Props {
    /**
     * Функция, которая выполняется при выборе элемента.
     * В качестве аргументов передаются индекс выбранного элемента и его ключ.
     */
    onChange?: (index: number, value: string) => void;
}
export interface PrivateProps extends Props {
    /**
     * @private
     */
    onChange?: (event: RadioGroupEvent) => void;
}
/**
 * Компонент используется для предоставления пользователю исключающего выбора одного из нескольких вариантов.
 *
 * Ключ выбранного по умолчанию элемента указывается в свойстве `value`.
 * Значение свойства должно совпадать со значением нужного дочернего элемента `RadioButton`.
 * Если `value` не установлен, тогда ни один элемент не будет выбран.
 *
 * Высота данного компонента рассчитывается автоматически в зависимости от высоты дочерних компонентов.
 * @category Visual/RadioGroup
 */
export default class UFSRadioGroupManager extends Component<PublicProps, {}> {
    onChange: (event: RadioGroupEvent) => void;
    render(): JSX.Element;
}
