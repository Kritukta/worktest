/// <reference types="react" />
import { UFSSplitPanelNavigationWrapper } from '../../SplitPanel';
/**
 * Используется как дополнительная область вывода контента.
 * ##### Навигация
 * Компонент поддерживает навигацию по дочерним компонентам. Навигация осуществляется путем смены страниц(компонентов `Page`).
 * В качестве дочерних компонентов должны использоваться только компоненты `Page`. Их порядок используется в навигации, нумерация начинается с 0.
 *
 * <br/><br/>
 *
 * Состояние навигационного стека хранится в redux-сторе, переходы по страницам осуществляются с помощью следующих action-creators:
 * 1. pushAccessory(nextPageId: number, panelId: string, pagePayload: IPagePayload): осуществляет переход на следующую страницу `AccessoryPanel`.
 * Параметр `nextPageId` - это номер следующей страницы (индекс `Page` в списке `children` у `AccessoryPanel`),
 * `panelId` - это идентификатор `SplitPanel`, в которой находится `AccessoryPanel`,
 * `pagePayload` - объект типа IPagePayload (опциональный параметр).
 * 2. popAccessory(panelId: string): осуществляет переход на предыдущую страницу `AccessoryPanel`.
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `AccessoryPanel`.
 * 3. popAccessoryToTop(panelId: string): осуществляет переход на первую страницу `AccessoryPanel`.
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `AccessoryPanel`.
 * 4. popAccessoryToPage(panelId: string, key: string): осуществляет переход на конкретную страницу `AccessoryPanel` по ключу.
 * Параметр `panelId` - это идентификатор `SplitPanel`, в которой находится `AccessoryPanel`,
 * `pageKey` - ключ конкретной страницы в стеке страниц.
 * @category Visual/SplitPanel
 */
export default class UFSAccessoryNavigationWrapper extends UFSSplitPanelNavigationWrapper {
    render(): JSX.Element;
}
