/// <reference types="react" />
import React, { Component, ReactNode } from 'react';
export interface Props extends React.Props<UFSSplitPanelManager>, OwnProps {
    /**
     * Идентификатор панели.
     *
     * Используется в методах `SplitPanelActions`(push/pop и тд.) для идентификации конкретной `SplitPanel` среди всего множества созданных.
     */
    id: string;
}
export interface OwnProps {
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `AccessoryPanel`
     * - `ContentPanel`
     */
    children?: ReactNode;
}
/**
 * Является основным контейнером для отображения контента в рамках прикладной разработки проекта.
 *
 * ##### Использование
 * Состоит из 2-ух дочерних компонентов-панелей `AccessoryPanel` и `ContentPanel`.
 * Относительное отображение компонентов `AccessoryPanel` и `ContentPanel` на экране достигается порядком расположения в родительском компоненте.
 * Первый компонент отображается слева относительно второго компонента.
 *
 * <br/><br/>
 *
 * Контент в `AccessoryPanel` и `ContentPanel` задается в соответсвии с требованиями дизайна мобильных приложений ЕФС (см. StyleGuide).
 *
 * ##### Особенности
 * Компонент использует redux-стор для хранения своего состояния, поэтому для корректной работы должен быть размещен внутри компонента `UFSProvider`.
 * @category Visual/SplitPanel
 */
export default class UFSSplitPanelManager extends Component<Props, {}> {
    render(): JSX.Element;
    childrenWithPanelIdProp(): React.ReactElement<any>[];
}
