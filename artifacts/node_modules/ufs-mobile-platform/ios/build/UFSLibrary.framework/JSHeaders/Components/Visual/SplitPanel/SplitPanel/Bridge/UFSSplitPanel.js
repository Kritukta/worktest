import React, { Component } from 'react';
import { requireNativeComponent } from 'react-native';
/**
 * Является основным контейнером для отображения контента в рамках прикладной разработки проекта.
 *
 * ##### Использование
 * Состоит из 2-ух дочерних компонентов-панелей `AccessoryPanel` и `ContentPanel`.
 * Относительное отображение компонентов `AccessoryPanel` и `ContentPanel` на экране достигается порядком расположения в родительском компоненте.
 * Первый компонент отображается слева относительно второго компонента.
 *
 * <br/><br/>
 *
 * Контент в `AccessoryPanel` и `ContentPanel` задается в соответсвии с требованиями дизайна мобильных приложений ЕФС (см. StyleGuide).
 *
 * ##### Особенности
 * Компонент использует redux-стор для хранения своего состояния, поэтому для корректной работы должен быть размещен внутри компонента `UFSProvider`.
 * @category Visual/SplitPanel
 */
export default class UFSSplitPanelManager extends Component {
    render() {
        const childrenWithProps = this.childrenWithPanelIdProp();
        return (React.createElement(UFSSplitPanel, {testID: this.props.testID}, childrenWithProps));
    }
    childrenWithPanelIdProp() {
        return React.Children.map(this.props.children, (child) => {
            return React.cloneElement(child, {
                panelId: this.props.id
            });
        });
    }
}
const UFSSplitPanel = requireNativeComponent('UFSSplitPanelView');
//# sourceMappingURL=UFSSplitPanel.js.map