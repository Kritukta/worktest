/// <reference types="react" />
/// <reference types="react-native" />
import { ISplitPanelChildStateList } from '../../../../JSCore/Common/UFSInterfaces';
import React, { ReactNode } from 'react';
import { ViewStyle, NavigationIOS } from 'react-native';
import { Store, Unsubscribe } from "redux";
import { Props as ChildPanelProps } from './UFSSplitPanelChildPanel';
import { UFSSplitPanelNavigationWrappedComponent } from './UFSSplitPanelNavigationWrapper';
export interface Props extends React.Props<UFSSplitPanelNavigationController> {
    children: ReactNode;
    panelId: string;
    navigator: NavigationIOS;
    registerChildComponent: (childComponent: UFSSplitPanelNavigationWrappedComponent) => void;
    unregisterChildComponent: () => void;
    showAutoBackButton?: boolean;
    style?: ViewStyle;
}
export interface SplitPanel {
    accessoryScenes: ISplitPanelChildStateList;
    contentScenes: ISplitPanelChildStateList;
}
export interface StoreContext {
    store: Store<any>;
}
export default class UFSSplitPanelNavigationController extends React.Component<Props, {}> implements UFSSplitPanelNavigationWrappedComponent {
    context: StoreContext;
    scenes: ISplitPanelChildStateList;
    children: ReactNode;
    isReady: boolean;
    isComponentMounted: boolean;
    initialId: number;
    unsubscribe: Unsubscribe;
    pushingTimeout: number;
    navigatorRef: any;
    private navEventsQueue;
    static contextTypes: {
        store: React.Validator<any>;
    };
    constructor(props: Props);
    _getScenes(splitPanel?: SplitPanel): ISplitPanelChildStateList;
    _getComponent(): React.ComponentClass<ChildPanelProps>;
    componentWillMount(): void;
    componentDidMount(): void;
    componentWillUnmount(): void;
    shouldComponentUpdate(nextProps: Object, nextState: Object): boolean;
    onNavigationPropsUpdate: (children?: ReactNode) => void;
    onNavigationReady: (navigatorRef: React.ReactInstance) => void;
    render(): JSX.Element;
    handleStoreUpdate(): void;
    processQueue: () => void;
}
