/// <reference types="react" />
/// <reference types="react-native" />
import React, { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export interface Props extends React.Props<UFSSplitPanelNavigationWrapper> {
    /**
     * Идентификатор панели.
     *
     * Свойство обязательное, но родительский компонент(`SplitPanel`) всегда его передает.
     * @private
     */
    panelId?: string;
    /**
     * Определяет надо ли автоматически добавлять кнопку `NavigationBackButton` в навигационный бар дочерних страниц.
     * Автоматически будет создана кнопка только в случае отсутствия `LeftPageHeader` у `Page`.
     *
     * По умолчанию `false`.
     */
    showAutoBackButton?: boolean;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `Page`
     *
     * ##### Особенности рендеринга `Page`
     * Поскольку `Page` вставляются внутрь в виде массива,
     * входящий в них ts/js-код выполняется в момент отрисовки `SplitPanel` за исключением элементов оформленных в виде отдельного компонента.
     *
     * Например, в случае вот такого кода:
     * ```javascript
     * <Page content={<ComponentInfo />}>
     *     {this.renderNavigationPanel()}
     * <Page>
     * ```
     * ```this.renderNavigationPanel()``` вызовется в момент рендеринга `SplitPanel`, а ComponentInfo будет создан только когда его надо будет вывести на экран.
     * Рендеринг же самого графического интерфейса в нативном коде происходит непосредственно перед выводом на экран.
     */
    children?: ReactNode;
    /**
     * Стили React.
     *
     * Поддерживается единственный стиль `backgroundColor` у `ContentPanel`.
     */
    style?: ViewStyle;
}
export interface UFSSplitPanelNavigationWrappedComponent {
    onNavigationPropsUpdate: (children?: ReactNode) => void;
    onNavigationReady?: (navigatorRef: React.ReactInstance) => void;
}
export default class UFSSplitPanelNavigationWrapper extends Component<Props, {}> {
    childComponents: UFSSplitPanelNavigationWrappedComponent[];
    static defaultProps: {
        showAutoBackButton: boolean;
    };
    constructor(props: Props);
    registerChildComponent: (childComponent: UFSSplitPanelNavigationWrappedComponent) => void;
    unregisterChildComponent: () => void;
    componentWillReceiveProps(nextProps: Props): void;
    componentDidMount(): void;
    shouldComponentUpdate(nextProps: Props, nextState: Object): boolean;
    defaultNavigatorProps(): {
        title: string;
        translucent: boolean;
        interactivePopGestureEnabled: boolean;
        navigationBarHidden: boolean;
        passProps: {
            children: ReactNode;
            registerChildComponent: (childComponent: UFSSplitPanelNavigationWrappedComponent) => void;
            unregisterChildComponent: () => void;
            panelId: string;
            showAutoBackButton: boolean;
            style: ViewStyle;
        };
    };
}
