/// <reference types="react" />
/// <reference types="react-native" />
import { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export interface Props {
    /**
     * При true будет отображена, при false тень будет скрыта. На отображение тени влияет свойство onPress.
     */
    hasShadow?: boolean;
    /**
     * Цвет тени. Формат совместим с элементами словаря `colors` из состава библиотеки. Также можно передавать
     * строки форматов `#RRGGBB` и `#RRGGBBAA`, где `R`, `G`, `B` и `A` значения красного, зеленого,
     * синего и альфа каналов соответственно в hex-формате.
    */
    shadowColor?: string;
    /**
     * Обработчик `onPress` вызывается при нажатии на виджет (срабатывает при отпускании). Если вместе
     * с обработчиком задано свойство `hasShadow`, то в нажатом состоянии тень отображаться не будет.
    */
    onPress?: () => void;
    /**
    * Дочерние компоненты могут быть произвольного типа.
    */
    children?: ReactNode;
    /**
    * С помощью стиля можно задать цвет фона.
    */
    style?: ViewStyle;
    /**
    * Идентификатор для UI-тестирования.
    */
    testID?: string;
}
/**
 * Компонент предназначен для оборачивания виджетов стартового экрана.
 * Реализует базовый визуальный стиль: скругленные края и тень.
 * Дополнительно поддерживает обработчик нажатия на виджет, при этом не блокирует события, возникающие внутри виджета.
 *
 * Несмотря на отсутствие ограничений на тип компонентов, содержащихся в WidgetContainer, следует учитывать,
 * что ширина виджетов обычно не превышает половины экрана, что может накладывать ограничения на используемые компоненты.
 *
 * @category Visual
 */
export default class UFSWidgetContainerManager extends Component<Props, {}> {
    render(): JSX.Element;
}
