var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import React, { Component } from 'react';
import { requireNativeComponent, StyleSheet, View } from 'react-native';
/**
 * Компонент предназначен для оборачивания виджетов стартового экрана.
 * Реализует базовый визуальный стиль: скругленные края и тень.
 * Дополнительно поддерживает обработчик нажатия на виджет, при этом не блокирует события, возникающие внутри виджета.
 *
 * Несмотря на отсутствие ограничений на тип компонентов, содержащихся в WidgetContainer, следует учитывать,
 * что ширина виджетов обычно не превышает половины экрана, что может накладывать ограничения на используемые компоненты.
 *
 * @category Visual
 */
export default class UFSWidgetContainerManager extends Component {
    render() {
        return (React.createElement(UFSWidgetContainer, __assign({}, this.props), 
            React.createElement(View, {style: styles.contentContainer}, this.props.children)
        ));
    }
}
const styles = StyleSheet.create({
    contentContainer: {
        flex: 1,
        overflow: 'hidden',
        borderRadius: 4
    }
});
const UFSWidgetContainer = requireNativeComponent('UFSWidgetContainerView');
//# sourceMappingURL=UFSWidgetContainer.js.map