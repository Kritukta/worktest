/// <reference types="react-native" />
/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
export declare const UFSTabSelectorAutoWidthType: any;
export interface TabSelectorEvent {
    nativeEvent: {
        value: string;
        index: number;
    };
}
export interface Props {
    /**
     * Ключ выбранного элемента. Это свойство используется для программного изменения выбранного элемента.
     */
    value?: string;
    /**
     * @private
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Свойство, которое задаёт тип алгоритма для вычисления ширины компонента. Доступные значения:
     * - `NONE` - автоматическое вычисление ширины выключено.
     * Ширина задаётся явно с помощью стилей или подчиняется Flexbox. В данном режиме ширина всех элементов одинакова;
     * - `EQUAL_WIDTH` - каждому элементу задаётся значение ширины самого широкого `OptionItem`;
     * - `MIN_PADDING` - ширина каждого элемента вычисляется на основе содержимого с добавлением предустановленных отступов по краям.
     */
    autoWidth?: number;
    /**
     * В качестве дочерних компонентов принимается `OptionItem`.
     */
    children?: ReactNode;
}
export interface PublicProps extends Props {
    /**
     * Функция, которая выполняется при выборе элемента.
     * В качестве аргументов передаются индекс выбранного элемента и его значение.
     */
    onChange?: (index: number, value: string) => void;
}
export interface PrivateProps extends Props {
    onChange?: (event: TabSelectorEvent) => void;
}
/**
 * Компонент используется для предоставления пользователю исключающего выбора одного из нескольких вариантов.
 *
 * Ключ выбранного по умолчанию элемента указывается в свойстве `value`.
 * Значение свойства должно совпадать со значением нужного дочернего элемента `OptionItem`.
 * Если `value` не установлен, то ни один элемент по умолчанию выбран не будет.
 *
 * Высота данного компонента всегда одинакова и не меняется ни при каких условиях.
 * @category Visual/TabSelector
 */
export default class UFSTabSelectorManager extends Component<PublicProps, {}> {
    static defaultProps: {
        autoWidth: any;
    };
    onChange: (event: TabSelectorEvent) => void;
    render(): JSX.Element;
}
