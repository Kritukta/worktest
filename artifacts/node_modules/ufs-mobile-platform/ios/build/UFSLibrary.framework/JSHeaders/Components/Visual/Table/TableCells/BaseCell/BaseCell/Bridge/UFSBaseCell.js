var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import React, { Component } from 'react';
import { requireNativeComponent, StyleSheet, View } from 'react-native';
import UFSHeaderContainer from '../../HeaderContainer/Bridge/UFSHeaderContainer';
import UFSMainContainer from '../../MainContainer/Bridge/UFSMainContainer';
import UFSAccessoryContainer from '../../AccessoryContainer/Bridge/UFSAccessoryContainer';
/**
 * Типизированная ячейка представляет из себя контейнер, в котором могут размещаться дочерние
 * компоненты `MainContainer`, `AccessoryContainer` и `HeaderContainer`.
 * @category Visual/Table/Base Cells
 */
export default class UFSBaseCellManager extends Component {
    constructor() {
        super(...arguments);
        this.handlePropsUpdate = (props) => {
            this.mainContainer = null;
            this.accessoryContainer = null;
            this.headerContainer = null;
            React.Children.map(props.children, (child) => {
                if (child) {
                    if (child.type === UFSMainContainer) {
                        this.mainContainer = child;
                    }
                    else if (child.type === UFSAccessoryContainer) {
                        this.accessoryContainer = child;
                    }
                    else if (child.type === UFSHeaderContainer) {
                        this.headerContainer = child;
                    }
                    return child;
                }
            });
        };
    }
    componentWillMount() {
        this.handlePropsUpdate(this.props);
    }
    componentWillReceiveProps(nextProps) {
        this.handlePropsUpdate(nextProps);
    }
    render() {
        return (React.createElement(UFSBaseCell, __assign({}, this.props, {testID: this.props.testID}), 
            this.headerContainer, 
            React.createElement(View, {style: styles.container}, 
                this.mainContainer, 
                this.accessoryContainer)));
    }
}
const styles = StyleSheet.create({
    container: {
        flexDirection: 'row'
    }
});
const UFSBaseCell = requireNativeComponent('UFSBaseCellView');
//# sourceMappingURL=UFSBaseCell.js.map