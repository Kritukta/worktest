/// <reference types="react-native" />
/// <reference types="react" />
import React, { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
import { TableHeadChildProps } from '../../TableHead/Bridge/UFSTableHead';
export declare const UFSTableColumnAlignment: any;
export interface Props extends TableHeadChildProps {
    /**
     * Задаёт ширину колонки. Если введено числовое значение (`150`), то ширина будет выставлена в точках.
     * Если введено значение в процентах (`35%`), то ширина колонки будет вычислена относительно ширины таблицы.
     */
    width?: string;
    /**
     * Задает выравнивание в колонке. Доступные значения содержатся в справочнике `TableColumnAlignment`:
     * - `LEFT` (значение по умолчанию);
     * - `CENTER`;
     * - `RIGHT`.
     */
    align?: number;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `Text`.
     */
    children?: ReactNode;
}
export interface PrivateProps extends Props {
    widthString?: string;
    title?: string;
    hasHintIcon: boolean;
}
/**
 * @category Visual/Table
 * #### Особенности использования
 *
 * - Количество колонок должно соответствовать количеству ячеек в каждом ряду.
 * - Ширина колонок будет выставлена всем соответствующим нижестоящим ячейкам.
 * - Заголовок колонки задаётся дочерним элементом с типом `Text`.
 */
export default class UFSTableColumnManager extends Component<Props, {}> {
    hintIcons: React.ReactElement<any>[];
    static defaultProps: {
        align: any;
    };
    findColumnTitle: (children: React.ReactElement<any>[]) => string;
    columnTitle: (entity: React.ReactElement<any>) => String;
    hasHintIcon: (hintIcons: React.ReactElement<any>[]) => boolean;
    render(): JSX.Element;
}
