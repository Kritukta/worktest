/// <reference types="react-native" />
/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { TextStyle, TextProperties, ViewStyle } from 'react-native';
export interface Props extends TextProperties {
    /**
     * @private
     */
    ref?: any;
    /**
     * @private
     */
    key?: string;
    /**
     * @private
     */
    selectable?: boolean;
    /**
     * @private
     */
    suppressHighlighting?: boolean;
    /**
     * @private
     */
    minimumFontScale?: number;
    /**
     * @private
     */
    adjustsFontSizeToFit?: boolean;
    /**
     * @private
     */
    allowFontScaling?: boolean;
    /**
     * @private
     */
    lineBreakMode?: 'head' | 'middle' | 'tail' | 'clip';
    /**
     * @private
     */
    style?: ViewStyle;
    /**
     * @private
     */
    onPress?: () => void;
    /**
     * @private
     */
    onLongPress?: () => void;
    /**
     * @private
     */
    onLayout?: (event: any) => void;
    /**
     * @private
     */
    accessible?: boolean;
    /**
     * Визуальный стиль усечения текста, который не помещается в количество строк, заданных свойством `numberOfLines`.
     */
    ellipsizeMode?: 'head' | 'middle' | 'tail' | 'clip';
    /**
     * Максимальное количество строк. Значение по умолчанию - 0, означает неограниченное количество строк.
     */
    numberOfLines?: number;
    /**
     * Тип текстового стиля. Определяется свойствами интерфейса TextStyles. Доступные значения:
     * - `body1`;
     * - `body2`;
     * - `button1`;
     * - `button2`;
     * - `caption`.
     * - `display1`;
     * - `display2`;
     * - `heading`;
     * - `paragraph1` (значение по умолчанию);
     * - `paragraph2`.
     * - `subheading`;
     * - `title`;
     */
    preset?: TextStyle;
    /**
     * Дочерние компоненты могут быть следующих типов:
     * - `HintIcon`(к компоненту будет применено автоматическое позиционирование)
     */
    children?: ReactNode;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
}
/**
 * Компонент используется для вывода обычного текста.
 * Запрещена и не поддреживается возможность вывод текста без использования специальных компонентов.
  * @category Visual/Text
 */
export default class UFSText extends Component<Props, {}> {
    private childrenWithoutHintIcons;
    private hintIconsWithAdditionalLayout;
    private renderText;
    render(): JSX.Element;
}
