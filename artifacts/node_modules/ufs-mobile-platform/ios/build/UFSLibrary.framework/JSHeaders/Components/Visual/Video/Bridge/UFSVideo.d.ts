/// <reference types="react-native" />
/// <reference types="react" />
import { Component, ReactNode } from 'react';
import { ViewStyle } from 'react-native';
import { UFSError } from '../../../JSCore/Common/UFSError';
export interface PlayerEvent {
    nativeEvent: {
        value?: any;
    };
}
export interface Props {
    /**
     * Идентификатор файла, сохраненного в локальной базе данных.
     */
    fileId?: string;
    /**
     * Адрес видео в сети.
     */
    url?: string;
    /**
     * Управляет воспроизведением видео и его остановкой.
     */
    playing?: boolean;
    /**
     * Управляет переводом воспроизведения видео в полноэкранный режим.
     */
    fullscreen?: boolean;
    /**
     * Вызывается при начале воспроизведения видео.
     */
    onStart?: () => void;
    /**
     * Вызывается при окончании воспроизведения видео.
     */
    onEnd?: () => void;
    /**
     * Вызывается при нажатии кнопки "воспроизвести".
     */
    onPlayClick?: () => void;
    /**
     * Вызывается при нажатии кнопки "перейти в полноэкранный режим".
     */
    onFullscreenClick?: () => void;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * Идентификатор для UI-тестирования.
     */
    testID?: string;
    /**
     * Дочерние компоненты не поддерживаются.
     */
    children?: ReactNode;
}
export interface PublicProps extends Props {
    /**
     * Вызывается при начале и окончании буферизации видео.
     * В коллбек передается текущее состояние буферизации.
     */
    onWaiting?: (isWaiting: boolean) => void;
    /**
     * Вызывается при возникновении ошибки.
     */
    onError?: (error: UFSError) => void;
}
export interface PrivateProps extends Props {
    onWaiting?: (event: PlayerEvent) => void;
    onError?: (event: PlayerEvent) => void;
}
/**
 * Используется для воспроизведения видео-файлов.
 * ##### Особенности
 * - Если `fileId` или `url` не заданы, то при установке `playing=true` будет вызван блок `onError`;
 * - Если `fileId` и `url` заданы, то будет использован параметр `fileId`;
 * - Если `url` задан, и нет соединения с сетью, то при установке `playing=true` будет вызван блок `onError`;
 * - Если видео воспроизводится, и соединение теряется, то видео пытается продолжить воспроизведение (до бесконечности) без вызова блока `onError`;
 * - Блок `onWaiting` вызывается только при инверсии флага буферизации, и только при `playing=true`;
 * @category Visual
 */
export default class UFSVideoManager extends Component<PublicProps, {}> {
    private onWaiting;
    private onError;
    render(): JSX.Element;
}
