/// <reference types="react-native" />
/// <reference types="react" />
import { Component } from 'react';
import { ViewStyle, ReactNode } from 'react-native';
export declare const UFSWorkspacePanelType: {
    accessory: string;
    content: string;
};
export interface Props {
    /**
     * Тип отображения, принимает два значения из словаря `WorkspacePanelType` - `accessory` и `content`.
     */
    type: string;
    /**
     * Стили React.
     */
    style?: ViewStyle;
    /**
     * В качестве дочерних компонентов принимаются произвольные компоненты.
     */
    children?: ReactNode;
}
/**
 * Легковесный компонент для упрощения вёрстки. Представляет из себя контейнер для размещения в `WorkspaceContainer`.
 * Имеет два отображения - `accessory` и `content`.
 *
 * Оба отображения имеют серый фон, но `accessory` визуально находится ниже `content`. `accessory` имеет меньшую ширину, чем `content`.
 * Обычно внутри `WorkspaceContainer` размещается один (`content`) или два (`accessory` и `content`) `WorkspacePanel`, но
 * возможны и другие варианты использования компонента.
 *
 * Компонент допускает кастомизацию, стили, применённые к компоненту, имеют более высокий приоритет,
 * чем стандартные стили компонента.
 *
 * @category Visual/Workspace
 */
export default class UFSWorkspacePanel extends Component<Props, {}> {
    panelStyle: () => ViewStyle;
    render(): JSX.Element;
}
