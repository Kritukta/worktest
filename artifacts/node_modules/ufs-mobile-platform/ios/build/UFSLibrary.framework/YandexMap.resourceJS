ymaps.ready(
    onInit,
    onError
);

var map,
trafficProvider,
trafficLevel,
trafficEnabled = false,
currentRoute,
userLocationPlacemark,
placemarks,
activePlacemarkOptions,
defaultPlacemarkOptions,
hiddenPlacemarkOptions,
balloonContentLayout,
balloonLayout;

const kUFSEpsilon = 0.0000000001;

function onInit() {
    map = new ymaps.Map("map", {
        center: [55.76, 37.64],
        zoom: 11,
        controls: [],
        behaviors: []
    }, {
        suppressObsoleteBrowserNotifier: false,
        suppressMapOpenBlock: true,
        avoidFractionalZoom: false,
        projection: ymaps.projection.sphericalMercator
    });

    setupCustomPlacemarkLayout();
    placemarks = new ymaps.GeoObjectCollection({}, {});
    map.geoObjects.add(placemarks);

    fixFontBug();

    sendMessageToHandler('initializationHandler');
}

function onError() {
    sendMessageToHandler('failedInitializationHandler');
}

// API

function sendMessageToHandler(handler, message, callbackId) {
    const messageHandler = webkit.messageHandlers[handler];

    const messageBody = {
        'body': message,
        callbackId
    }

    try {
        messageHandler.postMessage(messageBody);
    } catch(err) {
        console.log('The native context does not exist yet');
    }
}

function handleMessageFromObjC(messageJSON) {
    var message = JSON.parse(messageJSON);
    var functionToCall = message['function'];
    var functionArguments = message['arguments'];
    var callbackId = message['callbackId'];
    if (callbackId) {
        if (functionArguments) {
            functionArguments += ", " + callbackId;;
        } else {
            functionArguments = callbackId;
        }
    }

    var command = '' + functionToCall + '(' + functionArguments +');';
    eval(command);
}

// Traffic

function showTraffic() {
    trafficEnabled = true;
    if (!trafficProvider) {
        trafficProvider = new ymaps.traffic.provider.Actual({},
            {
                autoUpdate: true,
                infoLayerShown: false
            }
        );
    }

    trafficProvider.state.events.add('change', onTrafficUpdate);
    trafficProvider.setMap(map);
    onTrafficUpdate();
}

function hideTraffic() {
    trafficEnabled = false;
    if (!trafficProvider) {
        return;
    }
    trafficProvider.state.events.remove('change', onTrafficUpdate);
    trafficProvider.setMap(null);
    trafficLevel = -1;
}

function onTrafficUpdate() {
    const newTrafficLevel = trafficProvider.state.get('level');
    if (newTrafficLevel && newTrafficLevel !== trafficLevel) {
        sendMessageToHandler('trafficUpdateHandler', newTrafficLevel);
        trafficLevel = newTrafficLevel;
    }
}

// Coordinates

function setCenterAndZoom(latitude, longitude, zoom) {
    map.setCenter([latitude, longitude], zoom);
}

// Routes

function makeRoute(routingMode) {
    var coordinates = Array.prototype.slice.call(arguments, 1);

    removeCurrentRoute();
    createNewRoute(routingMode, splitArray(coordinates, 2));
    subscribeOnRouteRequest();
}

function splitArray(array, size) {
    var arrays = [];

    while (array.length > 0) {
        arrays.push(array.splice(0, size));
    }

    return arrays;
}

function createNewRoute(routingMode, coordinates) {
    var viaIndexes = [];
    if (coordinates.length > 2) {
        var viaPointCoordinates = coordinates.slice(1, -1);
        viaIndexes = viaPointCoordinates.map(function(coordinates, index) {
            return index + 1;
        });
    }

    currentRoute = new ymaps.multiRouter.MultiRoute({
        referencePoints: coordinates,
        params: {
            routingMode: routingMode,
            avoidTrafficJams: trafficEnabled,
            // автоматически устанавливать центр и изменять зум
            mapStateAutoApply: false,
            viaIndexes: viaIndexes
        }
    }, {
        wayPointFinishIconLayout: "default",
        wayPointStartIconLayout: "default",
        // Автоматически устанавливать границы карты так, чтобы маршрут был виден целиком.
        boundsAutoApply: false
    });

    map.geoObjects.add(currentRoute);
}

function subscribeOnRouteRequest() {
    currentRoute.model.events.once('requestfail', function () {
        sendMessageToHandler('failedRouteHandler');
    });

    currentRoute.model.events.once('requestsuccess', function () {
        var routesLength = currentRoute.getRoutes().getLength();
        if (routesLength === 0) {
            sendMessageToHandler('failedRouteHandler');
        } else {
            var routes = Array();
            currentRoute.getRoutes().each( function (route) {
                routes.push({
                    duration: trafficEnabled ? route.properties.get('durationInTraffic').value : route.properties.get('duration').value,
                    distance: route.properties.get('distance').value
                });
            });
            sendMessageToHandler('successRouteHandler', routes);
            activeRouteEventHandler();
            currentRoute.events.add('activeroutechange', activeRouteEventHandler);
        }
    });
}

function activeRouteEventHandler() {
    var activeRoute = currentRoute.getActiveRoute();
    var activeRouteIndex = activeRoute.properties.get('index');
    sendMessageToHandler('activeRouteChangeHandler', activeRouteIndex);
}

function removeCurrentRoute() {
    if (!currentRoute) {
        return;
    }
    currentRoute.events.remove('activeroutechange', activeRouteEventHandler);
    map.geoObjects.remove(currentRoute);
    currentRoute = null;
}

// Location

function showUserLocation(latitude, longitude) {
    if (!userLocationPlacemark) {
        userLocationPlacemark = new ymaps.Placemark([latitude, longitude], {}, {
            preset: 'islands#geolocationIcon',
        });

        map.geoObjects.add(userLocationPlacemark);
    } else {
        userLocationPlacemark.geometry.setCoordinates([latitude, longitude]);
    }
}

function hideUserLocation() {
    if (!userLocationPlacemark) {
        return;
    }
    map.geoObjects.remove(userLocationPlacemark);
    userLocationPlacemark = null;
}

// Placemarks

function removePlacemarksWithUUIDArray() {
    var uuidArray = Array.prototype.slice.call(arguments);
    var uuidSet = new Set(uuidArray);

    for (var i = placemarks.getLength() - 1; i >= 0; i--) {
        var placemark = placemarks.get(i);
        if (uuidSet.has(placemark.properties.get('uuid'))) {
            placemarks.remove(placemark);
        }
    }
}

function addPlacemark(latitude, longitude, uuid, content, selected) {
    var placemark = new ymaps.Placemark([latitude, longitude], {
        content: content,
        uuid: uuid,
        selected: selected,

        defaultPlacemarkOptions: defaultPlacemarkOptions,
        activePlacemarkOptions: activePlacemarkOptions
    }, selected ? activePlacemarkOptions : defaultPlacemarkOptions);

    placemarks.add(placemark);
    placemark.events.add('click', handlePlacemarkClickEvent);

    if (selected) {
        placemark.balloon.open();
        placemark.balloon.events.add('beforeuserclose', handleBalloonBeforeCloseEvent);
    }
}

function updatePlacemark(latitude, longitude, uuid, content, selected) {
    placemarks.each(function(placemark) {
        if (uuid === placemark.properties.get('uuid')) {
            placemark.geometry.setCoordinates([latitude, longitude]);

            var wasSelected = placemark.properties.get('selected');
            if (wasSelected != selected) {
                placemark.properties.set({
                    selected: selected
                });
                setPlacemarkOptionFromProperty(placemark, selected ? 'activePlacemarkOptions' : 'defaultPlacemarkOptions');
                if (selected) {
                    placemark.balloon.open();
                    placemark.balloon.events.add('beforeuserclose', handleBalloonBeforeCloseEvent);
                } else {
                    placemark.balloon.close();
                    placemark.balloon.events.remove('beforeuserclose', handleBalloonBeforeCloseEvent);
                }
            }

            placemark.properties.set({
                content: content
            });
        }
    });
}

function setPlacemarkOptionFromProperty(placemark, property) {
    placemark.options.set(placemark.properties.get(property));
}

function handlePlacemarkClickEvent(event) {
    var clickedPlacemark = event.get('target');
    var clickedPlacemarkUUID = clickedPlacemark.properties.get('uuid');
    sendMessageToHandler('placemarkClickHandler', clickedPlacemarkUUID);
    event.preventDefault();
}

function handleBalloonBeforeCloseEvent(event) {
    event.preventDefault();
    var clickedPlacemark = event.get('target');
    var clickedPlacemarkUUID = clickedPlacemark.properties.get('uuid');
    sendMessageToHandler('balloonClickHandler', clickedPlacemarkUUID);

    // TODO: Fix it(preventDefault for some reason doesnt work, need to send email to yandex support)
    preventDefault();
}

function setupCustomPlacemarkLayout() {
    setupCustomBalloonLayout();

    var defaultPlacemarkLayout = ymaps.templateLayoutFactory.createClass(
        '<div class="green_placemark_image">' +
            '<img src="map_default_pin@2x.png" height="28" width="28" />' +
        '</div>'
    );
    ymaps.layout.storage.add('sbt#defaultPlacemarkLayout', defaultPlacemarkLayout);

    defaultPlacemarkOptions = {
        balloonOffset: [0, -44],
        iconLayout: 'sbt#defaultPlacemarkLayout',
        hideIconOnBalloonOpen: false,
        iconShape: {
            type: 'Circle',
            coordinates: [2, 0],
            radius: 12
        },
        balloonCloseButton: true,
        balloonAutoPan: false,
        balloonContentLayout: balloonContentLayout,
        balloonLayout: balloonLayout,
        zIndex: 100,
        zIndexActive: 200
    };

    var activePlacemarkLayout  = ymaps.templateLayoutFactory.createClass(
        '<div class="red_placemark_image">' +
            '<img src="map_active_pin@2x.png" height="44" width="28"/>' +
        '</div>'
    );
    ymaps.layout.storage.add('sbt#activePlacemarkLayout', activePlacemarkLayout);
    activePlacemarkOptions = {
        balloonOffset: [0, -44],
        iconLayout: 'sbt#activePlacemarkLayout',
        hideIconOnBalloonOpen: false,
        iconShape: {
            type: 'Rectangle',
            coordinates: [
                [-12, -38], [12, 6]
            ]
        },
        balloonCloseButton: true,
        balloonAutoPan: false,
        balloonContentLayout: balloonContentLayout,
        balloonLayout: balloonLayout,
        zIndex: 110,
        zIndexActive: 210
    };
}

function setupCustomBalloonLayout() {
    balloonContentLayout = ymaps.templateLayoutFactory.createClass(
        '<div class="balloon_content">' +
            '<div class="balloon_close_icon">' +
                '<input class="close" type="image" src="map_balloon_close@2x.png" height="36" width="36" />' +
            '</div>' +
            '{{properties.content}}' +
        '</div>'
    );
    ymaps.layout.storage.add('sbt#balloonContentLayout', balloonContentLayout);

    balloonLayout = ymaps.templateLayoutFactory.createClass(
        '<div class="balloon">' +
            '<div class="balloon-inner">' +
                '$[[options.contentLayout observeSize minWidth=260 maxWidth=260]]' +
            '</div>' +
        '</div>', {
        build: function() {
            this.constructor.superclass.build.call(this);

            this._$element = $('.balloon', this.getParentElement());
            this.applyElementOffset();

            var closeButton = this._$element.find('.close');
            closeButton
                .on('click', $.proxy(this.onCloseClick, this));
            closeButton
                .on('touchstart', $.proxy(this.onTouchStart, this));
            closeButton
                .on('touchend', $.proxy(this.onTouchEnd, this));
        },
        clear: function() {
            this._$element.find('.close')
                .off("click", "touchstart", "touchend");

            this.constructor.superclass.clear.call(this);
        },
        onSublayoutSizeChange: function() {
            balloonLayout.superclass.onSublayoutSizeChange.apply(this, arguments);
            this.applyElementOffset();
            this.events.fire('shapechange');
        },
        applyElementOffset: function() {
            this._$element.css({
                left: -(this._$element[0].offsetWidth / 2),
                top: -(this._$element[0].offsetHeight - 3)
            });
        },
        onCloseClick: function(event) {
            window.getSelection().removeAllRanges();
            event.preventDefault();
            this.events.fire('userclose');
        },
        onTouchStart: function(event) {
            this._$element.find('.close').attr("src", "map_balloon_close_touching@2x.png");
        },
        onTouchEnd: function(event) {
            var closeButton = this._$element.find('.close');
            closeButton.attr("src", "map_balloon_close@2x.png");
            this.applyClickIfNeeded(event, closeButton);
        },
        applyClickIfNeeded: function(event, closeButton) {
            if (event.originalEvent.changedTouches.length != 1) {
                return;
            }
            var x = event.originalEvent.changedTouches[0].pageX - window.pageXOffset;
            var y = event.originalEvent.changedTouches[0].pageY - window.pageYOffset;
            var touchTarget = $(document.elementFromPoint(x, y));
            if (touchTarget && touchTarget.is(closeButton)) {
                closeButton.click();
            }
        }
    });

    ymaps.layout.storage.add('sbt#balloonLayout', balloonLayout);
}

// Geocoding

function geocodeAddress(address, callbackId) {
    ymaps.geocode(address)
        .then(
            function(response) {
                var locations = [];

                response.geoObjects.each(function(geoObject) {
                    var coordinate = geoObject.geometry.getCoordinates();
                    locations.push({
                        lat: coordinate[0],
                        lng: coordinate[1]
                    });
                });

                sendMessageToHandler('geolocationHandler', locations, callbackId);
            },
            function(error) {
                sendMessageToHandler('geolocationHandler', { error }, callbackId);
            }
        );
}

// Other

function fixFontBug() {
    setupHiddenBalloonAndPlacemarkLayouts();

    var hiddenPlacemark = new ymaps.Placemark([55.76, 37.64], {content: 'content'}, hiddenPlacemarkOptions);
    placemarks.add(hiddenPlacemark);
    hiddenPlacemark.balloon.open();

    setTimeout(function () {
        placemarks.remove(hiddenPlacemark);
    }, 5000);
}

function setupHiddenBalloonAndPlacemarkLayouts() {
    var hiddenPlacemarkLayout = ymaps.templateLayoutFactory.createClass(
        '<div class="hidden_placemark"></div>'
    );
    ymaps.layout.storage.add('sbt#hiddenPlacemarkLayout', hiddenPlacemarkLayout);
    var hiddenBalloonContentLayout = ymaps.templateLayoutFactory.createClass(
        '<div class="balloon_hidden">' +
            '{{properties.content}}' +
        '</div>'
    );
    ymaps.layout.storage.add('sbt#hiddenBalloonContentLayout', hiddenBalloonContentLayout);
    var hiddenBalloonLayout = ymaps.templateLayoutFactory.createClass(
        '<div class="balloon_hidden">' +
            '$[[options.contentLayout observeSize minWidth=260 maxWidth=260]]' +
        '</div>'
    );
    ymaps.layout.storage.add('sbt#hiddenBalloonLayout', hiddenBalloonLayout);

    hiddenPlacemarkOptions = {
        iconLayout: 'sbt#hiddenPlacemarkLayout',
        balloonCloseButton: false,
        balloonAutoPan: false,
        balloonContentLayout: hiddenBalloonContentLayout,
        balloonLayout: hiddenBalloonLayout,
    }
}