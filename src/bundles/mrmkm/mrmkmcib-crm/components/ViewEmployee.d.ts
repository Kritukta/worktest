import React from 'react';
import { Models as ModelsApp } from 'mrmkmcib-app';
import { Models } from 'mrmkmcib-crm';
import { Models as ModelsScheduler } from 'mrmkmcib-scheduler';
import * as ModelsAppCRM from '../models/ModelsAppCRM';
import * as ModelsEmployee from '../models/ModelsEmployee';
import * as ModelsGsz from '../models/ModelsGSZ';
import Error from '../models/Error';
import { Enums } from '../Enums';
export interface IProps {
    callGetCustomerList: ModelsEmployee.CALL_GET_CUSTOMER_LIST;
    callGetSubordinateList: ModelsEmployee.CALL_GET_SUBORDINATE_LIST;
    currentEmployee: ModelsApp.Employee;
    currentEmployeeCachedDate: Date | null;
    currentEmployeeError: Error | null;
    currentEmployeeFetching: boolean;
    currentEmployeeId: string;
    currentAuthCustomer: ModelsApp.Employee;
    currentMode: Enums.EmployeeMode;
    currentSubordinate: ModelsApp.Employee;
    customerList: Models.CustomerList;
    customerListCachedDate: Date | null;
    customerListError: Error | null;
    customerListFetching: boolean;
    employeeNavigationHistory: ModelsApp.Employee[];
    foundPeopleList: ModelsScheduler.PersonList;
    foundPeopleListError: Error | null;
    foundPeopleListInProgress: boolean;
    isExtendedMode: boolean;
    isVisiblePopoverPersonList: boolean;
    navigateBack: ModelsEmployee.NAVIGATE_BACK;
    navigateEmployeeScreenBackToDeal: ModelsEmployee.NAVIGATE_BACK;
    navigateEmployeeScreenBackToDealAgreement: ModelsEmployee.NAVIGATE_BACK;
    navigateBackEmployee: ModelsEmployee.NAVIGATE_BACK_EMPLOYEE;
    navigateEmployeeScreenBack: ModelsEmployee.NAVIGATE_EMPLOYEE_SCREEN_BACK;
    navigatePopoverBack: ModelsEmployee.NAVIGATE_POPOVER_BACK;
    navigateToCustomerListScreen: ModelsEmployee.NAVIGATE_TO_CUSTOMER_LIST_SCREEN;
    navigateToEmailScreen: ModelsEmployee.NAVIGATE_TO_EMAIL_SCREEN;
    navigateToEmployeeScreen: ModelsEmployee.NAVIGATE_TO_EMPLOYEE_SCREEN;
    navigateToPersonContainerPopover: ModelsEmployee.NAVIGATE_TO_EMPLOYEE_CONTAINER_POPOVER;
    performContainerReset: ModelsEmployee.PERFORM_CONTAINER_RESET;
    performCustomerOpen: ModelsAppCRM.PERFORM_CUSTOMER_OPEN;
    performCustomerOpenWithResetPanel: ModelsAppCRM.PERFORM_CUSTOMER_OPEN;
    navigateToCustomerScreen: ModelsEmployee.NAVIGATE_TO_CUSTOMER_SCREEN;
    performFindPeople: ModelsEmployee.PERFORM_FIND_PEOPLE;
    performFlush: ModelsEmployee.PERFORM_FLUSH;
    performPersonSelect: ModelsEmployee.PERFORM_PERSON_SELECT;
    performPopoverPersonListHide: ModelsEmployee.PERFORM_POPOVER_PERSON_LIST_HIDE;
    performPopoverPersonListShow: ModelsEmployee.PERFORM_POPOVER_PERSON_LIST_SHOW;
    performPopoverSubordinateHide: ModelsEmployee.PERFORM_POPOVER_SUBORDINATE_HIDE;
    performPopoverSubordinateShow: ModelsEmployee.PERFORM_POPOVER_SUBORDINATE_SHOW;
    performNavigateToAddressBookEmployee: ModelsEmployee.NAVIGATE_TO_ADDRESS_BOOK_EMPLOYEE;
    performRefresh: ModelsEmployee.PERFORM_REFRESH;
    performSchedulerOpen: ModelsEmployee.PERFORM_SCHEDULER_OPEN;
    performSendEmail: ModelsEmployee.PERFORM_SEND_EMAIL;
    refresh_callGetEmployee: ModelsEmployee.REFRESH_CALL_GET_EMPLOYEE;
    performCancelRefreshError: ModelsEmployee.PERFORM_CANCEL_REFRESH_ERROR;
    performCancelSubordinateListError: ModelsEmployee.PERFORM_CANCEL_SUBORDINATE_LIST_ERROR;
    performCancelCustomerListError: ModelsEmployee.PERFORM_CANCEL_CUSTOMER_LIST_ERROR;
    performCertificateAlertPopoverHide: ModelsEmployee.PERFORM_CERTIFICATE_ALERT_POPOVER_HIDE;
    refresh: boolean;
    refreshError: Error | null;
    refreshInProgress: boolean;
    subordinateList: Models.MemberList;
    subordinateListCachedDate: Date | null;
    subordinateListError: Error | null;
    subordinateListFetching: boolean;
    isVisiblePopoverSubordinate: boolean;
    isVisibleErrorModal: boolean;
    performErrorModalShow: ModelsEmployee.PERFORM_ERROR_MODAL_SHOW;
    performErrorModalHide: ModelsEmployee.PERFORM_ERROR_MODAL_HIDE;
    testID: string;
    isEmployeeShedulerAvailable: boolean;
    selectedIndex: number | null;
    isVisibleCertificateAlertPopover: boolean;
    currentEmployeeHead: ModelsApp.Employee;
    currentEmployeeHeadFetching: boolean;
    currentEmployeeHeadError: Error | null;
    currentEmployeeHeadCachedDate: Date | null;
    performPopoverChiefHide: ModelsGsz.PERFORM_POPOVER_CHIEF_HIDE;
    performPopoverCuratorHide: ModelsGsz.PERFORM_POPOVER_CURATOR_HIDE;
}
declare const ViewEmployee: React.StatelessComponent<IProps>;
export default ViewEmployee;
