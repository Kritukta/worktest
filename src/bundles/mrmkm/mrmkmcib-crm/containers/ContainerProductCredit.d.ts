import React from 'react';
import { Models as ModelsApp } from "mrmkmcib-app";
import { Models as ModelsScheduler } from "mrmkmcib-scheduler";
import { Enums } from '../Enums';
import { Models } from "mrmkmcib-crm";
import * as ModelsAppCRM from "../models/ModelsAppCRM";
import * as ModelsProductList from "../models/ModelsProductList";
import * as ModelsAppProductList from "../models/ModelsProductList";
import * as ModelsProductCredit from "../models/ModelsProductCredit";
export interface IStateProps {
    classifierDictionary: ModelsApp.ClassifierDictionary;
    currentCreditProduct: Models.CreditProduct;
    currentCustomerManaged: Models.CustomerManaged;
    currentExchangePerson: ModelsScheduler.Person;
    currentForecastEvent: Models.ForecastEvent;
    currentTab: Enums.ProductCreditTab;
    forecastEventList: Models.ForecastEventList;
    forecastEventListCachedDate: Date | null;
    forecastEventListError: Models.Error | null;
    forecastEventListFetching: boolean;
    forecastEventListFiltered: Models.ForecastEventList;
    inputActiveFilterForecastEventType: ModelsApp.Classifier | null;
    inputActiveFilterPeriodEnd: Date | null;
    inputActiveFilterPeriodStart: Date | null;
    inputActiveFilterPeriodType: Enums.ForecastPeriodType;
    inputFilterForecastEventType: ModelsApp.Classifier | null;
    inputFilterPeriodEnd: Date | null;
    inputFilterPeriodStart: Date | null;
    inputFilterPeriodType: Enums.ForecastPeriodType;
    inputForecastEventComment: string;
    inputForecastEventCurrency: ModelsApp.Classifier;
    inputForecastEventDate: Date | null;
    inputForecastEventEmail: string;
    inputForecastEventPossibility: number;
    inputForecastEventSum: string | null;
    inputForecastEventType: ModelsApp.Classifier | null;
    inputFullRepayment: boolean;
    inputPaymentScheduleFilterOperCodeCred: boolean;
    inputPaymentScheduleFilterOperCodeProc: boolean;
    inputPaymentScheduleFilterOperCodeOther: boolean;
    inputPaymentScheduleFilterOperCodeCredApplied: boolean;
    inputPaymentScheduleFilterOperCodeProcApplied: boolean;
    inputPaymentScheduleFilterOperCodeOtherApplied: boolean;
    inputPaymentScheduleFilterOperCodeCredOld: boolean;
    inputPaymentScheduleFilterOperCodeProcOld: boolean;
    inputPaymentScheduleFilterOperCodeOtherOld: boolean;
    inputPaymentScheduleFilterPeriodEnd: Date | null;
    inputPaymentScheduleFilterPeriodStart: Date | null;
    inputPaymentScheduleFilterPeriodEndApplied: Date | null;
    inputPaymentScheduleFilterPeriodStartApplied: Date | null;
    inputPaymentScheduleFilterPeriodEndOld: Date | null;
    inputPaymentScheduleFilterPeriodStartOld: Date | null;
    inputPaymentScheduleFilterStatusExecPay: boolean;
    inputPaymentScheduleFilterStatusForPay: boolean;
    inputPaymentScheduleFilterStatusNotPay: boolean;
    inputPaymentScheduleFilterStatusExecPayApplied: boolean;
    inputPaymentScheduleFilterStatusForPayApplied: boolean;
    inputPaymentScheduleFilterStatusNotPayApplied: boolean;
    inputPaymentScheduleFilterStatusExecPayOld: boolean;
    inputPaymentScheduleFilterStatusForPayOld: boolean;
    inputPaymentScheduleFilterStatusNotPayOld: boolean;
    inputValidationForecastEventComment: string | null;
    inputValidationForecastEventCurrency: string | null;
    inputValidationForecastEventEmail: string | null;
    inputValidationForecastEventPossibility: number | null;
    inputValidationForecastEventSumm: string | null;
    inputValidationForecastEventType: string | null;
    isModalForecastEventSaveErrorVisible: boolean;
    isVisiblePopoverFilter: boolean;
    isVisiblePopoverForecastEvent: boolean;
    isPopoverPaymentSchedulePeriodFilterSelectedFromDatePicker: boolean;
    isVisiblePopoverPaymentScheduleOperationTypeFilter: boolean;
    isVisiblePopoverPaymentSchedulePeriodFilter: boolean;
    isVisiblePopoverPaymentScheduleStatusFilter: boolean;
    newForecastEventSaveError: Models.Error | null;
    newForecastEventSaveInProgress: boolean;
    productContextMode: Enums.ProductContextMode;
    covenantListFetching: boolean;
    covenantListFetchingError: Models.Error | null;
    productCovenantList: Models.ProductCovenantList;
    productListAgreementStatus: Enums.ProductListAgreementStatus;
    currentDeal: Models.ForecastDeal;
    paymentScheduleList: Models.PaymentScheduleList;
    paymentScheduleListFiltered: Models.PaymentScheduleList;
    paymentScheduleListFetching: boolean;
    paymentScheduleListLoadMoreFetching: boolean;
    paymentScheduleListError: Models.Error | null;
    paymentScheduleListCachedDate: Date | null;
    isVisiblePaymentScheduleRefreshModalAlert: boolean;
    paymentScheduleAlternativeScenariosTitle: string | null;
    paymentScheduleAlternativeScenariosMessage: string | null;
    paymentScheduleAlertViewIsVisible: boolean;
    paymentScheduleAlternativeScenariosType: Enums.paymentScheduleAlternativeScenariosType | null;
    paymentScheduleErrorModalIsVisible: boolean;
}
export interface IDispatchProps {
    navigateBack: ModelsAppCRM.NAVIGATE_BACK;
    navigateProductCreditBack: ModelsProductCredit.NAVIGATE_PRODUCT_CREDIT_BACK;
    navigateProductCreditDealBack: ModelsProductCredit.NAVIGATE_PRODUCT_CREDIT_DEAL_BACK;
    navigateProductListBack: ModelsProductList.NAVIGATE_PRODUCT_LIST_BACK;
    navigateToForecastEventCurrencyPickerScreen: ModelsProductCredit.NAVIGATE_TO_FORECAST_EVENT_CURRENCY_PICKER_SCREEN;
    navigateToForecastEventFilterPeriodCustomDateScreen: ModelsProductCredit.NAVIGATE_TO_FORECAST_EVENT_FILTER_PERIOD_CUSTOM_DATE_SCREEN;
    navigateToForecastEventFilterPeriodScreen: ModelsProductCredit.NAVIGATE_TO_FORECAST_EVENT_FILTER_PERIOD_SCREEN;
    navigateToForecastEventFilterTypePickerScreen: ModelsProductCredit.NAVIGATE_TO_FORECAST_EVENT_FILTER_TYPE_PICKER_SCREEN;
    navigateToForecastEventPossibilityPickerScreen: ModelsProductCredit.NAVIGATE_TO_FORECAST_EVENT_POSSIBILITY_PICKER_SCREEN;
    navigateToForecastEventTypPickerScreen: ModelsProductCredit.NAVIGATE_TO_FORECAST_EVENT_TYP_PICKER_SCREEN;
    navigateToForecastScreen: ModelsProductCredit.NAVIGATE_TO_FORECAST_SCREEN;
    navigateToPaymentScheduleScreen: ModelsProductCredit.NAVIGATE_TO_PAYMENT_SCHEDULE_SCREEN;
    navigateToPeriodTypeCustomScreen: ModelsProductCredit.NAVIGATE_TO_PERIOD_TYPE_CUSTOM_SCREEN;
    performCancelEditForecastEvent: ModelsProductCredit.PERFORM_CANCEL_EDIT_FORECAST_EVENT;
    performChangeTab: ModelsProductCredit.PERFORM_CHANGE_TAB;
    performContainerReset: ModelsProductCredit.PERFORM_CONTAINER_RESET;
    performFillDefaultValuesAndShowCreateEventPopup: ModelsProductCredit.PERFORM_FILL_DEFAULT_VALUES_AND_SHOW_CREATE_EVENT_POPUP;
    performFilterApply: ModelsProductCredit.PERFORM_FILTER_APPLY;
    performFilterCreateEventPopupReset: ModelsProductCredit.PERFORM_CREATE_EVENT_POPUP_RESET;
    performFilterCustomDateApply: ModelsProductCredit.PERFORM_FILTER_CUSTOM_DATE_APPLY;
    performFilterEventTypeReset: ModelsProductCredit.PERFORM_FILTER_EVENT_TYPE_RESET;
    performFilterPeriodReset: ModelsProductCredit.PERFORM_FILTER_PERIOD_RESET;
    performFilterReset: ModelsProductCredit.PERFORM_FILTER_RESET;
    performForecastEventDelete: ModelsProductCredit.PERFORM_FORECAST_EVENT_DELETE;
    performForecastEventSave: ModelsProductCredit.PERFORM_FORECAST_EVENT_SAVE;
    performForecastEventsListFlush: ModelsProductCredit.PERFORM_FORECAST_EVENTS_LIST_FLUSH;
    performHideModalForecastEventSaveError: ModelsProductCredit.PERFORM_HIDE_MODAL_FORECAST_EVENT_SAVE_ERROR;
    performInputFilterForecastEventType: ModelsProductCredit.PERFORM_INPUT_FILTER_FORECAST_EVENT_TYPE;
    performInputFilterPeriodEnd: ModelsProductCredit.PERFORM_INPUT_FILTER_PERIOD_END;
    performInputFilterPeriodStart: ModelsProductCredit.PERFORM_INPUT_FILTER_PERIOD_START;
    performInputFilterPeriodType: ModelsProductCredit.PERFORM_INPUT_FILTER_PERIOD_TYPE;
    performInputForecastEventComment: ModelsProductCredit.PERFORM_INPUT_FORECAST_EVENT_COMMENT;
    performInputForecastEventCurrency: ModelsProductCredit.PERFORM_INPUT_FORECAST_EVENT_CURRENCY;
    performInputForecastEventDate: ModelsProductCredit.PERFORM_INPUT_FORECAST_EVENT_DATE;
    performInputForecastEventEmail: ModelsProductCredit.PERFORM_INPUT_FORECAST_EVENT_EMAIL;
    performInputForecastEventPossibility: ModelsProductCredit.PERFORM_INPUT_FORECAST_EVENT_POSSIBILITY;
    performInputForecastEventSum: ModelsProductCredit.PERFORM_INPUT_FORECAST_EVENT_SUM;
    performInputForecastEventType: ModelsProductCredit.PERFORM_INPUT_FORECAST_EVENT_TYPE;
    performInputFullRepayment: ModelsProductCredit.PERFORM_INPUT_FULL_REPAYMENT;
    performinputPaymentScheduleFilterOperCodeCred: ModelsProductCredit.PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_DEBT_REPAYMENT;
    performinputPaymentScheduleFilterOperCodeProc: ModelsProductCredit.PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_INTEREST_REPAYMENT;
    performinputPaymentScheduleFilterOperCodeOther: ModelsProductCredit.PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_OTHER_REPAYMENT;
    performInputPaymentScheduleFilterPeriodEnd: ModelsProductCredit.PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_PERIOD_END;
    performInputPaymentScheduleFilterPeriodStart: ModelsProductCredit.PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_PERIOD_START;
    performinputPaymentScheduleFilterStatusExecPay: ModelsProductCredit.PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_STATUS_PAID;
    performinputPaymentScheduleFilterStatusForPay: ModelsProductCredit.PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_STATUS_TO_PAY;
    performinputPaymentScheduleFilterStatusNotPay: ModelsProductCredit.PERFORM_INPUT_PAYMENT_SCHEDULE_FILTER_STATUS_UNPAID;
    performPopoverFilterHide: ModelsProductCredit.PERFORM_POPOVER_FILTER_HIDE;
    performPopoverFilterShow: ModelsProductCredit.PERFORM_POPOVER_FILTER_SHOW;
    performPopoverForecastEventHide: ModelsProductCredit.PERFORM_POPOVER_FORECAST_EVENT_HIDE;
    performPopoverForecastEventShow: ModelsProductCredit.PERFORM_POPOVER_FORECAST_EVENT_SHOW;
    performPopoverPaymentScheduleOperationTypeFilterHide: ModelsProductCredit.PERFORM_POPOVER_PAYMENT_SCHEDULE_OPERATION_TYPE_FILTER_HIDE;
    performPopoverPaymentScheduleOperationTypeFilterShow: ModelsProductCredit.PERFORM_POPOVER_PAYMENT_SCHEDULE_OPERATION_TYPE_FILTER_SHOW;
    performPopoverPaymentSchedulePeriodFilterHide: ModelsProductCredit.PERFORM_POPOVER_PAYMENT_SCHEDULE_PERIOD_FILTER_HIDE;
    performPopoverPaymentSchedulePeriodFilterShow: ModelsProductCredit.PERFORM_POPOVER_PAYMENT_SCHEDULE_PERIOD_FILTER_SHOW;
    performPopoverPaymentSchedulePeriodSwitchDatePicker: ModelsProductCredit.PERFORM_POPOVER_PAYMENT_SCHEDULE_PERIOD_FILTER_SWITCH_DATEPICKER;
    performPopoverPaymentScheduleStatusFilterHide: ModelsProductCredit.PERFORM_POPOVER_PAYMENT_SCHEDULE_STATUS_FILTER_HIDE;
    performPopoverPaymentScheduleStatusFilterShow: ModelsProductCredit.PERFORM_POPOVER_PAYMENT_SCHEDULE_STATUS_FILTER_SHOW;
    performRefreshForecast: ModelsProductCredit.PERFORM_REFRESH_FORECAST;
    performRepeatForecastEventSave: ModelsProductCredit.PERFORM_REPEAT_FORECAST_EVENT_SAVE;
    navigateToCovenantListPage: ModelsProductCredit.PERFORM_NAVIGATE_TO_COVENANT_LIST_PAGE;
    performCallGetProductCovenantListCacheReset: ModelsProductCredit.PERFORM_CALL_GET_PRODUCT_COVENANT_LIST_CACHE_RESET;
    performSaveEditForecastEvent: ModelsProductCredit.PERFORM_SAVE_EDIT_FORECAST_EVENT;
    performOpenForecastEventDetails: ModelsProductCredit.PERFORM_OPEN_FORECAST_EVENT_DETAILS;
    navigateToProductForecastEventInfo: ModelsProductList.NAVIGATE_TO_PRODUCT_LIST_FORECAST_PRODUCT_INFO_SCREEN;
    performCustomerOpen: ModelsProductCredit.PERFORM_CUSTOMER_OPEN;
    performCustomerOpenExecute: ModelsAppCRM.PERFORM_CUSTOMER_OPEN_EXECUTE;
    navigateToProductForecastEventInfoScreen: ModelsAppProductList.NAVIGATE_TO_PRODUCT_LIST_FORECAST_PRODUCT_INFO_SCREEN;
    performPrognosticEventCreate: ModelsProductCredit.PERFORM_PROGNOSTIC_EVENT_CREATE;
    performPrognosticEventUpdate: ModelsProductCredit.PERFORM_PROGNOSTIC_EVENT_UPDATE;
    performPrognosticEventDetail: ModelsProductCredit.PERFORM_PROGNOSTIC_EVENT_DETAIL;
    performForecastEventCreate: ModelsProductCredit.PERFORM_FORECAST_EVENT_CREATE;
    performForecastEventUpdate: ModelsProductCredit.PERFORM_FORECAST_EVENT_UPDATE;
    performPaymentScheduleListFlush: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_LIST_FLUSH;
    performPaymentScheduleFilterPeriodSave: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_FILTER_PERIOD_SAVE;
    performPaymentScheduleFilterPeriodSetDefault: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_FILTER_PERIOD_SET;
    performPaymentScheduleFilterOperationTypeSave: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_SAVE;
    performPaymentScheduleFilterStatusSave: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_FILTER_STATUS_SAVE;
    performPaymentScheduleLoadMore: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_LOAD_MORE;
    performPaymentScheduleAlertHide: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_ALERT_HIDE;
    performPaymentScheduleAlertShow: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_ALERT_SHOW;
    performPaymentScheduleFilterPeriodReset: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_FILTER_PERIOD_RESET;
    performPaymentScheduleFilterOperationTypeReset: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_FILTER_OPERATION_TYPE_RESET;
    performPaymentScheduleFilterStatusReset: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_FILTER_STATUS_RESET;
    performPaymentScheduleAlertViewHandleOk: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_ALERT_VIEW_HANDLE_OK;
    performPaymentScheduleAlertViewHandleCancel: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_ALERT_VIEW_HANDLE_CANCEL;
    performPaymentScheduleErrorShow: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_ERROR_SHOW;
    performPaymentScheduleErrorHide: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_ERROR_HIDE;
    performPaymentScheduleListRefresh: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_LIST_REFRESH;
    performPaymentScheduleErrorViewHandleRepeat: ModelsProductCredit.PERFORM_PAYMENT_SCHEDULE_ERROR_VIEW_HANDLE_REPEAT;
}
export declare type IProductCreditProps = IStateProps & IDispatchProps & {
    testID: string;
};
declare const _default: React.ComponentClass<{
    testID: string;
}>;
export default _default;
