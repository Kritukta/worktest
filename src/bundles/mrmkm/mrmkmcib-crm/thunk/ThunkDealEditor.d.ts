import * as ModelState from "../models/Models";
import { Models as ModelsApp } from "mrmkmcib-app";
import { Models } from "mrmkmcib-crm";
import { Models as ModelsScheduler } from "mrmkmcib-scheduler";
import { Enums } from '../Enums';
import Error from "../models/Error";
export declare const navigateToDealEditor: (deal: Models.Deal, mode: Enums.DealEditorMode, agentList: Models.AgentList | null) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const initialValuesForDealEditor: (deal: Models.Deal) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const prepareProductClassifiers: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const prepareSalesMethodClassifiers: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const swapContext: (customer: Models.CustomerManaged, deal: Models.Deal, isEditorMode: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCancel: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performNext: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSave: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCancelSaveError: () => (dispatch: Function) => void;
export declare const perforSetDealCreationMode: (mode: Enums.DealCreationMode) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const prepareDealList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPostDealCreate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callGetDealRefresh: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPutDealUpdate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPutDealInitRoadMap: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performNavigationButtonDisabled: (isNavigationButtonDisabled: boolean) => (dispatch: Function) => void;
export declare const performReturnToDeal: () => (dispatch: Function) => void;
export declare const callPostDealCreateRequestSuccess: (id: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateBack: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateBackEditor: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputCustomer: (value: Models.CustomerManaged) => (dispatch: Function) => void;
export declare const performInputDescription: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToProductPickerScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputProduct: (value: ModelsApp.Classifier) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputFilteredMethodClassifier: (value: ModelsApp.ClassifierList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToSalesMethodPickerScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSalesMethod: (value: ModelsApp.Classifier) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToCurrencyPickerScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputCurrency: (value: ModelsApp.Classifier) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSumString: (value: string | null) => (dispatch: Function) => void;
export declare const performInputEquivalentSumString: (value: string | null) => (dispatch: Function) => void;
export declare const performInputTransferCommission: (value: string | null) => (dispatch: Function) => void;
export declare const performInputStaffCount: (value: string | null) => (dispatch: Function) => void;
export declare const performInputEquivalentConversionRateString: (value: string | null) => (dispatch: Function) => void;
export declare const performInputSavedMode: (savedMode: Enums.ValidateForm) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSetOwnerFlag: (isOwner: boolean) => (dispatch: Function) => void;
export declare const performValidateForm: (validateMode: Enums.ValidateForm | null, validateType?: Enums.ValidateFormType | undefined) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const setValidationError: (validationError: Error | null) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performUpdateSalesMethod: (value: ModelsApp.Classifier) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSetProductMethodMode: (isProductMethodEnabled: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSetEquivalentRateMode: (isEquivalentRateMode: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputDealDate: (value: Date | null) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToActivityListScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const getDealActivityList: (activityList: ModelsScheduler.ActivityList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performActivityListAppend: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputOperUuid: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPutDealActivityAppend: (index: number) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performActivityListExclude: (activity: ModelsScheduler.Activity) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callPutDealActivityExclude: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performScopeClearAndRefresh: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performContainerReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToMemberListScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSaveMemberListInNewDeal: (memberList: Models.MemberList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performValidate: (value: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performTapActivityDelete: (id: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToDealTypePickerScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputDealType: (dealType: ModelsApp.Classifier) => (dispatch: Function) => void;
export declare const performShowAdditionalFields: () => (dispatch: Function) => void;
export declare const navigateToAgentListScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const showChancePopover: (isChancePopoverOpened: boolean) => (dispatch: Function) => void;
export declare const showAttractionChannelPopover: (isAttractionChannelPopoverOpened: boolean) => (dispatch: Function) => void;
export declare const showApplicationPopover: (isApplicationPopoverOpened: boolean) => (dispatch: Function) => void;
export declare const showSalesMethodPopover: (isSalesMethodPopoverOpened: boolean) => (dispatch: Function) => void;
export declare const performSelectChance: (inputChance: string | null | undefined) => (dispatch: Function) => void;
export declare const performSelectApplication: (value: ModelsApp.Classifier) => (dispatch: Function) => void;
export declare const prepareApplicationKkClassifierList: (value: ModelsApp.Classifier) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSelectSalesMethod: (value: ModelsApp.Classifier) => (dispatch: Function) => void;
export declare const performSelectAttractionChannel: (value: ModelsApp.Classifier) => (dispatch: Function) => void;
export declare const performParentDealSet: (parentDeal: Models.Deal) => (dispatch: Function) => void;
export declare const performSalesCampaignSet: (salesCampaign: Models.SalesCampaign) => (dispatch: Function) => void;
export declare const performSaveAgentList: (inputAgentList: Models.AgentList) => (dispatch: Function) => void;
