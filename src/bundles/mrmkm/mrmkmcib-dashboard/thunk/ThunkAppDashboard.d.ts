import * as ModelState from "../models/Models";
import { Models as ModelsApp } from 'mrmkmcib-app';
import { Models as ModelsScheduler } from "mrmkmcib-scheduler";
import { Models as ModelsCrm } from "mrmkmcib-crm";
import { Enums } from '../Enums';
import { Models } from "mrmkmcib-dashboard";
import Error from "../models/Error";
export declare const inputSharePopoverSearchRefresh: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const inputCurrentRecipientListRefresh: (value: ModelsScheduler.Person, operation: Enums.Operation) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const foundPersonListClear: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const inputCurrentRepresentationRefresh: (value: Enums.Representation) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const inputCurrentFileFormatRefresh: (value: Enums.FileFormat) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToPopoverShareBack: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToPopoverShareRecipientsScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToPopoverShareRepresentationScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToPopoverShareFormatScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performPopoverShareShow: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performPopoverShareHide: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performApplicationInit: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const handleQlikError: (error: Error | null) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callQlikAuth: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const swapContext: (user: ModelsApp.Employee, appBuildVersion: string, appServerUrl: string, appServerPath: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSearchCustomerManaged: (value: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearchModeEnable: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearchModeDisable: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performInputSearch: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearchReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCustomerSearchListReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearch: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearchSuccess: (data: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearchFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const search_validateSearch: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const search_callGetCustomerSearchList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCustomerSearchListAppend: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCustomerSearchListAppendSuccess: (data: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCustomerSearchListAppendFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const searchAppend_callGetCustomerSearchListPage: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const searchAppend_customerSearchListConcat: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performQlikEvent: (message: Models.QlikMessage) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCustomerSelect: (customer: ModelsCrm.Customer) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performCustomerOpen: (customer: ModelsCrm.Customer) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSearchHistoryListClear: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const persistSearchHistoryList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const recoverSearchHistoryList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const recoverSearchHistoryListSuccess: (data: Models.SearchHistoryList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const recoverSearchHistoryListFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performContainerReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performUpdateSupParameters: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performFindPeople: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performFindPeopleSuccess: (data: ModelsScheduler.PersonList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performFindPeopleFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performPersistPeopleHistoryList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performRecoverPeopleHistoryList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performRecoverPeopleHistoryListSuccess: (data: ModelsScheduler.PersonList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performRecoverPeopleHistoryListFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSend: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callSendFile: (body: Models.IPerformSend) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const setCurrentAppDashboardQlikUrl: (url: string | null) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateBack: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const verifyCertificate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
