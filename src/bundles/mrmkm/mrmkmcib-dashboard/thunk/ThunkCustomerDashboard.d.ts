import * as ModelState from "../models/Models";
import { Models as ModelsApp } from 'mrmkmcib-app';
import { Models as ModelsCrm } from "mrmkmcib-crm";
import { Models as ModelsScheduler } from "mrmkmcib-scheduler";
import { Models } from "mrmkmcib-dashboard";
import { Enums } from '../Enums';
import Error from "../models/Error";
export declare const inputSharePopoverSearchRefresh: (value: string) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const inputCurrentRecipientListRefresh: (value: ModelsScheduler.Person, operation: Enums.Operation) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const foundPersonListClear: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const inputCurrentRepresentationRefresh: (value: Enums.Representation) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const inputCurrentFileFormatRefresh: (value: Enums.FileFormat) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const shareDataRefresh: (message: Models.QlikMessage) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToPopoverShareBack: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToPopoverShareRecipientsScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToPopoverShareRepresentationScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateToPopoverShareFormatScreen: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performPopoverShareShow: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performPopoverShareHide: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performApplicationInit: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const handleQlikError: (error: Error | null) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callQlikAvailabilityCheck: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const swapContext: (customerManaged: ModelsCrm.CustomerManaged, user: ModelsApp.Employee) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performQlikEvent: (message: Models.QlikMessage) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performContainerReset: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performUpdateSupParameters: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const setCurrentCustomerDashboardQlikUrl: (url: string | null) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performFindPeople: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performFindPeopleSuccess: (data: ModelsScheduler.PersonList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performFindPeopleFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performPersistPeopleHistoryList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performRecoverPeopleHistoryList: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performRecoverPeopleHistoryListSuccess: (data: ModelsScheduler.PersonList) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performRecoverPeopleHistoryListFailure: (error: Error) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const performSend: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const callSendFile: (body: Models.IPerformSend) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const setTrimmedTop: (value: boolean) => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const setQlikCookie: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const navigateBack: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
export declare const verifyCertificate: () => (dispatch: Function, getState: () => ModelState.IRootState) => void;
